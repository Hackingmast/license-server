(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_standardized-audio-context_build_es2019_43198ff4._.js", {

"[project]/node_modules/standardized-audio-context/build/es2019/factories/abort-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAbortError": (()=>createAbortError)
});
const createAbortError = ()=>new DOMException('', 'AbortError'); //# sourceMappingURL=abort-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddActiveInputConnectionToAudioNode": (()=>createAddActiveInputConnectionToAudioNode)
});
const createAddActiveInputConnectionToAudioNode = (insertElementInSet)=>{
    return (activeInputs, source, [output, input, eventListener], ignoreDuplicates)=>{
        insertElementInSet(activeInputs[input], [
            source,
            output,
            eventListener
        ], (activeInputConnection)=>activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
    };
}; //# sourceMappingURL=add-active-input-connection-to-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddAudioNodeConnections": (()=>createAddAudioNodeConnections)
});
const createAddAudioNodeConnections = (audioNodeConnectionsStore)=>{
    return (audioNode, audioNodeRenderer, nativeAudioNode)=>{
        const activeInputs = [];
        for(let i = 0; i < nativeAudioNode.numberOfInputs; i += 1){
            activeInputs.push(new Set());
        }
        audioNodeConnectionsStore.set(audioNode, {
            activeInputs,
            outputs: new Set(),
            passiveInputs: new WeakMap(),
            renderer: audioNodeRenderer
        });
    };
}; //# sourceMappingURL=add-audio-node-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddAudioParamConnections": (()=>createAddAudioParamConnections)
});
const createAddAudioParamConnections = (audioParamConnectionsStore)=>{
    return (audioParam, audioParamRenderer)=>{
        audioParamConnectionsStore.set(audioParam, {
            activeInputs: new Set(),
            passiveInputs: new WeakMap(),
            renderer: audioParamRenderer
        });
    };
}; //# sourceMappingURL=add-audio-param-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ACTIVE_AUDIO_NODE_STORE": (()=>ACTIVE_AUDIO_NODE_STORE),
    "AUDIO_NODE_CONNECTIONS_STORE": (()=>AUDIO_NODE_CONNECTIONS_STORE),
    "AUDIO_NODE_STORE": (()=>AUDIO_NODE_STORE),
    "AUDIO_PARAM_CONNECTIONS_STORE": (()=>AUDIO_PARAM_CONNECTIONS_STORE),
    "AUDIO_PARAM_STORE": (()=>AUDIO_PARAM_STORE),
    "CONTEXT_STORE": (()=>CONTEXT_STORE),
    "CYCLE_COUNTERS": (()=>CYCLE_COUNTERS),
    "EVENT_LISTENERS": (()=>EVENT_LISTENERS),
    "NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS": (()=>NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS),
    "NODE_TO_PROCESSOR_MAPS": (()=>NODE_TO_PROCESSOR_MAPS)
});
const ACTIVE_AUDIO_NODE_STORE = new WeakSet();
const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();
const AUDIO_NODE_STORE = new WeakMap();
const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();
const AUDIO_PARAM_STORE = new WeakMap();
const CONTEXT_STORE = new WeakMap();
const EVENT_LISTENERS = new WeakMap();
const CYCLE_COUNTERS = new WeakMap();
const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();
const NODE_TO_PROCESSOR_MAPS = new WeakMap(); //# sourceMappingURL=globals.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isConstructible": (()=>isConstructible)
});
const handler = {
    construct () {
        return handler;
    }
};
const isConstructible = (constructible)=>{
    try {
        const proxy = new Proxy(constructible, handler);
        new proxy(); // tslint:disable-line:no-unused-expression
    } catch  {
        return false;
    }
    return true;
}; //# sourceMappingURL=is-constructible.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * This massive regex tries to cover all the following cases.
 *
 * import './path';
 * import defaultImport from './path';
 * import { namedImport } from './path';
 * import { namedImport as renamendImport } from './path';
 * import * as namespaceImport from './path';
 * import defaultImport, { namedImport } from './path';
 * import defaultImport, { namedImport as renamendImport } from './path';
 * import defaultImport, * as namespaceImport from './path';
 */ __turbopack_context__.s({
    "splitImportStatements": (()=>splitImportStatements)
});
const IMPORT_STATEMENT_REGEX = /^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/; // tslint:disable-line:max-line-length
const splitImportStatements = (source, url)=>{
    const importStatements = [];
    let sourceWithoutImportStatements = source.replace(/^[\s]+/, '');
    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
    while(result !== null){
        const unresolvedUrl = result[1].slice(1, -1);
        const importStatementWithResolvedUrl = result[0].replace(/([\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());
        importStatements.push(importStatementWithResolvedUrl);
        sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\s]+/, '');
        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
    }
    return [
        importStatements.join(';'),
        sourceWithoutImportStatements
    ];
}; //# sourceMappingURL=split-import-statements.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddAudioWorkletModule": (()=>createAddAudioWorkletModule)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$constructible$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$split$2d$import$2d$statements$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js [app-client] (ecmascript)");
;
;
;
const verifyParameterDescriptors = (parameterDescriptors)=>{
    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {
        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');
    }
};
const verifyProcessorCtor = (processorCtor)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$constructible$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstructible"])(processorCtor)) {
        throw new TypeError('The given value for processorCtor should be a constructor.');
    }
    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {
        throw new TypeError('The given value for processorCtor should have a prototype.');
    }
};
const createAddAudioWorkletModule = (cacheTestResult, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window)=>{
    let index = 0;
    return (context, moduleURL, options = {
        credentials: 'omit'
    })=>{
        const resolvedRequestsOfContext = resolvedRequests.get(context);
        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {
            return Promise.resolve();
        }
        const ongoingRequestsOfContext = ongoingRequests.get(context);
        if (ongoingRequestsOfContext !== undefined) {
            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);
            if (promiseOfOngoingRequest !== undefined) {
                return promiseOfOngoingRequest;
            }
        }
        const nativeContext = getNativeContext(context);
        // Bug #59: Safari does not implement the audioWorklet property.
        const promise = nativeContext.audioWorklet === undefined ? fetchSource(moduleURL).then(([source, absoluteUrl])=>{
            const [importStatements, sourceWithoutImportStatements] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$split$2d$import$2d$statements$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["splitImportStatements"])(source, absoluteUrl);
            /*
                 * This is the unminified version of the code used below:
                 *
                 * ```js
                 * ${ importStatements };
                 * ((a, b) => {
                 *     (a[b] = a[b] || [ ]).push(
                 *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {
                 *             ${ sourceWithoutImportStatements }
                 *         }
                 *     );
                 * })(window, '_AWGS');
                 * ```
                 */ // tslint:disable-next-line:max-line-length
            const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}
})})(window,'_AWGS')`;
            // @todo Evaluating the given source code is a possible security problem.
            return evaluateSource(wrappedSource);
        }).then(()=>{
            const evaluateAudioWorkletGlobalScope = window._AWGS.pop();
            if (evaluateAudioWorkletGlobalScope === undefined) {
                // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
                throw new SyntaxError();
            }
            exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, ()=>evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {
                }, undefined, (name, processorCtor)=>{
                    if (name.trim() === '') {
                        throw createNotSupportedError();
                    }
                    const nodeNameToProcessorConstructorMap = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS"].get(nativeContext);
                    if (nodeNameToProcessorConstructorMap !== undefined) {
                        if (nodeNameToProcessorConstructorMap.has(name)) {
                            throw createNotSupportedError();
                        }
                        verifyProcessorCtor(processorCtor);
                        verifyParameterDescriptors(processorCtor.parameterDescriptors);
                        nodeNameToProcessorConstructorMap.set(name, processorCtor);
                    } else {
                        verifyProcessorCtor(processorCtor);
                        verifyParameterDescriptors(processorCtor.parameterDescriptors);
                        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS"].set(nativeContext, new Map([
                            [
                                name,
                                processorCtor
                            ]
                        ]));
                    }
                }, nativeContext.sampleRate, undefined, undefined));
        }) : Promise.all([
            fetchSource(moduleURL),
            Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))
        ]).then(([[source, absoluteUrl], isSupportingPostMessage])=>{
            const currentIndex = index + 1;
            index = currentIndex;
            const [importStatements, sourceWithoutImportStatements] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$split$2d$import$2d$statements$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["splitImportStatements"])(source, absoluteUrl);
            /*
                 * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
                 *
                 * This is the unminified version of the code used below.
                 *
                 * ```js
                 * class extends AudioWorkletProcessor {
                 *
                 *     __buffers = new WeakSet();
                 *
                 *     constructor () {
                 *         super();
                 *
                 *         this.port.postMessage = ((postMessage) => {
                 *             return (message, transferables) => {
                 *                 const filteredTransferables = (transferables)
                 *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))
                 *                     : transferables;
                 *
                 *                 return postMessage.call(this.port, message, filteredTransferables);
                 *              };
                 *         })(this.port.postMessage);
                 *     }
                 * }
                 * ```
                 */ const patchedAudioWorkletProcessor = isSupportingPostMessage ? 'AudioWorkletProcessor' : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';
            /*
                 * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.
                 *
                 * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
                 *
                 * Bug #190: Safari doesn't throw an error when loading an unparsable module.
                 *
                 * This is the unminified version of the code used below:
                 *
                 * ```js
                 * `${ importStatements };
                 * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }
                 * })(
                 *     ${ patchedAudioWorkletProcessor },
                 *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {
                 *
                 *         __collectBuffers = (array) => {
                 *             array.forEach((element) => this.__buffers.add(element.buffer));
                 *         };
                 *
                 *         process (inputs, outputs, parameters) {
                 *             inputs.forEach(this.__collectBuffers);
                 *             outputs.forEach(this.__collectBuffers);
                 *             this.__collectBuffers(Object.values(parameters));
                 *
                 *             return super.process(
                 *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),
                 *                 outputs,
                 *                 parameters
                 *             );
                 *         }
                 *
                 *     })
                 * );
                 *
                 * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{
                 *
                 *     process () {
                 *         return false;
                 *     }
                 *
                 * })`
                 * ```
                 */ const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';
            const bufferRegistration = isSupportingPostMessage ? '' : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';
            const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}
})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;
            const blob = new Blob([
                wrappedSource
            ], {
                type: 'application/javascript; charset=utf-8'
            });
            const url = URL.createObjectURL(blob);
            return nativeContext.audioWorklet.addModule(url, options).then(()=>{
                if (isNativeOfflineAudioContext(nativeContext)) {
                    return nativeContext;
                }
                // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.
                const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);
                return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(()=>backupOfflineAudioContext);
            }).then((nativeContextOrBackupOfflineAudioContext)=>{
                if (nativeAudioWorkletNodeConstructor === null) {
                    throw new SyntaxError();
                }
                try {
                    // Bug #190: Safari doesn't throw an error when loading an unparsable module.
                    new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`); // tslint:disable-line:no-unused-expression
                } catch  {
                    throw new SyntaxError();
                }
            }).finally(()=>URL.revokeObjectURL(url));
        });
        if (ongoingRequestsOfContext === undefined) {
            ongoingRequests.set(context, new Map([
                [
                    moduleURL,
                    promise
                ]
            ]));
        } else {
            ongoingRequestsOfContext.set(moduleURL, promise);
        }
        promise.then(()=>{
            const updatedResolvedRequestsOfContext = resolvedRequests.get(context);
            if (updatedResolvedRequestsOfContext === undefined) {
                resolvedRequests.set(context, new Set([
                    moduleURL
                ]));
            } else {
                updatedResolvedRequestsOfContext.add(moduleURL);
            }
        }).finally(()=>{
            const updatedOngoingRequestsOfContext = ongoingRequests.get(context);
            if (updatedOngoingRequestsOfContext !== undefined) {
                updatedOngoingRequestsOfContext.delete(moduleURL);
            }
        });
        return promise;
    };
}; //# sourceMappingURL=add-audio-worklet-module.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getValueForKey": (()=>getValueForKey)
});
const getValueForKey = (map, key)=>{
    const value = map.get(key);
    if (value === undefined) {
        throw new Error('A value with the given key could not be found.');
    }
    return value;
}; //# sourceMappingURL=get-value-for-key.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "pickElementFromSet": (()=>pickElementFromSet)
});
const pickElementFromSet = (set, predicate)=>{
    const matchingElements = Array.from(set).filter(predicate);
    if (matchingElements.length > 1) {
        throw Error('More than one element was found.');
    }
    if (matchingElements.length === 0) {
        throw Error('No element was found.');
    }
    const [matchingElement] = matchingElements;
    set.delete(matchingElement);
    return matchingElement;
}; //# sourceMappingURL=pick-element-from-set.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deletePassiveInputConnectionToAudioNode": (()=>deletePassiveInputConnectionToAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js [app-client] (ecmascript)");
;
;
const deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input)=>{
    const passiveInputConnections = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(passiveInputs, source);
    const matchingConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pickElementFromSet"])(passiveInputConnections, (passiveInputConnection)=>passiveInputConnection[0] === output && passiveInputConnection[1] === input);
    if (passiveInputConnections.size === 0) {
        passiveInputs.delete(source);
    }
    return matchingConnection;
}; //# sourceMappingURL=delete-passive-input-connection-to-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getEventListenersOfAudioNode": (()=>getEventListenersOfAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
;
;
const getEventListenersOfAudioNode = (audioNode)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EVENT_LISTENERS"], audioNode);
}; //# sourceMappingURL=get-event-listeners-of-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setInternalStateToActive": (()=>setInternalStateToActive)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js [app-client] (ecmascript)");
;
;
const setInternalStateToActive = (audioNode)=>{
    if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ACTIVE_AUDIO_NODE_STORE"].has(audioNode)) {
        throw new Error('The AudioNode is already stored.');
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ACTIVE_AUDIO_NODE_STORE"].add(audioNode);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventListenersOfAudioNode"])(audioNode).forEach((eventListener)=>eventListener(true));
}; //# sourceMappingURL=set-internal-state-to-active.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isAudioWorkletNode": (()=>isAudioWorkletNode)
});
const isAudioWorkletNode = (audioNode)=>{
    return 'port' in audioNode;
}; //# sourceMappingURL=audio-worklet-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setInternalStateToPassive": (()=>setInternalStateToPassive)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js [app-client] (ecmascript)");
;
;
const setInternalStateToPassive = (audioNode)=>{
    if (!__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ACTIVE_AUDIO_NODE_STORE"].has(audioNode)) {
        throw new Error('The AudioNode is not stored.');
    }
    __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ACTIVE_AUDIO_NODE_STORE"].delete(audioNode);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventListenersOfAudioNode"])(audioNode).forEach((eventListener)=>eventListener(false));
}; //# sourceMappingURL=set-internal-state-to-passive.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setInternalStateToPassiveWhenNecessary": (()=>setInternalStateToPassiveWhenNecessary)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js [app-client] (ecmascript)");
;
;
const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs)=>{
    if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioWorkletNode"])(audioNode) && activeInputs.every((connections)=>connections.size === 0)) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassive"])(audioNode);
    }
}; //# sourceMappingURL=set-internal-state-to-passive-when-necessary.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddConnectionToAudioNode": (()=>createAddConnectionToAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2d$when$2d$necessary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js [app-client] (ecmascript)");
;
;
;
const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode)=>{
    const tailTimeTimeoutIds = new WeakMap();
    return (source, destination, output, input, isOffline)=>{
        const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);
        const { outputs } = getAudioNodeConnections(source);
        const eventListeners = getEventListenersOfAudioNode(source);
        const eventListener = (isActive)=>{
            const nativeDestinationAudioNode = getNativeAudioNode(destination);
            const nativeSourceAudioNode = getNativeAudioNode(source);
            if (isActive) {
                const partialConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deletePassiveInputConnectionToAudioNode"])(passiveInputs, source, output, input);
                addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);
                if (!isOffline && !isPartOfACycle(source)) {
                    connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
                }
                if (isPassiveAudioNode(destination)) {
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToActive"])(destination);
                }
            } else {
                const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);
                addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);
                if (!isOffline && !isPartOfACycle(source)) {
                    disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
                }
                const tailTime = getAudioNodeTailTime(destination);
                if (tailTime === 0) {
                    if (isActiveAudioNode(destination)) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2d$when$2d$necessary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassiveWhenNecessary"])(destination, activeInputs);
                    }
                } else {
                    const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);
                    if (tailTimeTimeoutId !== undefined) {
                        clearTimeout(tailTimeTimeoutId);
                    }
                    tailTimeTimeoutIds.set(destination, setTimeout(()=>{
                        if (isActiveAudioNode(destination)) {
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2d$when$2d$necessary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassiveWhenNecessary"])(destination, activeInputs);
                        }
                    }, tailTime * 1000));
                }
            }
        };
        if (insertElementInSet(outputs, [
            destination,
            output,
            input
        ], (outputConnection)=>outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {
            eventListeners.add(eventListener);
            if (isActiveAudioNode(source)) {
                addActiveInputConnectionToAudioNode(activeInputs, source, [
                    output,
                    input,
                    eventListener
                ], true);
            } else {
                addPassiveInputConnectionToAudioNode(passiveInputs, input, [
                    source,
                    output,
                    eventListener
                ], true);
            }
            return true;
        }
        return false;
    };
}; //# sourceMappingURL=add-connection-to-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddPassiveInputConnectionToAudioNode": (()=>createAddPassiveInputConnectionToAudioNode)
});
const createAddPassiveInputConnectionToAudioNode = (insertElementInSet)=>{
    return (passiveInputs, input, [source, output, eventListener], ignoreDuplicates)=>{
        const passiveInputConnections = passiveInputs.get(source);
        if (passiveInputConnections === undefined) {
            passiveInputs.set(source, new Set([
                [
                    output,
                    input,
                    eventListener
                ]
            ]));
        } else {
            insertElementInSet(passiveInputConnections, [
                output,
                input,
                eventListener
            ], (passiveInputConnection)=>passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);
        }
    };
}; //# sourceMappingURL=add-passive-input-connection-to-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddSilentConnection": (()=>createAddSilentConnection)
});
const createAddSilentConnection = (createNativeGainNode)=>{
    return (nativeContext, nativeAudioScheduledSourceNode)=>{
        const nativeGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
        });
        nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);
        const disconnect = ()=>{
            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);
            nativeAudioScheduledSourceNode.disconnect(nativeGainNode);
            nativeGainNode.disconnect();
        };
        nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);
    };
}; //# sourceMappingURL=add-silent-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAddUnrenderedAudioWorkletNode": (()=>createAddUnrenderedAudioWorkletNode)
});
const createAddUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes)=>{
    return (nativeContext, audioWorkletNode)=>{
        getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);
    };
}; //# sourceMappingURL=add-unrendered-audio-worklet-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAnalyserNodeConstructor": (()=>createAnalyserNodeConstructor)
});
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    fftSize: 2048,
    maxDecibels: -30,
    minDecibels: -100,
    smoothingTimeConstant: 0.8
};
const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext)=>{
    return class AnalyserNode extends audionNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);
            const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;
            super(context, false, nativeAnalyserNode, analyserNodeRenderer);
            this._nativeAnalyserNode = nativeAnalyserNode;
        }
        get fftSize() {
            return this._nativeAnalyserNode.fftSize;
        }
        set fftSize(value) {
            this._nativeAnalyserNode.fftSize = value;
        }
        get frequencyBinCount() {
            return this._nativeAnalyserNode.frequencyBinCount;
        }
        get maxDecibels() {
            return this._nativeAnalyserNode.maxDecibels;
        }
        set maxDecibels(value) {
            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
            const maxDecibels = this._nativeAnalyserNode.maxDecibels;
            this._nativeAnalyserNode.maxDecibels = value;
            if (!(value > this._nativeAnalyserNode.minDecibels)) {
                this._nativeAnalyserNode.maxDecibels = maxDecibels;
                throw createIndexSizeError();
            }
        }
        get minDecibels() {
            return this._nativeAnalyserNode.minDecibels;
        }
        set minDecibels(value) {
            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
            const minDecibels = this._nativeAnalyserNode.minDecibels;
            this._nativeAnalyserNode.minDecibels = value;
            if (!(this._nativeAnalyserNode.maxDecibels > value)) {
                this._nativeAnalyserNode.minDecibels = minDecibels;
                throw createIndexSizeError();
            }
        }
        get smoothingTimeConstant() {
            return this._nativeAnalyserNode.smoothingTimeConstant;
        }
        set smoothingTimeConstant(value) {
            this._nativeAnalyserNode.smoothingTimeConstant = value;
        }
        getByteFrequencyData(array) {
            this._nativeAnalyserNode.getByteFrequencyData(array);
        }
        getByteTimeDomainData(array) {
            this._nativeAnalyserNode.getByteTimeDomainData(array);
        }
        getFloatFrequencyData(array) {
            this._nativeAnalyserNode.getFloatFrequencyData(array);
        }
        getFloatTimeDomainData(array) {
            this._nativeAnalyserNode.getFloatTimeDomainData(array);
        }
    };
}; //# sourceMappingURL=analyser-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isOwnedByContext": (()=>isOwnedByContext)
});
const isOwnedByContext = (nativeAudioNode, nativeContext)=>{
    return nativeAudioNode.context === nativeContext;
}; //# sourceMappingURL=is-owned-by-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAnalyserNodeRendererFactory": (()=>createAnalyserNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeAnalyserNodes = new WeakMap();
        const createAnalyserNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeAnalyserNode = getNativeAudioNode(proxy);
            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeAnalyserNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeAnalyserNode, nativeOfflineAudioContext);
            if (!nativeAnalyserNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeAnalyserNode.channelCount,
                    channelCountMode: nativeAnalyserNode.channelCountMode,
                    channelInterpretation: nativeAnalyserNode.channelInterpretation,
                    fftSize: nativeAnalyserNode.fftSize,
                    maxDecibels: nativeAnalyserNode.maxDecibels,
                    minDecibels: nativeAnalyserNode.minDecibels,
                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant
                };
                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);
            return nativeAnalyserNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAnalyserNode !== undefined) {
                    return Promise.resolve(renderedNativeAnalyserNode);
                }
                return createAnalyserNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=analyser-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioBufferCopyChannelMethodsOutOfBoundsSupport": (()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport)
});
const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer)=>{
    try {
        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);
    } catch  {
        return false;
    }
    return true;
}; //# sourceMappingURL=test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIndexSizeError": (()=>createIndexSizeError)
});
const createIndexSizeError = ()=>new DOMException('', 'IndexSizeError'); //# sourceMappingURL=index-size-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAudioBufferGetChannelDataMethod": (()=>wrapAudioBufferGetChannelDataMethod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js [app-client] (ecmascript)");
;
const wrapAudioBufferGetChannelDataMethod = (audioBuffer)=>{
    audioBuffer.getChannelData = ((getChannelData)=>{
        return (channel)=>{
            try {
                return getChannelData.call(audioBuffer, channel);
            } catch (err) {
                if (err.code === 12) {
                    throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"])();
                }
                throw err;
            }
        };
    })(audioBuffer.getChannelData);
}; //# sourceMappingURL=wrap-audio-buffer-get-channel-data-method.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioBufferConstructor": (()=>createAudioBufferConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$get$2d$channel$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js [app-client] (ecmascript)");
;
;
const DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds)=>{
    let nativeOfflineAudioContext = null;
    return class AudioBuffer {
        constructor(options){
            if (nativeOfflineAudioContextConstructor === null) {
                throw new Error('Missing the native OfflineAudioContext constructor.');
            }
            const { length, numberOfChannels, sampleRate } = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            if (nativeOfflineAudioContext === null) {
                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
            }
            /*
             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the
             * factory function. But since Firefox also supports the constructor everything should be fine.
             */ const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({
                length,
                numberOfChannels,
                sampleRate
            }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);
            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.
            if (audioBuffer.numberOfChannels === 0) {
                throw createNotSupportedError();
            }
            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
            if (typeof audioBuffer.copyFromChannel !== 'function') {
                wrapAudioBufferCopyChannelMethods(audioBuffer);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$get$2d$channel$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioBufferGetChannelDataMethod"])(audioBuffer);
            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
            } else if (!cacheTestResult(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioBufferCopyChannelMethodsOutOfBoundsSupport"], ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioBufferCopyChannelMethodsOutOfBoundsSupport"])(audioBuffer))) {
                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
            }
            audioBufferStore.add(audioBuffer);
            /*
             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native
             * (Offline)AudioContexts.
             */ return audioBuffer;
        }
        static [Symbol.hasInstance](instance) {
            return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);
        }
    };
}; //# sourceMappingURL=audio-buffer-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "MOST_NEGATIVE_SINGLE_FLOAT": (()=>MOST_NEGATIVE_SINGLE_FLOAT),
    "MOST_POSITIVE_SINGLE_FLOAT": (()=>MOST_POSITIVE_SINGLE_FLOAT)
});
const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;
const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT; //# sourceMappingURL=constants.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isActiveAudioNode": (()=>isActiveAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
;
const isActiveAudioNode = (audioNode)=>__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ACTIVE_AUDIO_NODE_STORE"].has(audioNode); //# sourceMappingURL=is-active-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioBufferSourceNodeConstructor": (()=>createAudioBufferSourceNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js [app-client] (ecmascript)");
;
;
;
;
const DEFAULT_OPTIONS = {
    buffer: null,
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    // Bug #149: Safari does not yet support the detune AudioParam.
    loop: false,
    loopEnd: 0,
    loopStart: 0,
    playbackRate: 1
};
const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener)=>{
    return class AudioBufferSourceNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;
            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);
            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;
            this._isBufferNullified = false;
            this._isBufferSet = mergedOptions.buffer !== null;
            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;
            this._onended = null;
            // Bug #73: Safari does not export the correct values for maxValue and minValue.
            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
        }
        get buffer() {
            if (this._isBufferNullified) {
                return null;
            }
            return this._nativeAudioBufferSourceNode.buffer;
        }
        set buffer(value) {
            this._nativeAudioBufferSourceNode.buffer = value;
            // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.
            if (value !== null) {
                if (this._isBufferSet) {
                    throw createInvalidStateError();
                }
                this._isBufferSet = true;
            }
        }
        get loop() {
            return this._nativeAudioBufferSourceNode.loop;
        }
        set loop(value) {
            this._nativeAudioBufferSourceNode.loop = value;
        }
        get loopEnd() {
            return this._nativeAudioBufferSourceNode.loopEnd;
        }
        set loopEnd(value) {
            this._nativeAudioBufferSourceNode.loopEnd = value;
        }
        get loopStart() {
            return this._nativeAudioBufferSourceNode.loopStart;
        }
        set loopStart(value) {
            this._nativeAudioBufferSourceNode.loopStart = value;
        }
        get onended() {
            return this._onended;
        }
        set onended(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeAudioBufferSourceNode.onended = wrappedListener;
            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;
            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
        }
        get playbackRate() {
            return this._playbackRate;
        }
        start(when = 0, offset = 0, duration) {
            this._nativeAudioBufferSourceNode.start(when, offset, duration);
            if (this._audioBufferSourceNodeRenderer !== null) {
                this._audioBufferSourceNodeRenderer.start = duration === undefined ? [
                    when,
                    offset
                ] : [
                    when,
                    offset,
                    duration
                ];
            }
            if (this.context.state !== 'closed') {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToActive"])(this);
                const resetInternalStateToPassive = ()=>{
                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"])(this)) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassive"])(this);
                    }
                };
                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);
            }
        }
        stop(when = 0) {
            this._nativeAudioBufferSourceNode.stop(when);
            if (this._audioBufferSourceNodeRenderer !== null) {
                this._audioBufferSourceNodeRenderer.stop = when;
            }
        }
    };
}; //# sourceMappingURL=audio-buffer-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioBufferSourceNodeRendererFactory": (()=>createAudioBufferSourceNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeAudioBufferSourceNodes = new WeakMap();
        let start = null;
        let stop = null;
        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */ const nativeAudioBufferSourceNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeAudioBufferSourceNode, nativeOfflineAudioContext);
            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
                const options = {
                    buffer: nativeAudioBufferSourceNode.buffer,
                    channelCount: nativeAudioBufferSourceNode.channelCount,
                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,
                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,
                    // Bug #149: Safari does not yet support the detune AudioParam.
                    loop: nativeAudioBufferSourceNode.loop,
                    loopEnd: nativeAudioBufferSourceNode.loopEnd,
                    loopStart: nativeAudioBufferSourceNode.loopStart,
                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value
                };
                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);
                if (start !== null) {
                    nativeAudioBufferSourceNode.start(...start);
                }
                if (stop !== null) {
                    nativeAudioBufferSourceNode.stop(stop);
                }
            }
            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);
            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
                // Bug #149: Safari does not yet support the detune AudioParam.
                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);
            } else {
                // Bug #149: Safari does not yet support the detune AudioParam.
                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);
            return nativeAudioBufferSourceNode;
        };
        return {
            set start (value){
                start = value;
            },
            set stop (value){
                stop = value;
            },
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioBufferSourceNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioBufferSourceNode);
                }
                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=audio-buffer-source-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isAudioBufferSourceNode": (()=>isAudioBufferSourceNode)
});
const isAudioBufferSourceNode = (audioNode)=>{
    return 'playbackRate' in audioNode;
}; //# sourceMappingURL=audio-buffer-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isBiquadFilterNode": (()=>isBiquadFilterNode)
});
const isBiquadFilterNode = (audioNode)=>{
    return 'frequency' in audioNode && 'gain' in audioNode;
}; //# sourceMappingURL=biquad-filter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isConstantSourceNode": (()=>isConstantSourceNode)
});
const isConstantSourceNode = (audioNode)=>{
    return 'offset' in audioNode;
}; //# sourceMappingURL=constant-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/gain-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isGainNode": (()=>isGainNode)
});
const isGainNode = (audioNode)=>{
    return !('frequency' in audioNode) && 'gain' in audioNode;
}; //# sourceMappingURL=gain-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isOscillatorNode": (()=>isOscillatorNode)
});
const isOscillatorNode = (audioNode)=>{
    return 'detune' in audioNode && 'frequency' in audioNode && !('gain' in audioNode);
}; //# sourceMappingURL=oscillator-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isStereoPannerNode": (()=>isStereoPannerNode)
});
const isStereoPannerNode = (audioNode)=>{
    return 'pan' in audioNode;
}; //# sourceMappingURL=stereo-panner-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getAudioNodeConnections": (()=>getAudioNodeConnections)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
;
;
const getAudioNodeConnections = (audioNode)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_NODE_CONNECTIONS_STORE"], audioNode);
}; //# sourceMappingURL=get-audio-node-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getAudioParamConnections": (()=>getAudioParamConnections)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
;
;
const getAudioParamConnections = (audioParam)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_PARAM_CONNECTIONS_STORE"], audioParam);
}; //# sourceMappingURL=get-audio-param-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deactivateActiveAudioNodeInputConnections": (()=>deactivateActiveAudioNodeInputConnections)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$buffer$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$constant$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/gain-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$oscillator$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$stereo$2d$panner$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
const deactivateActiveAudioNodeInputConnections = (audioNode, trace)=>{
    const { activeInputs } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(audioNode);
    activeInputs.forEach((connections)=>connections.forEach(([source])=>{
            if (!trace.includes(audioNode)) {
                deactivateActiveAudioNodeInputConnections(source, [
                    ...trace,
                    audioNode
                ]);
            }
        }));
    const audioParams = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$buffer$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioBufferSourceNode"])(audioNode) ? [
        // Bug #149: Safari does not yet support the detune AudioParam.
        audioNode.playbackRate
    ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioWorkletNode"])(audioNode) ? Array.from(audioNode.parameters.values()) : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isBiquadFilterNode"])(audioNode) ? [
        audioNode.Q,
        audioNode.detune,
        audioNode.frequency,
        audioNode.gain
    ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$constant$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isConstantSourceNode"])(audioNode) ? [
        audioNode.offset
    ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isGainNode"])(audioNode) ? [
        audioNode.gain
    ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$oscillator$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOscillatorNode"])(audioNode) ? [
        audioNode.detune,
        audioNode.frequency
    ] : (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$stereo$2d$panner$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isStereoPannerNode"])(audioNode) ? [
        audioNode.pan
    ] : [];
    for (const audioParam of audioParams){
        const audioParamConnections = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioParamConnections"])(audioParam);
        if (audioParamConnections !== undefined) {
            audioParamConnections.activeInputs.forEach(([source])=>deactivateActiveAudioNodeInputConnections(source, trace));
        }
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"])(audioNode)) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassive"])(audioNode);
    }
}; //# sourceMappingURL=deactivate-active-audio-node-input-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deactivateAudioGraph": (()=>deactivateAudioGraph)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$active$2d$audio$2d$node$2d$input$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js [app-client] (ecmascript)");
;
const deactivateAudioGraph = (context)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$active$2d$audio$2d$node$2d$input$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deactivateActiveAudioNodeInputConnections"])(context.destination, []);
}; //# sourceMappingURL=deactivate-audio-graph.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isValidLatencyHint": (()=>isValidLatencyHint)
});
const isValidLatencyHint = (latencyHint)=>{
    return latencyHint === undefined || typeof latencyHint === 'number' || typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback');
}; //# sourceMappingURL=is-valid-latency-hint.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioContextConstructor": (()=>createAudioContextConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$valid$2d$latency$2d$hint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js [app-client] (ecmascript)");
;
;
const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor)=>{
    return class AudioContext extends baseAudioContextConstructor {
        constructor(options = {}){
            if (nativeAudioContextConstructor === null) {
                throw new Error('Missing the native AudioContext constructor.');
            }
            let nativeAudioContext;
            try {
                nativeAudioContext = new nativeAudioContextConstructor(options);
            } catch (err) {
                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.
                if (err.code === 12 && err.message === 'sampleRate is not in range') {
                    throw createNotSupportedError();
                }
                throw err;
            }
            // Bug #131 Safari returns null when there are four other AudioContexts running already.
            if (nativeAudioContext === null) {
                throw createUnknownError();
            }
            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$valid$2d$latency$2d$hint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidLatencyHint"])(options.latencyHint)) {
                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
            }
            // Bug #150 Safari does not support setting the sampleRate.
            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
                throw createNotSupportedError();
            }
            super(nativeAudioContext, 2);
            const { latencyHint } = options;
            const { sampleRate } = nativeAudioContext;
            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.
            this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate : /*
                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
                                   * ScriptProcessorNode.
                                   */ Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;
            this._nativeAudioContext = nativeAudioContext;
            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.
            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {
                this._nativeGainNode = nativeAudioContext.createGain();
                this._nativeOscillatorNode = nativeAudioContext.createOscillator();
                this._nativeGainNode.gain.value = 1e-37;
                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);
                this._nativeOscillatorNode.start();
            } else {
                this._nativeGainNode = null;
                this._nativeOscillatorNode = null;
            }
            this._state = null;
            /*
             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes
             * to 'running'.
             */ if (nativeAudioContext.state === 'running') {
                this._state = 'suspended';
                const revokeState = ()=>{
                    if (this._state === 'suspended') {
                        this._state = null;
                    }
                    nativeAudioContext.removeEventListener('statechange', revokeState);
                };
                nativeAudioContext.addEventListener('statechange', revokeState);
            }
        }
        get baseLatency() {
            return this._baseLatency;
        }
        get state() {
            return this._state !== null ? this._state : this._nativeAudioContext.state;
        }
        close() {
            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
            if (this.state === 'closed') {
                return this._nativeAudioContext.close().then(()=>{
                    throw createInvalidStateError();
                });
            }
            // Bug #34: If the state was set to suspended before it should be revoked now.
            if (this._state === 'suspended') {
                this._state = null;
            }
            return this._nativeAudioContext.close().then(()=>{
                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {
                    this._nativeOscillatorNode.stop();
                    this._nativeGainNode.disconnect();
                    this._nativeOscillatorNode.disconnect();
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deactivateAudioGraph"])(this);
            });
        }
        createMediaElementSource(mediaElement) {
            return new mediaElementAudioSourceNodeConstructor(this, {
                mediaElement
            });
        }
        createMediaStreamDestination() {
            return new mediaStreamAudioDestinationNodeConstructor(this);
        }
        createMediaStreamSource(mediaStream) {
            return new mediaStreamAudioSourceNodeConstructor(this, {
                mediaStream
            });
        }
        createMediaStreamTrackSource(mediaStreamTrack) {
            return new mediaStreamTrackAudioSourceNodeConstructor(this, {
                mediaStreamTrack
            });
        }
        resume() {
            if (this._state === 'suspended') {
                return new Promise((resolve, reject)=>{
                    const resolvePromise = ()=>{
                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);
                        if (this._nativeAudioContext.state === 'running') {
                            resolve();
                        } else {
                            this.resume().then(resolve, reject);
                        }
                    };
                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);
                });
            }
            return this._nativeAudioContext.resume().catch((err)=>{
                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined || err.code === 15) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
        suspend() {
            return this._nativeAudioContext.suspend().catch((err)=>{
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
    };
}; //# sourceMappingURL=audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioDestinationNodeConstructor": (()=>createAudioDestinationNodeConstructor)
});
const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode)=>{
    return class AudioDestinationNode extends audioNodeConstructor {
        constructor(context, channelCount){
            const nativeContext = getNativeContext(context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);
            const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;
            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);
            this._isNodeOfNativeOfflineAudioContext = isOffline;
            this._nativeAudioDestinationNode = nativeAudioDestinationNode;
        }
        get channelCount() {
            return this._nativeAudioDestinationNode.channelCount;
        }
        set channelCount(value) {
            // Bug #52: Chrome, Edge & Safari do not throw an exception at all.
            // Bug #54: Firefox does throw an IndexSizeError.
            if (this._isNodeOfNativeOfflineAudioContext) {
                throw createInvalidStateError();
            }
            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.
            if (value > this._nativeAudioDestinationNode.maxChannelCount) {
                throw createIndexSizeError();
            }
            this._nativeAudioDestinationNode.channelCount = value;
        }
        get channelCountMode() {
            return this._nativeAudioDestinationNode.channelCountMode;
        }
        set channelCountMode(value) {
            // Bug #53: No browser does throw an exception yet.
            if (this._isNodeOfNativeOfflineAudioContext) {
                throw createInvalidStateError();
            }
            this._nativeAudioDestinationNode.channelCountMode = value;
        }
        get maxChannelCount() {
            return this._nativeAudioDestinationNode.maxChannelCount;
        }
    };
}; //# sourceMappingURL=audio-destination-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioDestinationNodeRenderer": (()=>createAudioDestinationNodeRenderer)
});
const createAudioDestinationNodeRenderer = (renderInputsOfAudioNode)=>{
    const renderedNativeAudioDestinationNodes = new WeakMap();
    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext)=>{
        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;
        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);
        return nativeAudioDestinationNode;
    };
    return {
        render (proxy, nativeOfflineAudioContext) {
            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);
            if (renderedNativeAudioDestinationNode !== undefined) {
                return Promise.resolve(renderedNativeAudioDestinationNode);
            }
            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);
        }
    };
}; //# sourceMappingURL=audio-destination-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioListenerFactory": (()=>createAudioListenerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)");
;
const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors)=>{
    return (context, nativeContext)=>{
        const nativeListener = nativeContext.listener;
        // Bug #117: Only Chrome & Edge support the new interface already.
        const createFakeAudioParams = ()=>{
            const buffer = new Float32Array(1);
            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'speakers',
                numberOfInputs: 9
            });
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            let isScriptProcessorNodeCreated = false;
            let lastOrientation = [
                0,
                0,
                -1,
                0,
                1,
                0
            ];
            let lastPosition = [
                0,
                0,
                0
            ];
            const createScriptProcessorNode = ()=>{
                if (isScriptProcessorNodeCreated) {
                    return;
                }
                isScriptProcessorNodeCreated = true;
                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);
                // tslint:disable-next-line:deprecation
                scriptProcessorNode.onaudioprocess = ({ inputBuffer })=>{
                    const orientation = [
                        getFirstSample(inputBuffer, buffer, 0),
                        getFirstSample(inputBuffer, buffer, 1),
                        getFirstSample(inputBuffer, buffer, 2),
                        getFirstSample(inputBuffer, buffer, 3),
                        getFirstSample(inputBuffer, buffer, 4),
                        getFirstSample(inputBuffer, buffer, 5)
                    ];
                    if (orientation.some((value, index)=>value !== lastOrientation[index])) {
                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation
                        lastOrientation = orientation;
                    }
                    const positon = [
                        getFirstSample(inputBuffer, buffer, 6),
                        getFirstSample(inputBuffer, buffer, 7),
                        getFirstSample(inputBuffer, buffer, 8)
                    ];
                    if (positon.some((value, index)=>value !== lastPosition[index])) {
                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation
                        lastPosition = positon;
                    }
                };
                channelMergerNode.connect(scriptProcessorNode);
            };
            const createSetOrientation = (index)=>(value)=>{
                    if (value !== lastOrientation[index]) {
                        lastOrientation[index] = value;
                        nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation
                    }
                };
            const createSetPosition = (index)=>(value)=>{
                    if (value !== lastPosition[index]) {
                        lastPosition[index] = value;
                        nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation
                    }
                };
            const createFakeAudioParam = (input, initialValue, setValue)=>{
                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
                    channelCount: 1,
                    channelCountMode: 'explicit',
                    channelInterpretation: 'discrete',
                    offset: initialValue
                });
                constantSourceNode.connect(channelMergerNode, 0, input);
                // @todo This should be stopped when the context is closed.
                constantSourceNode.start();
                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {
                    get () {
                        return initialValue;
                    }
                });
                /*
                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and
                 * minValue for GainNodes.
                 */ const audioParam = createAudioParam({
                    context
                }, isOffline, constantSourceNode.offset, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
                overwriteAccessors(audioParam, 'value', (get)=>()=>get.call(audioParam), (set)=>(value)=>{
                        try {
                            set.call(audioParam, value);
                        } catch (err) {
                            if (err.code !== 9) {
                                throw err;
                            }
                        }
                        createScriptProcessorNode();
                        if (isOffline) {
                            // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.
                            setValue(value);
                        }
                    });
                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime)=>{
                    if (isOffline) {
                        return ()=>{
                            throw createNotSupportedError();
                        };
                    }
                    return (...args)=>{
                        const value = cancelAndHoldAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.cancelAndHoldAtTime);
                audioParam.cancelScheduledValues = ((cancelScheduledValues)=>{
                    if (isOffline) {
                        return ()=>{
                            throw createNotSupportedError();
                        };
                    }
                    return (...args)=>{
                        const value = cancelScheduledValues.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.cancelScheduledValues);
                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime)=>{
                    if (isOffline) {
                        return ()=>{
                            throw createNotSupportedError();
                        };
                    }
                    return (...args)=>{
                        const value = exponentialRampToValueAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.exponentialRampToValueAtTime);
                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime)=>{
                    if (isOffline) {
                        return ()=>{
                            throw createNotSupportedError();
                        };
                    }
                    return (...args)=>{
                        const value = linearRampToValueAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.linearRampToValueAtTime);
                audioParam.setTargetAtTime = ((setTargetAtTime)=>{
                    if (isOffline) {
                        return ()=>{
                            throw createNotSupportedError();
                        };
                    }
                    return (...args)=>{
                        const value = setTargetAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.setTargetAtTime);
                audioParam.setValueAtTime = ((setValueAtTime)=>{
                    if (isOffline) {
                        return ()=>{
                            throw createNotSupportedError();
                        };
                    }
                    return (...args)=>{
                        const value = setValueAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.setValueAtTime);
                audioParam.setValueCurveAtTime = ((setValueCurveAtTime)=>{
                    if (isOffline) {
                        return ()=>{
                            throw createNotSupportedError();
                        };
                    }
                    return (...args)=>{
                        const value = setValueCurveAtTime.apply(audioParam, args);
                        createScriptProcessorNode();
                        return value;
                    };
                })(audioParam.setValueCurveAtTime);
                return audioParam;
            };
            return {
                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),
                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),
                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),
                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),
                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),
                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),
                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),
                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),
                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))
            };
        };
        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;
        return {
            get forwardX () {
                return forwardX;
            },
            get forwardY () {
                return forwardY;
            },
            get forwardZ () {
                return forwardZ;
            },
            get positionX () {
                return positionX;
            },
            get positionY () {
                return positionY;
            },
            get positionZ () {
                return positionZ;
            },
            get upX () {
                return upX;
            },
            get upY () {
                return upY;
            },
            get upZ () {
                return upZ;
            }
        };
    };
}; //# sourceMappingURL=audio-listener-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isAudioNode": (()=>isAudioNode)
});
const isAudioNode = (audioNodeOrAudioParam)=>{
    return 'context' in audioNodeOrAudioParam;
}; //# sourceMappingURL=audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isAudioNodeOutputConnection": (()=>isAudioNodeOutputConnection)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node.js [app-client] (ecmascript)");
;
const isAudioNodeOutputConnection = (outputConnection)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNode"])(outputConnection[0]);
}; //# sourceMappingURL=audio-node-output-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "insertElementInSet": (()=>insertElementInSet)
});
const insertElementInSet = (set, element, predicate, ignoreDuplicates)=>{
    for (const lmnt of set){
        if (predicate(lmnt)) {
            if (ignoreDuplicates) {
                return false;
            }
            throw Error('The set contains at least one similar element.');
        }
    }
    set.add(element);
    return true;
}; //# sourceMappingURL=insert-element-in-set.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addActiveInputConnectionToAudioParam": (()=>addActiveInputConnectionToAudioParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js [app-client] (ecmascript)");
;
const addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertElementInSet"])(activeInputs, [
        source,
        output,
        eventListener
    ], (activeInputConnection)=>activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
}; //# sourceMappingURL=add-active-input-connection-to-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "addPassiveInputConnectionToAudioParam": (()=>addPassiveInputConnectionToAudioParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js [app-client] (ecmascript)");
;
const addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates)=>{
    const passiveInputConnections = passiveInputs.get(source);
    if (passiveInputConnections === undefined) {
        passiveInputs.set(source, new Set([
            [
                output,
                eventListener
            ]
        ]));
    } else {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertElementInSet"])(passiveInputConnections, [
            output,
            eventListener
        ], (passiveInputConnection)=>passiveInputConnection[0] === output, ignoreDuplicates);
    }
}; //# sourceMappingURL=add-passive-input-connection-to-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isNativeAudioNodeFaker": (()=>isNativeAudioNodeFaker)
});
const isNativeAudioNodeFaker = (nativeAudioNodeOrNativeAudioNodeFaker)=>{
    return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;
}; //# sourceMappingURL=native-audio-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "connectNativeAudioNodeToNativeAudioNode": (()=>connectNativeAudioNodeToNativeAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js [app-client] (ecmascript)");
;
const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNodeFaker"])(nativeDestinationAudioNode)) {
        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];
        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);
        return [
            fakeNativeDestinationAudioNode,
            output,
            0
        ];
    }
    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);
    return [
        nativeDestinationAudioNode,
        output,
        input
    ];
}; //# sourceMappingURL=connect-native-audio-node-to-native-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deleteActiveInputConnection": (()=>deleteActiveInputConnection)
});
const deleteActiveInputConnection = (activeInputConnections, source, output)=>{
    for (const activeInputConnection of activeInputConnections){
        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {
            activeInputConnections.delete(activeInputConnection);
            return activeInputConnection;
        }
    }
    return null;
}; //# sourceMappingURL=delete-active-input-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deleteActiveInputConnectionToAudioParam": (()=>deleteActiveInputConnectionToAudioParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js [app-client] (ecmascript)");
;
const deleteActiveInputConnectionToAudioParam = (activeInputs, source, output)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pickElementFromSet"])(activeInputs, (activeInputConnection)=>activeInputConnection[0] === source && activeInputConnection[1] === output);
}; //# sourceMappingURL=delete-active-input-connection-to-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deleteEventListenerOfAudioNode": (()=>deleteEventListenerOfAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js [app-client] (ecmascript)");
;
const deleteEventListenerOfAudioNode = (audioNode, eventListener)=>{
    const eventListeners = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventListenersOfAudioNode"])(audioNode);
    if (!eventListeners.delete(eventListener)) {
        throw new Error('Missing the expected event listener.');
    }
}; //# sourceMappingURL=delete-event-listeners-of-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "deletePassiveInputConnectionToAudioParam": (()=>deletePassiveInputConnectionToAudioParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js [app-client] (ecmascript)");
;
;
const deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output)=>{
    const passiveInputConnections = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(passiveInputs, source);
    const matchingConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pickElementFromSet"])(passiveInputConnections, (passiveInputConnection)=>passiveInputConnection[0] === output);
    if (passiveInputConnections.size === 0) {
        passiveInputs.delete(source);
    }
    return matchingConnection;
}; //# sourceMappingURL=delete-passive-input-connection-to-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "disconnectNativeAudioNodeFromNativeAudioNode": (()=>disconnectNativeAudioNodeFromNativeAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js [app-client] (ecmascript)");
;
const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input)=>{
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNodeFaker"])(nativeDestinationAudioNode)) {
        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);
    } else {
        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);
    }
}; //# sourceMappingURL=disconnect-native-audio-node-from-native-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getNativeAudioNode": (()=>getNativeAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
;
;
const getNativeAudioNode = (audioNode)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_NODE_STORE"], audioNode);
}; //# sourceMappingURL=get-native-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getNativeAudioParam": (()=>getNativeAudioParam)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
;
;
const getNativeAudioParam = (audioParam)=>{
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_PARAM_STORE"], audioParam);
}; //# sourceMappingURL=get-native-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isPartOfACycle": (()=>isPartOfACycle)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
;
const isPartOfACycle = (audioNode)=>{
    return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CYCLE_COUNTERS"].has(audioNode);
}; //# sourceMappingURL=is-part-of-a-cycle.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isPassiveAudioNode": (()=>isPassiveAudioNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
;
const isPassiveAudioNode = (audioNode)=>{
    return !__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ACTIVE_AUDIO_NODE_STORE"].has(audioNode);
}; //# sourceMappingURL=is-passive-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioNodeDisconnectMethodSupport": (()=>testAudioNodeDisconnectMethodSupport)
});
const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor)=>{
    return new Promise((resolve)=>{
        /*
         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the
         * constructor for an AudioWorkletNode can be used here to skip the test.
         */ if (nativeAudioWorkletNodeConstructor !== null) {
            resolve(true);
        } else {
            const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation
            const dummy = nativeAudioContext.createGain();
            // Bug #95: Safari does not play one sample buffers.
            const ones = nativeAudioContext.createBuffer(1, 2, 44100);
            const channelData = ones.getChannelData(0);
            channelData[0] = 1;
            channelData[1] = 1;
            const source = nativeAudioContext.createBufferSource();
            source.buffer = ones;
            source.loop = true;
            source.connect(analyzer).connect(nativeAudioContext.destination);
            source.connect(dummy);
            source.disconnect(dummy);
            // tslint:disable-next-line:deprecation
            analyzer.onaudioprocess = (event)=>{
                const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation
                if (Array.prototype.some.call(chnnlDt, (sample)=>sample === 1)) {
                    resolve(true);
                } else {
                    resolve(false);
                }
                source.stop();
                analyzer.onaudioprocess = null; // tslint:disable-line:deprecation
                source.disconnect(analyzer);
                analyzer.disconnect(nativeAudioContext.destination);
            };
            source.start();
        }
    });
}; //# sourceMappingURL=test-audio-node-disconnect-method-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "visitEachAudioNodeOnce": (()=>visitEachAudioNodeOnce)
});
const visitEachAudioNodeOnce = (cycles, visitor)=>{
    const counts = new Map();
    for (const cycle of cycles){
        for (const audioNode of cycle){
            const count = counts.get(audioNode);
            counts.set(audioNode, count === undefined ? 1 : count + 1);
        }
    }
    counts.forEach((count, audioNode)=>visitor(audioNode, count));
}; //# sourceMappingURL=visit-each-audio-node-once.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isNativeAudioNode": (()=>isNativeAudioNode)
});
const isNativeAudioNode = (nativeAudioNodeOrAudioParam)=>{
    return 'context' in nativeAudioNodeOrAudioParam;
}; //# sourceMappingURL=native-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAudioNodeDisconnectMethod": (()=>wrapAudioNodeDisconnectMethod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js [app-client] (ecmascript)");
;
const wrapAudioNodeDisconnectMethod = (nativeAudioNode)=>{
    const connections = new Map();
    nativeAudioNode.connect = ((connect)=>{
        // tslint:disable-next-line:invalid-void no-inferrable-types
        return (destination, output = 0, input = 0)=>{
            const returnValue = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNode"])(destination) ? connect(destination, output, input) : connect(destination, output);
            // Save the new connection only if the calls to connect above didn't throw an error.
            const connectionsToDestination = connections.get(destination);
            if (connectionsToDestination === undefined) {
                connections.set(destination, [
                    {
                        input,
                        output
                    }
                ]);
            } else {
                if (connectionsToDestination.every((connection)=>connection.input !== input || connection.output !== output)) {
                    connectionsToDestination.push({
                        input,
                        output
                    });
                }
            }
            return returnValue;
        };
    })(nativeAudioNode.connect.bind(nativeAudioNode));
    nativeAudioNode.disconnect = ((disconnect)=>{
        return (destinationOrOutput, output, input)=>{
            disconnect.apply(nativeAudioNode);
            if (destinationOrOutput === undefined) {
                connections.clear();
            } else if (typeof destinationOrOutput === 'number') {
                for (const [destination, connectionsToDestination] of connections){
                    const filteredConnections = connectionsToDestination.filter((connection)=>connection.output !== destinationOrOutput);
                    if (filteredConnections.length === 0) {
                        connections.delete(destination);
                    } else {
                        connections.set(destination, filteredConnections);
                    }
                }
            } else if (connections.has(destinationOrOutput)) {
                if (output === undefined) {
                    connections.delete(destinationOrOutput);
                } else {
                    const connectionsToDestination = connections.get(destinationOrOutput);
                    if (connectionsToDestination !== undefined) {
                        const filteredConnections = connectionsToDestination.filter((connection)=>connection.output !== output && (connection.input !== input || input === undefined));
                        if (filteredConnections.length === 0) {
                            connections.delete(destinationOrOutput);
                        } else {
                            connections.set(destinationOrOutput, filteredConnections);
                        }
                    }
                }
            }
            for (const [destination, connectionsToDestination] of connections){
                connectionsToDestination.forEach((connection)=>{
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNode"])(destination)) {
                        nativeAudioNode.connect(destination, connection.output, connection.input);
                    } else {
                        nativeAudioNode.connect(destination, connection.output);
                    }
                });
            }
        };
    })(nativeAudioNode.disconnect);
}; //# sourceMappingURL=wrap-audio-node-disconnect-method.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioNodeConstructor": (()=>createAudioNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$active$2d$input$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$passive$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2d$when$2d$necessary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$node$2d$disconnect$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$visit$2d$each$2d$audio$2d$node$2d$once$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$node$2d$disconnect$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const addConnectionToAudioParamOfAudioContext = (source, destination, output, isOffline)=>{
    const { activeInputs, passiveInputs } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioParamConnections"])(destination);
    const { outputs } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(source);
    const eventListeners = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventListenersOfAudioNode"])(source);
    const eventListener = (isActive)=>{
        const nativeAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"])(source);
        const nativeAudioParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioParam"])(destination);
        if (isActive) {
            const partialConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deletePassiveInputConnectionToAudioParam"])(passiveInputs, source, output);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addActiveInputConnectionToAudioParam"])(activeInputs, source, partialConnection, false);
            if (!isOffline && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPartOfACycle"])(source)) {
                nativeAudioNode.connect(nativeAudioParam, output);
            }
        } else {
            const partialConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deleteActiveInputConnectionToAudioParam"])(activeInputs, source, output);
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addPassiveInputConnectionToAudioParam"])(passiveInputs, partialConnection, false);
            if (!isOffline && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPartOfACycle"])(source)) {
                nativeAudioNode.disconnect(nativeAudioParam, output);
            }
        }
    };
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertElementInSet"])(outputs, [
        destination,
        output
    ], (outputConnection)=>outputConnection[0] === destination && outputConnection[1] === output, true)) {
        eventListeners.add(eventListener);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"])(source)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addActiveInputConnectionToAudioParam"])(activeInputs, source, [
                output,
                eventListener
            ], true);
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["addPassiveInputConnectionToAudioParam"])(passiveInputs, [
                source,
                output,
                eventListener
            ], true);
        }
        return true;
    }
    return false;
};
const deleteInputConnectionOfAudioNode = (source, destination, output, input)=>{
    const { activeInputs, passiveInputs } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(destination);
    const activeInputConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$active$2d$input$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deleteActiveInputConnection"])(activeInputs[input], source, output);
    if (activeInputConnection === null) {
        const passiveInputConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deletePassiveInputConnectionToAudioNode"])(passiveInputs, source, output, input);
        return [
            passiveInputConnection[2],
            false
        ];
    }
    return [
        activeInputConnection[2],
        true
    ];
};
const deleteInputConnectionOfAudioParam = (source, destination, output)=>{
    const { activeInputs, passiveInputs } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioParamConnections"])(destination);
    const activeInputConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$active$2d$input$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deleteActiveInputConnection"])(activeInputs, source, output);
    if (activeInputConnection === null) {
        const passiveInputConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deletePassiveInputConnectionToAudioParam"])(passiveInputs, source, output);
        return [
            passiveInputConnection[1],
            false
        ];
    }
    return [
        activeInputConnection[2],
        true
    ];
};
const deleteInputsOfAudioNode = (source, isOffline, destination, output, input)=>{
    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);
    if (listener !== null) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deleteEventListenerOfAudioNode"])(source, listener);
        if (isActive && !isOffline && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPartOfACycle"])(source)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["disconnectNativeAudioNodeFromNativeAudioNode"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"])(source), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"])(destination), output, input);
        }
    }
    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"])(destination)) {
        const { activeInputs } = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(destination);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2d$when$2d$necessary$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassiveWhenNecessary"])(destination, activeInputs);
    }
};
const deleteInputsOfAudioParam = (source, isOffline, destination, output)=>{
    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);
    if (listener !== null) {
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$delete$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deleteEventListenerOfAudioNode"])(source, listener);
        if (isActive && !isOffline && !(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPartOfACycle"])(source)) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"])(source).disconnect((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioParam"])(destination), output);
        }
    }
};
const deleteAnyConnection = (source, isOffline)=>{
    const audioNodeConnectionsOfSource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(source);
    const destinations = [];
    for (const outputConnection of audioNodeConnectionsOfSource.outputs){
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNodeOutputConnection"])(outputConnection)) {
            deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
        } else {
            deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
        }
        destinations.push(outputConnection[0]);
    }
    audioNodeConnectionsOfSource.outputs.clear();
    return destinations;
};
const deleteConnectionAtOutput = (source, isOffline, output)=>{
    const audioNodeConnectionsOfSource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(source);
    const destinations = [];
    for (const outputConnection of audioNodeConnectionsOfSource.outputs){
        if (outputConnection[1] === output) {
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNodeOutputConnection"])(outputConnection)) {
                deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
            } else {
                deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
            }
            destinations.push(outputConnection[0]);
            audioNodeConnectionsOfSource.outputs.delete(outputConnection);
        }
    }
    return destinations;
};
const deleteConnectionToDestination = (source, isOffline, destination, output, input)=>{
    const audioNodeConnectionsOfSource = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(source);
    return Array.from(audioNodeConnectionsOfSource.outputs).filter((outputConnection)=>outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input)).map((outputConnection)=>{
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNodeOutputConnection"])(outputConnection)) {
            deleteInputsOfAudioNode(source, isOffline, ...outputConnection);
        } else {
            deleteInputsOfAudioParam(source, isOffline, ...outputConnection);
        }
        audioNodeConnectionsOfSource.outputs.delete(outputConnection);
        return outputConnection[0];
    });
};
const createAudioNodeConstructor = (addAudioNodeConnections, addConnectionToAudioNode, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor)=>{
    return class AudioNode extends eventTargetConstructor {
        constructor(context, isActive, nativeAudioNode, audioNodeRenderer){
            super(nativeAudioNode);
            this._context = context;
            this._nativeAudioNode = nativeAudioNode;
            const nativeContext = getNativeContext(context);
            // Bug #12: Safari does not support to disconnect a specific destination.
            if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$node$2d$disconnect$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioNodeDisconnectMethodSupport"], ()=>{
                return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$node$2d$disconnect$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioNodeDisconnectMethodSupport"])(nativeContext, nativeAudioWorkletNodeConstructor);
            })) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$node$2d$disconnect$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioNodeDisconnectMethod"])(nativeAudioNode);
            }
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_NODE_STORE"].set(this, nativeAudioNode);
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["EVENT_LISTENERS"].set(this, new Set());
            if (context.state !== 'closed' && isActive) {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToActive"])(this);
            }
            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);
        }
        get channelCount() {
            return this._nativeAudioNode.channelCount;
        }
        set channelCount(value) {
            this._nativeAudioNode.channelCount = value;
        }
        get channelCountMode() {
            return this._nativeAudioNode.channelCountMode;
        }
        set channelCountMode(value) {
            this._nativeAudioNode.channelCountMode = value;
        }
        get channelInterpretation() {
            return this._nativeAudioNode.channelInterpretation;
        }
        set channelInterpretation(value) {
            this._nativeAudioNode.channelInterpretation = value;
        }
        get context() {
            return this._context;
        }
        get numberOfInputs() {
            return this._nativeAudioNode.numberOfInputs;
        }
        get numberOfOutputs() {
            return this._nativeAudioNode.numberOfOutputs;
        }
        // tslint:disable-next-line:invalid-void
        connect(destination, output = 0, input = 0) {
            // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.
            if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {
                throw createIndexSizeError();
            }
            const nativeContext = getNativeContext(this._context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {
                throw createInvalidAccessError();
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNode"])(destination)) {
                const nativeDestinationAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"])(destination);
                try {
                    const connection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["connectNativeAudioNodeToNativeAudioNode"])(this._nativeAudioNode, nativeDestinationAudioNode, output, input);
                    const isPassive = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$passive$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPassiveAudioNode"])(this);
                    if (isOffline || isPassive) {
                        this._nativeAudioNode.disconnect(...connection);
                    }
                    if (this.context.state !== 'closed' && !isPassive && (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$passive$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPassiveAudioNode"])(destination)) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToActive"])(destination);
                    }
                } catch (err) {
                    // Bug #41: Safari does not throw the correct exception so far.
                    if (err.code === 12) {
                        throw createInvalidAccessError();
                    }
                    throw err;
                }
                const isNewConnectionToAudioNode = addConnectionToAudioNode(this, destination, output, input, isOffline);
                // Bug #164: Only Firefox detects cycles so far.
                if (isNewConnectionToAudioNode) {
                    const cycles = detectCycles([
                        this
                    ], destination);
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$visit$2d$each$2d$audio$2d$node$2d$once$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visitEachAudioNodeOnce"])(cycles, createIncrementCycleCounter(isOffline));
                }
                return destination;
            }
            const nativeAudioParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioParam"])(destination);
            /*
             * Bug #73, #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an
             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify
             * Safari. In addition to that the maxValue property is used to only detect the affected versions below v14.0.2.
             */ if (nativeAudioParam.name === 'playbackRate' && nativeAudioParam.maxValue === 1024) {
                throw createNotSupportedError();
            }
            try {
                this._nativeAudioNode.connect(nativeAudioParam, output);
                if (isOffline || (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$passive$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPassiveAudioNode"])(this)) {
                    this._nativeAudioNode.disconnect(nativeAudioParam, output);
                }
            } catch (err) {
                // Bug #58: Safari doesn't throw an InvalidAccessError yet.
                if (err.code === 12) {
                    throw createInvalidAccessError();
                }
                throw err;
            }
            const isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline);
            // Bug #164: Only Firefox detects cycles so far.
            if (isNewConnectionToAudioParam) {
                const cycles = detectCycles([
                    this
                ], destination);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$visit$2d$each$2d$audio$2d$node$2d$once$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visitEachAudioNodeOnce"])(cycles, createIncrementCycleCounter(isOffline));
            }
        }
        disconnect(destinationOrOutput, output, input) {
            let destinations;
            const nativeContext = getNativeContext(this._context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            if (destinationOrOutput === undefined) {
                destinations = deleteAnyConnection(this, isOffline);
            } else if (typeof destinationOrOutput === 'number') {
                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {
                    throw createIndexSizeError();
                }
                destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);
            } else {
                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {
                    throw createIndexSizeError();
                }
                if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNode"])(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {
                    throw createIndexSizeError();
                }
                destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);
                if (destinations.length === 0) {
                    throw createInvalidAccessError();
                }
            }
            // Bug #164: Only Firefox detects cycles so far.
            for (const destination of destinations){
                const cycles = detectCycles([
                    this
                ], destination);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$visit$2d$each$2d$audio$2d$node$2d$once$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["visitEachAudioNodeOnce"])(cycles, decrementCycleCounter);
            }
        }
    };
}; //# sourceMappingURL=audio-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioParamFactory": (()=>createAudioParamFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/automation-events/build/es5/bundle.js [app-client] (ecmascript)");
;
const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible)=>{
    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null)=>{
        // Bug #196 Only Safari sets the defaultValue to the initial value.
        const defaultValue = nativeAudioParam.value;
        const automationEventList = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AutomationEventList"](defaultValue);
        const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;
        const audioParam = {
            get defaultValue () {
                return defaultValue;
            },
            get maxValue () {
                return maxValue === null ? nativeAudioParam.maxValue : maxValue;
            },
            get minValue () {
                return minValue === null ? nativeAudioParam.minValue : minValue;
            },
            get value () {
                return nativeAudioParam.value;
            },
            set value (value){
                nativeAudioParam.value = value;
                // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().
                audioParam.setValueAtTime(value, audioNode.context.currentTime);
            },
            cancelAndHoldAtTime (cancelTime) {
                // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().
                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);
                } else {
                    const previousLastEvent = Array.from(automationEventList).pop();
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
                    const currentLastEvent = Array.from(automationEventList).pop();
                    nativeAudioParam.cancelScheduledValues(cancelTime);
                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {
                        if (currentLastEvent.type === 'exponentialRampToValue') {
                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
                        } else if (currentLastEvent.type === 'linearRampToValue') {
                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
                        } else if (currentLastEvent.type === 'setValue') {
                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);
                        } else if (currentLastEvent.type === 'setValueCurve') {
                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);
                        }
                    }
                }
                return audioParam;
            },
            cancelScheduledValues (cancelTime) {
                if (audioParamRenderer === null) {
                    automationEventList.flush(audioNode.context.currentTime);
                }
                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));
                nativeAudioParam.cancelScheduledValues(cancelTime);
                return audioParam;
            },
            exponentialRampToValueAtTime (value1, endTime) {
                // Bug #45: Safari does not throw an error yet.
                if (value1 === 0) {
                    throw new RangeError();
                }
                // Bug #187: Safari does not throw an error yet.
                if (!Number.isFinite(endTime) || endTime < 0) {
                    throw new RangeError();
                }
                const currentTime = audioNode.context.currentTime;
                if (audioParamRenderer === null) {
                    automationEventList.flush(currentTime);
                }
                // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.
                if (Array.from(automationEventList).length === 0) {
                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));
                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);
                }
                automationEventList.add(createExponentialRampToValueAutomationEvent(value1, endTime));
                nativeAudioParam.exponentialRampToValueAtTime(value1, endTime);
                return audioParam;
            },
            linearRampToValueAtTime (value1, endTime) {
                const currentTime = audioNode.context.currentTime;
                if (audioParamRenderer === null) {
                    automationEventList.flush(currentTime);
                }
                // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.
                if (Array.from(automationEventList).length === 0) {
                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));
                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);
                }
                automationEventList.add(createLinearRampToValueAutomationEvent(value1, endTime));
                nativeAudioParam.linearRampToValueAtTime(value1, endTime);
                return audioParam;
            },
            setTargetAtTime (target, startTime, timeConstant) {
                if (audioParamRenderer === null) {
                    automationEventList.flush(audioNode.context.currentTime);
                }
                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));
                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);
                return audioParam;
            },
            setValueAtTime (value1, startTime) {
                if (audioParamRenderer === null) {
                    automationEventList.flush(audioNode.context.currentTime);
                }
                automationEventList.add(createSetValueAutomationEvent(value1, startTime));
                nativeAudioParam.setValueAtTime(value1, startTime);
                return audioParam;
            },
            setValueCurveAtTime (values, startTime, duration) {
                // Bug 183: Safari only accepts a Float32Array.
                const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);
                /*
                 * Bug #152: Safari does not correctly interpolate the values of the curve.
                 * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the
                 * existence of the webkitAudioContext is used as a workaround here.
                 */ if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {
                    const endTime = startTime + duration;
                    const sampleRate = audioNode.context.sampleRate;
                    const firstSample = Math.ceil(startTime * sampleRate);
                    const lastSample = Math.floor(endTime * sampleRate);
                    const numberOfInterpolatedValues = lastSample - firstSample;
                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);
                    for(let i = 0; i < numberOfInterpolatedValues; i += 1){
                        const theoreticIndex = (convertedValues.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);
                        const lowerIndex = Math.floor(theoreticIndex);
                        const upperIndex = Math.ceil(theoreticIndex);
                        interpolatedValues[i] = lowerIndex === upperIndex ? convertedValues[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];
                    }
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));
                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);
                    const timeOfLastSample = lastSample / sampleRate;
                    if (timeOfLastSample < endTime) {
                        setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);
                    }
                    setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);
                } else {
                    if (audioParamRenderer === null) {
                        automationEventList.flush(audioNode.context.currentTime);
                    }
                    automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));
                    nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);
                }
                return audioParam;
            }
        };
        audioParamStore.set(audioParam, nativeAudioParam);
        audioParamAudioNodeStore.set(audioParam, audioNode);
        addAudioParamConnections(audioParam, audioParamRenderer);
        return audioParam;
    };
}; //# sourceMappingURL=audio-param-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioParamRenderer": (()=>createAudioParamRenderer)
});
const createAudioParamRenderer = (automationEventList)=>{
    return {
        replay (audioParam) {
            for (const automationEvent of automationEventList){
                if (automationEvent.type === 'exponentialRampToValue') {
                    const { endTime, value } = automationEvent;
                    audioParam.exponentialRampToValueAtTime(value, endTime);
                } else if (automationEvent.type === 'linearRampToValue') {
                    const { endTime, value } = automationEvent;
                    audioParam.linearRampToValueAtTime(value, endTime);
                } else if (automationEvent.type === 'setTarget') {
                    const { startTime, target, timeConstant } = automationEvent;
                    audioParam.setTargetAtTime(target, startTime, timeConstant);
                } else if (automationEvent.type === 'setValue') {
                    const { startTime, value } = automationEvent;
                    audioParam.setValueAtTime(value, startTime);
                } else if (automationEvent.type === 'setValueCurve') {
                    const { duration, startTime, values } = automationEvent;
                    audioParam.setValueCurveAtTime(values, startTime, duration);
                } else {
                    throw new Error("Can't apply an unknown automation.");
                }
            }
        }
    };
}; //# sourceMappingURL=audio-param-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/read-only-map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "ReadOnlyMap": (()=>ReadOnlyMap)
});
class ReadOnlyMap {
    constructor(parameters){
        this._map = new Map(parameters);
    }
    get size() {
        return this._map.size;
    }
    entries() {
        return this._map.entries();
    }
    forEach(callback, thisArg = null) {
        return this._map.forEach((value, key)=>callback.call(thisArg, value, key, this));
    }
    get(name) {
        return this._map.get(name);
    }
    has(name) {
        return this._map.has(name);
    }
    keys() {
        return this._map.keys();
    }
    values() {
        return this._map.values();
    }
} //# sourceMappingURL=read-only-map.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioWorkletNodeConstructor": (()=>createAudioWorkletNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$read$2d$only$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/read-only-map.js [app-client] (ecmascript)");
;
;
const DEFAULT_OPTIONS = {
    channelCount: 2,
    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.
    channelCountMode: 'explicit',
    channelInterpretation: 'speakers',
    numberOfInputs: 1,
    numberOfOutputs: 1,
    parameterData: {},
    processorOptions: {}
};
const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener)=>{
    return class AudioWorkletNode extends audioNodeConstructor {
        constructor(context, name, options){
            var _a;
            const nativeContext = getNativeContext(context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const mergedOptions = sanitizeAudioWorkletNodeOptions({
                ...DEFAULT_OPTIONS,
                ...options
            });
            // Bug #191: Safari doesn't throw an error if the options aren't clonable.
            testAudioWorkletNodeOptionsClonability(mergedOptions);
            const nodeNameToProcessorConstructorMap = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS"].get(nativeContext);
            const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);
            // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.
            const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed' ? nativeContext : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;
            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);
            const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;
            /*
             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor
             * returns false.
             */ super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);
            const parameters = [];
            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm)=>{
                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);
                parameters.push([
                    nm,
                    audioParam
                ]);
            });
            this._nativeAudioWorkletNode = nativeAudioWorkletNode;
            this._onprocessorerror = null;
            this._parameters = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$read$2d$only$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ReadOnlyMap"](parameters);
            /*
             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to
             * the destination.
             */ if (isOffline) {
                addUnrenderedAudioWorkletNode(nativeContext, this);
            }
            const { activeInputs } = getAudioNodeConnections(this);
            setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);
        }
        get onprocessorerror() {
            return this._onprocessorerror;
        }
        set onprocessorerror(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;
            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;
            this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;
        }
        get parameters() {
            if (this._parameters === null) {
                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
                return this._nativeAudioWorkletNode.parameters;
            }
            return this._parameters;
        }
        get port() {
            return this._nativeAudioWorkletNode.port;
        }
    };
}; //# sourceMappingURL=audio-worklet-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "copyFromChannel": (()=>copyFromChannel)
});
function copyFromChannel(audioBuffer, // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }
parent, key, channelNumber, bufferOffset) {
    if (typeof audioBuffer.copyFromChannel === 'function') {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength === 0) {
            parent[key] = new Float32Array(128);
        }
        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);
    // Bug #5: Safari does not support copyFromChannel().
    } else {
        const channelData = audioBuffer.getChannelData(channelNumber);
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength === 0) {
            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);
        } else {
            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);
            parent[key].set(slicedInput);
        }
    }
} //# sourceMappingURL=copy-from-channel.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "copyToChannel": (()=>copyToChannel)
});
const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset)=>{
    if (typeof audioBuffer.copyToChannel === 'function') {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength !== 0) {
            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);
        }
    // Bug #5: Safari does not support copyToChannel().
    } else {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (parent[key].byteLength !== 0) {
            audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);
        }
    }
}; //# sourceMappingURL=copy-to-channel.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNestedArrays": (()=>createNestedArrays)
});
const createNestedArrays = (x, y)=>{
    const arrays = [];
    for(let i = 0; i < x; i += 1){
        const array = [];
        const length = typeof y === 'number' ? y : y[i];
        for(let j = 0; j < length; j += 1){
            array.push(new Float32Array(128));
        }
        arrays.push(array);
    }
    return arrays;
}; //# sourceMappingURL=create-nested-arrays.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getAudioWorkletProcessor": (()=>getAudioWorkletProcessor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
;
;
;
const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy)=>{
    const nodeToProcessorMap = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODE_TO_PROCESSOR_MAPS"], nativeOfflineAudioContext);
    const nativeAudioWorkletNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"])(proxy);
    return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"])(nodeToProcessorMap, nativeAudioWorkletNode);
}; //# sourceMappingURL=get-audio-worklet-processor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioWorkletNodeRendererFactory": (()=>createAudioWorkletNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$from$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$to$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$nested$2d$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$worklet$2d$processor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
;
;
;
;
;
const processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime)=>{
    // Ceil the length to the next full render quantum.
    // Bug #17: Safari does not yet expose the length.
    const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;
    const numberOfInputChannels = options.channelCount * options.numberOfInputs;
    const numberOfOutputChannels = outputChannelCount.reduce((sum, value)=>sum + value, 0);
    const processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);
    if (processorConstructor === undefined) {
        throw new Error('Missing the processor constructor.');
    }
    const audioNodeConnections = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"])(proxy);
    const audioWorkletProcessor = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$worklet$2d$processor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioWorkletProcessor"])(nativeOfflineAudioContext, proxy);
    const inputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$nested$2d$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNestedArrays"])(options.numberOfInputs, options.channelCount);
    const outputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$nested$2d$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNestedArrays"])(options.numberOfOutputs, outputChannelCount);
    const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name)=>({
            ...prmtrs,
            [name]: new Float32Array(128)
        }), {});
    for(let i = 0; i < length; i += 128){
        if (options.numberOfInputs > 0 && renderedBuffer !== null) {
            for(let j = 0; j < options.numberOfInputs; j += 1){
                for(let k = 0; k < options.channelCount; k += 1){
                    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$from$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyFromChannel"])(renderedBuffer, inputs[j], k, k, i);
                }
            }
        }
        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {
            processorConstructor.parameterDescriptors.forEach(({ name }, index)=>{
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$from$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyFromChannel"])(renderedBuffer, parameters, name, numberOfInputChannels + index, i);
            });
        }
        for(let j = 0; j < options.numberOfInputs; j += 1){
            for(let k = 0; k < outputChannelCount[j]; k += 1){
                // The byteLength will be 0 when the ArrayBuffer was transferred.
                if (outputs[j][k].byteLength === 0) {
                    outputs[j][k] = new Float32Array(128);
                }
            }
        }
        try {
            const potentiallyEmptyInputs = inputs.map((input, index)=>{
                if (audioNodeConnections.activeInputs[index].size === 0) {
                    return [];
                }
                return input;
            });
            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, ()=>audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
            if (processedBuffer !== null) {
                for(let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1){
                    for(let k = 0; k < outputChannelCount[j]; k += 1){
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$to$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyToChannel"])(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
                    }
                    outputChannelSplitterNodeOutput += outputChannelCount[j];
                }
            }
            if (!activeSourceFlag) {
                break;
            }
        } catch (error) {
            proxy.dispatchEvent(new ErrorEvent('processorerror', {
                colno: error.colno,
                filename: error.filename,
                lineno: error.lineno,
                message: error.message
            }));
            break;
        }
    }
    return processedBuffer;
};
const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext)=>{
    return (name, options, processorConstructor)=>{
        const renderedNativeAudioNodes = new WeakMap();
        let processedBufferPromise = null;
        const createAudioNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeAudioWorkletNode = getNativeAudioNode(proxy);
            let nativeOutputNodes = null;
            const nativeAudioWorkletNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeAudioWorkletNode, nativeOfflineAudioContext);
            const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);
            // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.
            if (nativeAudioWorkletNodeConstructor === null) {
                const numberOfOutputChannels = outputChannelCount.reduce((sum, value)=>sum + value, 0);
                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {
                    channelCount: Math.max(1, numberOfOutputChannels),
                    channelCountMode: 'explicit',
                    channelInterpretation: 'discrete',
                    numberOfOutputs: Math.max(1, numberOfOutputChannels)
                });
                const outputChannelMergerNodes = [];
                for(let i = 0; i < proxy.numberOfOutputs; i += 1){
                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {
                        channelCount: 1,
                        channelCountMode: 'explicit',
                        channelInterpretation: 'speakers',
                        numberOfInputs: outputChannelCount[i]
                    }));
                }
                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {
                    channelCount: options.channelCount,
                    channelCountMode: options.channelCountMode,
                    channelInterpretation: options.channelInterpretation,
                    gain: 1
                });
                outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);
                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);
                nativeOutputNodes = [
                    outputChannelSplitterNode,
                    outputChannelMergerNodes,
                    outputGainNode
                ];
            } else if (!nativeAudioWorkletNodeIsOwnedByContext) {
                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);
            if (nativeOutputNodes !== null) {
                if (processedBufferPromise === null) {
                    if (processorConstructor === undefined) {
                        throw new Error('Missing the processor constructor.');
                    }
                    if (nativeOfflineAudioContextConstructor === null) {
                        throw new Error('Missing the native OfflineAudioContext constructor.');
                    }
                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.
                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;
                    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;
                    const numberOfChannels = numberOfInputChannels + numberOfParameters;
                    const renderBuffer = async ()=>{
                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, // Ceil the length to the next full render quantum.
                        // Bug #17: Safari does not yet expose the length.
                        Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);
                        const gainNodes = [];
                        const inputChannelSplitterNodes = [];
                        for(let i = 0; i < options.numberOfInputs; i += 1){
                            gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {
                                channelCount: options.channelCount,
                                channelCountMode: options.channelCountMode,
                                channelInterpretation: options.channelInterpretation,
                                gain: 1
                            }));
                            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {
                                channelCount: options.channelCount,
                                channelCountMode: 'explicit',
                                channelInterpretation: 'discrete',
                                numberOfOutputs: options.channelCount
                            }));
                        }
                        const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async (audioParam)=>{
                            const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                                channelCount: 1,
                                channelCountMode: 'explicit',
                                channelInterpretation: 'discrete',
                                offset: audioParam.value
                            });
                            await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);
                            return constantSourceNode;
                        }));
                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
                            channelCount: 1,
                            channelCountMode: 'explicit',
                            channelInterpretation: 'speakers',
                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
                        });
                        for(let i = 0; i < options.numberOfInputs; i += 1){
                            gainNodes[i].connect(inputChannelSplitterNodes[i]);
                            for(let j = 0; j < options.channelCount; j += 1){
                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
                            }
                        }
                        for (const [index, constantSourceNode] of constantSourceNodes.entries()){
                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
                            constantSourceNode.start(0);
                        }
                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);
                        await Promise.all(gainNodes.map((gainNode)=>renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)));
                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);
                    };
                    processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime);
                }
                const processedBuffer = await processedBufferPromise;
                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
                    buffer: null,
                    channelCount: 2,
                    channelCountMode: 'max',
                    channelInterpretation: 'speakers',
                    loop: false,
                    loopEnd: 0,
                    loopStart: 0,
                    playbackRate: 1
                });
                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;
                if (processedBuffer !== null) {
                    audioBufferSourceNode.buffer = processedBuffer;
                    audioBufferSourceNode.start(0);
                }
                audioBufferSourceNode.connect(outputChannelSplitterNode);
                for(let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1){
                    const outputChannelMergerNode = outputChannelMergerNodes[i];
                    for(let j = 0; j < outputChannelCount[i]; j += 1){
                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
                    }
                    outputChannelSplitterNodeOutput += outputChannelCount[i];
                }
                return outputGainNode;
            }
            if (!nativeAudioWorkletNodeIsOwnedByContext) {
                for (const [nm, audioParam] of proxy.parameters.entries()){
                    await renderAutomation(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
                    nativeAudioWorkletNode.parameters.get(nm));
                }
            } else {
                for (const [nm, audioParam] of proxy.parameters.entries()){
                    await connectAudioParam(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
                    nativeAudioWorkletNode.parameters.get(nm));
                }
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);
            return nativeAudioWorkletNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);
                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=audio-worklet-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBaseAudioContextConstructor": (()=>createBaseAudioContextConstructor)
});
const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor)=>{
    return class BaseAudioContext extends minimalBaseAudioContextConstructor {
        constructor(_nativeContext, numberOfChannels){
            super(_nativeContext, numberOfChannels);
            this._nativeContext = _nativeContext;
            this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {
                addModule: (moduleURL, options)=>{
                    return addAudioWorkletModule(this, moduleURL, options);
                }
            };
        }
        get audioWorklet() {
            return this._audioWorklet;
        }
        createAnalyser() {
            return new analyserNodeConstructor(this);
        }
        createBiquadFilter() {
            return new biquadFilterNodeConstructor(this);
        }
        createBuffer(numberOfChannels, length, sampleRate) {
            return new audioBufferConstructor({
                length,
                numberOfChannels,
                sampleRate
            });
        }
        createBufferSource() {
            return new audioBufferSourceNodeConstructor(this);
        }
        createChannelMerger(numberOfInputs = 6) {
            return new channelMergerNodeConstructor(this, {
                numberOfInputs
            });
        }
        createChannelSplitter(numberOfOutputs = 6) {
            return new channelSplitterNodeConstructor(this, {
                numberOfOutputs
            });
        }
        createConstantSource() {
            return new constantSourceNodeConstructor(this);
        }
        createConvolver() {
            return new convolverNodeConstructor(this);
        }
        createDelay(maxDelayTime = 1) {
            return new delayNodeConstructor(this, {
                maxDelayTime
            });
        }
        createDynamicsCompressor() {
            return new dynamicsCompressorNodeConstructor(this);
        }
        createGain() {
            return new gainNodeConstructor(this);
        }
        createIIRFilter(feedforward, feedback) {
            return new iIRFilterNodeConstructor(this, {
                feedback,
                feedforward
            });
        }
        createOscillator() {
            return new oscillatorNodeConstructor(this);
        }
        createPanner() {
            return new pannerNodeConstructor(this);
        }
        createPeriodicWave(real, imag, constraints = {
            disableNormalization: false
        }) {
            return new periodicWaveConstructor(this, {
                ...constraints,
                imag,
                real
            });
        }
        createStereoPanner() {
            return new stereoPannerNodeConstructor(this);
        }
        createWaveShaper() {
            return new waveShaperNodeConstructor(this);
        }
        decodeAudioData(audioData, successCallback, errorCallback) {
            return decodeAudioData(this._nativeContext, audioData).then((audioBuffer)=>{
                if (typeof successCallback === 'function') {
                    successCallback(audioBuffer);
                }
                return audioBuffer;
            }, (err)=>{
                if (typeof errorCallback === 'function') {
                    errorCallback(err);
                }
                throw err;
            });
        }
    };
}; //# sourceMappingURL=base-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBiquadFilterNodeConstructor": (()=>createBiquadFilterNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)");
;
const DEFAULT_OPTIONS = {
    Q: 1,
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    detune: 0,
    frequency: 350,
    gain: 0,
    type: 'lowpass'
};
const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime)=>{
    return class BiquadFilterNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;
            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);
            // Bug #80: Safari does not export the correct values for maxValue and minValue.
            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.
            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"]), -1200 * Math.log2(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"]));
            // Bug #77: Firefox & Safari do not export the correct value for minValue.
            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);
            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.
            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            this._nativeBiquadFilterNode = nativeBiquadFilterNode;
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        get detune() {
            return this._detune;
        }
        get frequency() {
            return this._frequency;
        }
        get gain() {
            return this._gain;
        }
        get Q() {
            return this._Q;
        }
        get type() {
            return this._nativeBiquadFilterNode.type;
        }
        set type(value) {
            this._nativeBiquadFilterNode.type = value;
        }
        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
            // Bug #189: Safari does throw an InvalidStateError.
            try {
                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
            } catch (err) {
                if (err.code === 11) {
                    throw createInvalidAccessError();
                }
                throw err;
            }
            // Bug #68: Safari does not throw an error if the parameters differ in their length.
            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
                throw createInvalidAccessError();
            }
        }
    };
}; //# sourceMappingURL=biquad-filter-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createBiquadFilterNodeRendererFactory": (()=>createBiquadFilterNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeBiquadFilterNodes = new WeakMap();
        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeBiquadFilterNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */ const nativeBiquadFilterNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeBiquadFilterNode, nativeOfflineAudioContext);
            if (!nativeBiquadFilterNodeIsOwnedByContext) {
                const options = {
                    Q: nativeBiquadFilterNode.Q.value,
                    channelCount: nativeBiquadFilterNode.channelCount,
                    channelCountMode: nativeBiquadFilterNode.channelCountMode,
                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,
                    detune: nativeBiquadFilterNode.detune.value,
                    frequency: nativeBiquadFilterNode.frequency.value,
                    gain: nativeBiquadFilterNode.gain.value,
                    type: nativeBiquadFilterNode.type
                };
                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);
            }
            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);
            if (!nativeBiquadFilterNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);
                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);
                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);
                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);
                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);
                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);
                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);
            return nativeBiquadFilterNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);
                if (renderedNativeBiquadFilterNode !== undefined) {
                    return Promise.resolve(renderedNativeBiquadFilterNode);
                }
                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=biquad-filter-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCacheTestResult": (()=>createCacheTestResult)
});
const createCacheTestResult = (ongoingTests, testResults)=>{
    return (tester, test)=>{
        const cachedTestResult = testResults.get(tester);
        if (cachedTestResult !== undefined) {
            return cachedTestResult;
        }
        const ongoingTest = ongoingTests.get(tester);
        if (ongoingTest !== undefined) {
            return ongoingTest;
        }
        try {
            const synchronousTestResult = test();
            if (synchronousTestResult instanceof Promise) {
                ongoingTests.set(tester, synchronousTestResult);
                return synchronousTestResult.catch(()=>false).then((finalTestResult)=>{
                    ongoingTests.delete(tester);
                    testResults.set(tester, finalTestResult);
                    return finalTestResult;
                });
            }
            testResults.set(tester, synchronousTestResult);
            return synchronousTestResult;
        } catch  {
            testResults.set(tester, false);
            return false;
        }
    };
}; //# sourceMappingURL=cache-test-result.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createChannelMergerNodeConstructor": (()=>createChannelMergerNodeConstructor)
});
const DEFAULT_OPTIONS = {
    channelCount: 1,
    channelCountMode: 'explicit',
    channelInterpretation: 'speakers',
    numberOfInputs: 6
};
const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext)=>{
    return class ChannelMergerNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);
            const channelMergerNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null;
            super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);
        }
    };
}; //# sourceMappingURL=channel-merger-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createChannelMergerNodeRendererFactory": (()=>createChannelMergerNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeAudioNodes = new WeakMap();
        const createAudioNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeAudioNode = getNativeAudioNode(proxy);
            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeAudioNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeAudioNode, nativeOfflineAudioContext);
            if (!nativeAudioNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeAudioNode.channelCount,
                    channelCountMode: nativeAudioNode.channelCountMode,
                    channelInterpretation: nativeAudioNode.channelInterpretation,
                    numberOfInputs: nativeAudioNode.numberOfInputs
                };
                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);
            return nativeAudioNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=channel-merger-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createChannelSplitterNodeConstructor": (()=>createChannelSplitterNodeConstructor)
});
const DEFAULT_OPTIONS = {
    channelCount: 6,
    channelCountMode: 'explicit',
    channelInterpretation: 'discrete',
    numberOfOutputs: 6
};
const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions)=>{
    return class ChannelSplitterNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = sanitizeChannelSplitterOptions({
                ...DEFAULT_OPTIONS,
                ...options
            });
            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);
            const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;
            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);
        }
    };
}; //# sourceMappingURL=channel-splitter-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createChannelSplitterNodeRendererFactory": (()=>createChannelSplitterNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeAudioNodes = new WeakMap();
        const createAudioNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeAudioNode = getNativeAudioNode(proxy);
            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeAudioNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeAudioNode, nativeOfflineAudioContext);
            if (!nativeAudioNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeAudioNode.channelCount,
                    channelCountMode: nativeAudioNode.channelCountMode,
                    channelInterpretation: nativeAudioNode.channelInterpretation,
                    numberOfOutputs: nativeAudioNode.numberOfOutputs
                };
                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);
            return nativeAudioNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=channel-splitter-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConnectAudioParam": (()=>createConnectAudioParam)
});
const createConnectAudioParam = (renderInputsOfAudioParam)=>{
    return (nativeOfflineAudioContext, audioParam, nativeAudioParam)=>{
        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);
    };
}; //# sourceMappingURL=connect-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConnectMultipleOutputs": (()=>createConnectMultipleOutputs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js [app-client] (ecmascript)");
;
const createConnectMultipleOutputs = (createIndexSizeError)=>{
    return (outputAudioNodes, destination, output = 0, input = 0)=>{
        const outputAudioNode = outputAudioNodes[output];
        if (outputAudioNode === undefined) {
            throw createIndexSizeError();
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNode"])(destination)) {
            return outputAudioNode.connect(destination, 0, input);
        }
        return outputAudioNode.connect(destination, 0);
    };
}; //# sourceMappingURL=connect-multiple-outputs.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConnectedNativeAudioBufferSourceNodeFactory": (()=>createConnectedNativeAudioBufferSourceNodeFactory)
});
const createConnectedNativeAudioBufferSourceNodeFactory = (createNativeAudioBufferSourceNode)=>{
    return (nativeContext, nativeAudioNode)=>{
        const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
            buffer: null,
            channelCount: 2,
            channelCountMode: 'max',
            channelInterpretation: 'speakers',
            loop: false,
            loopEnd: 0,
            loopStart: 0,
            playbackRate: 1
        });
        const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);
        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
        nativeAudioBufferSourceNode.loop = true;
        nativeAudioBufferSourceNode.connect(nativeAudioNode);
        nativeAudioBufferSourceNode.start();
        return ()=>{
            nativeAudioBufferSourceNode.stop();
            nativeAudioBufferSourceNode.disconnect(nativeAudioNode);
        };
    };
}; //# sourceMappingURL=connected-native-audio-buffer-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConstantSourceNodeConstructor": (()=>createConstantSourceNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js [app-client] (ecmascript)");
;
;
;
;
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    offset: 1
};
const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener)=>{
    return class ConstantSourceNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;
            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);
            this._constantSourceNodeRenderer = constantSourceNodeRenderer;
            this._nativeConstantSourceNode = nativeConstantSourceNode;
            /*
             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue
             * for GainNodes.
             */ this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            this._onended = null;
        }
        get offset() {
            return this._offset;
        }
        get onended() {
            return this._onended;
        }
        set onended(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeConstantSourceNode.onended = wrappedListener;
            const nativeOnEnded = this._nativeConstantSourceNode.onended;
            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
        }
        start(when = 0) {
            this._nativeConstantSourceNode.start(when);
            if (this._constantSourceNodeRenderer !== null) {
                this._constantSourceNodeRenderer.start = when;
            }
            if (this.context.state !== 'closed') {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToActive"])(this);
                const resetInternalStateToPassive = ()=>{
                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"])(this)) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassive"])(this);
                    }
                };
                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);
            }
        }
        stop(when = 0) {
            this._nativeConstantSourceNode.stop(when);
            if (this._constantSourceNodeRenderer !== null) {
                this._constantSourceNodeRenderer.stop = when;
            }
        }
    };
}; //# sourceMappingURL=constant-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConstantSourceNodeRendererFactory": (()=>createConstantSourceNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeConstantSourceNodes = new WeakMap();
        let start = null;
        let stop = null;
        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeConstantSourceNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */ const nativeConstantSourceNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeConstantSourceNode, nativeOfflineAudioContext);
            if (!nativeConstantSourceNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeConstantSourceNode.channelCount,
                    channelCountMode: nativeConstantSourceNode.channelCountMode,
                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,
                    offset: nativeConstantSourceNode.offset.value
                };
                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);
                if (start !== null) {
                    nativeConstantSourceNode.start(start);
                }
                if (stop !== null) {
                    nativeConstantSourceNode.stop(stop);
                }
            }
            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);
            if (!nativeConstantSourceNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);
            return nativeConstantSourceNode;
        };
        return {
            set start (value){
                start = value;
            },
            set stop (value){
                stop = value;
            },
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);
                if (renderedNativeConstantSourceNode !== undefined) {
                    return Promise.resolve(renderedNativeConstantSourceNode);
                }
                return createConstantSourceNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=constant-source-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConvertNumberToUnsignedLong": (()=>createConvertNumberToUnsignedLong)
});
const createConvertNumberToUnsignedLong = (unit32Array)=>{
    return (value)=>{
        unit32Array[0] = value;
        return unit32Array[0];
    };
}; //# sourceMappingURL=convert-number-to-unsigned-long.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConvolverNodeConstructor": (()=>createConvolverNodeConstructor)
});
const DEFAULT_OPTIONS = {
    buffer: null,
    channelCount: 2,
    channelCountMode: 'clamped-max',
    channelInterpretation: 'speakers',
    disableNormalization: false
};
const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime)=>{
    return class ConvolverNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;
            super(context, false, nativeConvolverNode, convolverNodeRenderer);
            this._isBufferNullified = false;
            this._nativeConvolverNode = nativeConvolverNode;
            if (mergedOptions.buffer !== null) {
                setAudioNodeTailTime(this, mergedOptions.buffer.duration);
            }
        }
        get buffer() {
            if (this._isBufferNullified) {
                return null;
            }
            return this._nativeConvolverNode.buffer;
        }
        set buffer(value) {
            this._nativeConvolverNode.buffer = value;
            // Bug #115: Safari does not allow to set the buffer to null.
            if (value === null && this._nativeConvolverNode.buffer !== null) {
                const nativeContext = this._nativeConvolverNode.context;
                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);
                this._isBufferNullified = true;
                setAudioNodeTailTime(this, 0);
            } else {
                this._isBufferNullified = false;
                setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);
            }
        }
        get normalize() {
            return this._nativeConvolverNode.normalize;
        }
        set normalize(value) {
            this._nativeConvolverNode.normalize = value;
        }
    };
}; //# sourceMappingURL=convolver-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createConvolverNodeRendererFactory": (()=>createConvolverNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
;
const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeConvolverNodes = new WeakMap();
        const createConvolverNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeConvolverNode = getNativeAudioNode(proxy);
            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeConvolverNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeConvolverNode, nativeOfflineAudioContext);
            if (!nativeConvolverNodeIsOwnedByContext) {
                const options = {
                    buffer: nativeConvolverNode.buffer,
                    channelCount: nativeConvolverNode.channelCount,
                    channelCountMode: nativeConvolverNode.channelCountMode,
                    channelInterpretation: nativeConvolverNode.channelInterpretation,
                    disableNormalization: !nativeConvolverNode.normalize
                };
                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);
            }
            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNodeFaker"])(nativeConvolverNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);
            } else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);
            }
            return nativeConvolverNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);
                if (renderedNativeConvolverNode !== undefined) {
                    return Promise.resolve(renderedNativeConvolverNode);
                }
                return createConvolverNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=convolver-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createCreateNativeOfflineAudioContext": (()=>createCreateNativeOfflineAudioContext)
});
const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor)=>{
    return (numberOfChannels, length, sampleRate)=>{
        if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
        }
        try {
            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);
        } catch (err) {
            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.
            if (err.name === 'SyntaxError') {
                throw createNotSupportedError();
            }
            throw err;
        }
    };
}; //# sourceMappingURL=create-native-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDataCloneError": (()=>createDataCloneError)
});
const createDataCloneError = ()=>new DOMException('', 'DataCloneError'); //# sourceMappingURL=data-clone-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "detachArrayBuffer": (()=>detachArrayBuffer)
});
const detachArrayBuffer = (arrayBuffer)=>{
    const { port1, port2 } = new MessageChannel();
    return new Promise((resolve)=>{
        const closeAndResolve = ()=>{
            port2.onmessage = null;
            port1.close();
            port2.close();
            resolve();
        };
        port2.onmessage = ()=>closeAndResolve();
        try {
            port1.postMessage(arrayBuffer, [
                arrayBuffer
            ]);
        } catch  {
        // Ignore errors.
        } finally{
            closeAndResolve();
        }
    });
}; //# sourceMappingURL=detach-array-buffer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDecodeAudioData": (()=>createDecodeAudioData)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$detach$2d$array$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$get$2d$channel$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js [app-client] (ecmascript)");
;
;
const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds)=>{
    return (anyContext, audioData)=>{
        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);
        // Bug #43: Only Chrome and Edge do throw a DataCloneError.
        if (detachedArrayBuffers.has(audioData)) {
            const err = createDataCloneError();
            return Promise.reject(err);
        }
        // The audioData parameter maybe of a type which can't be added to a WeakSet.
        try {
            detachedArrayBuffers.add(audioData);
        } catch  {
        // Ignore errors.
        }
        // Bug #21: Safari does not support promises yet.
        if (cacheTestResult(testPromiseSupport, ()=>testPromiseSupport(nativeContext))) {
            return nativeContext.decodeAudioData(audioData).then((audioBuffer)=>{
                // Bug #133: Safari does neuter the ArrayBuffer.
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$detach$2d$array$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["detachArrayBuffer"])(audioData).catch(()=>{
                // Ignore errors.
                });
                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, ()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
                }
                audioBufferStore.add(audioBuffer);
                return audioBuffer;
            });
        }
        // Bug #21: Safari does not return a Promise yet.
        return new Promise((resolve, reject)=>{
            const complete = async ()=>{
                // Bug #133: Safari does neuter the ArrayBuffer.
                try {
                    await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$detach$2d$array$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["detachArrayBuffer"])(audioData);
                } catch  {
                // Ignore errors.
                }
            };
            const fail = (err)=>{
                reject(err);
                complete();
            };
            // Bug #26: Safari throws a synchronous error.
            try {
                // Bug #1: Safari requires a successCallback.
                nativeContext.decodeAudioData(audioData, (audioBuffer)=>{
                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
                    if (typeof audioBuffer.copyFromChannel !== 'function') {
                        wrapAudioBufferCopyChannelMethods(audioBuffer);
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$get$2d$channel$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioBufferGetChannelDataMethod"])(audioBuffer);
                    }
                    audioBufferStore.add(audioBuffer);
                    complete().then(()=>resolve(audioBuffer));
                }, (err)=>{
                    // Bug #4: Safari returns null instead of an error.
                    if (err === null) {
                        fail(createEncodingError());
                    } else {
                        fail(err);
                    }
                });
            } catch (err) {
                fail(err);
            }
        });
    };
}; //# sourceMappingURL=decode-audio-data.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDecrementCycleCounter": (()=>createDecrementCycleCounter)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js [app-client] (ecmascript)");
;
const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext)=>{
    return (audioNode, count)=>{
        const cycleCounter = cycleCounters.get(audioNode);
        if (cycleCounter === undefined) {
            throw new Error('Missing the expected cycle count.');
        }
        const nativeContext = getNativeContext(audioNode.context);
        const isOffline = isNativeOfflineAudioContext(nativeContext);
        if (cycleCounter === count) {
            cycleCounters.delete(audioNode);
            if (!isOffline && isActiveAudioNode(audioNode)) {
                const nativeSourceAudioNode = getNativeAudioNode(audioNode);
                const { outputs } = getAudioNodeConnections(audioNode);
                for (const output of outputs){
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNodeOutputConnection"])(output)) {
                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
                    } else {
                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);
                    }
                }
            }
        } else {
            cycleCounters.set(audioNode, cycleCounter - count);
        }
    };
}; //# sourceMappingURL=decrement-cycle-counter.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDelayNodeConstructor": (()=>createDelayNodeConstructor)
});
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    delayTime: 0,
    maxDelayTime: 1
};
const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime)=>{
    return class DelayNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;
            super(context, false, nativeDelayNode, delayNodeRenderer);
            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);
            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);
        }
        get delayTime() {
            return this._delayTime;
        }
    };
}; //# sourceMappingURL=delay-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDelayNodeRendererFactory": (()=>createDelayNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return (maxDelayTime)=>{
        const renderedNativeDelayNodes = new WeakMap();
        const createDelayNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeDelayNode = getNativeAudioNode(proxy);
            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeDelayNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeDelayNode, nativeOfflineAudioContext);
            if (!nativeDelayNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeDelayNode.channelCount,
                    channelCountMode: nativeDelayNode.channelCountMode,
                    channelInterpretation: nativeDelayNode.channelInterpretation,
                    delayTime: nativeDelayNode.delayTime.value,
                    maxDelayTime
                };
                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);
            }
            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);
            if (!nativeDelayNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);
            return nativeDelayNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);
                if (renderedNativeDelayNode !== undefined) {
                    return Promise.resolve(renderedNativeDelayNode);
                }
                return createDelayNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=delay-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDeleteActiveInputConnectionToAudioNode": (()=>createDeleteActiveInputConnectionToAudioNode)
});
const createDeleteActiveInputConnectionToAudioNode = (pickElementFromSet)=>{
    return (activeInputs, source, output, input)=>{
        return pickElementFromSet(activeInputs[input], (activeInputConnection)=>activeInputConnection[0] === source && activeInputConnection[1] === output);
    };
}; //# sourceMappingURL=delete-active-input-connection-to-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDeleteUnrenderedAudioWorkletNode": (()=>createDeleteUnrenderedAudioWorkletNode)
});
const createDeleteUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes)=>{
    return (nativeContext, audioWorkletNode)=>{
        getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);
    };
}; //# sourceMappingURL=delete-unrendered-audio-worklet-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/guards/delay-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isDelayNode": (()=>isDelayNode)
});
const isDelayNode = (audioNode)=>{
    return 'delayTime' in audioNode;
}; //# sourceMappingURL=delay-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDetectCycles": (()=>createDetectCycles)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/delay-node.js [app-client] (ecmascript)");
;
;
const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey)=>{
    return function detectCycles(chain, nextLink) {
        const audioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNode"])(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDelayNode"])(audioNode)) {
            return [];
        }
        if (chain[0] === audioNode) {
            return [
                chain
            ];
        }
        if (chain.includes(audioNode)) {
            return [];
        }
        const { outputs } = getAudioNodeConnections(audioNode);
        return Array.from(outputs).map((outputConnection)=>detectCycles([
                ...chain,
                audioNode
            ], outputConnection[0])).reduce((mergedCycles, nestedCycles)=>mergedCycles.concat(nestedCycles), []);
    };
}; //# sourceMappingURL=detect-cycles.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDisconnectMultipleOutputs": (()=>createDisconnectMultipleOutputs)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js [app-client] (ecmascript)");
;
const getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output)=>{
    const outputAudioNode = outputAudioNodes[output];
    if (outputAudioNode === undefined) {
        throw createIndexSizeError();
    }
    return outputAudioNode;
};
const createDisconnectMultipleOutputs = (createIndexSizeError)=>{
    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0)=>{
        if (destinationOrOutput === undefined) {
            return outputAudioNodes.forEach((outputAudioNode)=>outputAudioNode.disconnect());
        }
        if (typeof destinationOrOutput === 'number') {
            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();
        }
        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNode"])(destinationOrOutput)) {
            if (output === undefined) {
                return outputAudioNodes.forEach((outputAudioNode)=>outputAudioNode.disconnect(destinationOrOutput));
            }
            if (input === undefined) {
                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
            }
            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);
        }
        if (output === undefined) {
            return outputAudioNodes.forEach((outputAudioNode)=>outputAudioNode.disconnect(destinationOrOutput));
        }
        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
    };
}; //# sourceMappingURL=disconnect-multiple-outputs.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDynamicsCompressorNodeConstructor": (()=>createDynamicsCompressorNodeConstructor)
});
const DEFAULT_OPTIONS = {
    attack: 0.003,
    channelCount: 2,
    channelCountMode: 'clamped-max',
    channelInterpretation: 'speakers',
    knee: 30,
    ratio: 12,
    release: 0.25,
    threshold: -24
};
const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime)=>{
    return class DynamicsCompressorNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;
            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);
            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);
            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);
            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;
            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);
            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);
            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);
            setAudioNodeTailTime(this, 0.006);
        }
        get attack() {
            return this._attack;
        }
        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.
        get channelCount() {
            return this._nativeDynamicsCompressorNode.channelCount;
        }
        set channelCount(value) {
            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;
            this._nativeDynamicsCompressorNode.channelCount = value;
            if (value > 2) {
                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;
                throw createNotSupportedError();
            }
        }
        /*
         * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be
         * overwritten here.
         */ get channelCountMode() {
            return this._nativeDynamicsCompressorNode.channelCountMode;
        }
        set channelCountMode(value) {
            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;
            this._nativeDynamicsCompressorNode.channelCountMode = value;
            if (value === 'max') {
                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;
                throw createNotSupportedError();
            }
        }
        get knee() {
            return this._knee;
        }
        get ratio() {
            return this._ratio;
        }
        get reduction() {
            // Bug #111: Safari returns an AudioParam instead of a number.
            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {
                return this._nativeDynamicsCompressorNode.reduction.value;
            }
            return this._nativeDynamicsCompressorNode.reduction;
        }
        get release() {
            return this._release;
        }
        get threshold() {
            return this._threshold;
        }
    };
}; //# sourceMappingURL=dynamics-compressor-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createDynamicsCompressorNodeRendererFactory": (()=>createDynamicsCompressorNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeDynamicsCompressorNodes = new WeakMap();
        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be
             * created again.
             */ const nativeDynamicsCompressorNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeDynamicsCompressorNode, nativeOfflineAudioContext);
            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
                const options = {
                    attack: nativeDynamicsCompressorNode.attack.value,
                    channelCount: nativeDynamicsCompressorNode.channelCount,
                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,
                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,
                    knee: nativeDynamicsCompressorNode.knee.value,
                    ratio: nativeDynamicsCompressorNode.ratio.value,
                    release: nativeDynamicsCompressorNode.release.value,
                    threshold: nativeDynamicsCompressorNode.threshold.value
                };
                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);
            }
            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);
            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);
                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);
                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);
                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);
                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);
                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);
                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);
                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);
                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);
            return nativeDynamicsCompressorNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);
                if (renderedNativeDynamicsCompressorNode !== undefined) {
                    return Promise.resolve(renderedNativeDynamicsCompressorNode);
                }
                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEncodingError": (()=>createEncodingError)
});
const createEncodingError = ()=>new DOMException('', 'EncodingError'); //# sourceMappingURL=encoding-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEvaluateSource": (()=>createEvaluateSource)
});
const createEvaluateSource = (window)=>{
    return (source)=>new Promise((resolve, reject)=>{
            if (window === null) {
                // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
                reject(new SyntaxError());
                return;
            }
            const head = window.document.head;
            if (head === null) {
                // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
                reject(new SyntaxError());
            } else {
                const script = window.document.createElement('script');
                // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.
                const blob = new Blob([
                    source
                ], {
                    type: 'application/javascript'
                });
                const url = URL.createObjectURL(blob);
                const originalOnErrorHandler = window.onerror;
                const removeErrorEventListenerAndRevokeUrl = ()=>{
                    window.onerror = originalOnErrorHandler;
                    URL.revokeObjectURL(url);
                };
                window.onerror = (message, src, lineno, colno, error)=>{
                    // @todo Edge thinks the source is the one of the html document.
                    if (src === url || src === window.location.href && lineno === 1 && colno === 1) {
                        removeErrorEventListenerAndRevokeUrl();
                        reject(error);
                        return false;
                    }
                    if (originalOnErrorHandler !== null) {
                        return originalOnErrorHandler(message, src, lineno, colno, error);
                    }
                };
                script.onerror = ()=>{
                    removeErrorEventListenerAndRevokeUrl();
                    // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.
                    reject(new SyntaxError());
                };
                script.onload = ()=>{
                    removeErrorEventListenerAndRevokeUrl();
                    resolve();
                };
                script.src = url;
                script.type = 'module';
                head.appendChild(script);
            }
        });
}; //# sourceMappingURL=evaluate-source.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createEventTargetConstructor": (()=>createEventTargetConstructor)
});
const createEventTargetConstructor = (wrapEventListener)=>{
    return class EventTarget {
        constructor(_nativeEventTarget){
            this._nativeEventTarget = _nativeEventTarget;
            this._listeners = new WeakMap();
        }
        addEventListener(type, listener, options) {
            if (listener !== null) {
                let wrappedEventListener = this._listeners.get(listener);
                if (wrappedEventListener === undefined) {
                    wrappedEventListener = wrapEventListener(this, listener);
                    if (typeof listener === 'function') {
                        this._listeners.set(listener, wrappedEventListener);
                    }
                }
                this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);
            }
        }
        dispatchEvent(event) {
            return this._nativeEventTarget.dispatchEvent(event);
        }
        removeEventListener(type, listener, options) {
            const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);
            this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);
        }
    };
}; //# sourceMappingURL=event-target-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createExposeCurrentFrameAndCurrentTime": (()=>createExposeCurrentFrameAndCurrentTime)
});
const createExposeCurrentFrameAndCurrentTime = (window)=>{
    return (currentTime, sampleRate, fn)=>{
        Object.defineProperties(window, {
            currentFrame: {
                configurable: true,
                get () {
                    return Math.round(currentTime * sampleRate);
                }
            },
            currentTime: {
                configurable: true,
                get () {
                    return currentTime;
                }
            }
        });
        try {
            return fn();
        } finally{
            if (window !== null) {
                delete window.currentFrame;
                delete window.currentTime;
            }
        }
    };
}; //# sourceMappingURL=expose-current-frame-and-current-time.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createFetchSource": (()=>createFetchSource)
});
const createFetchSource = (createAbortError)=>{
    return async (url)=>{
        try {
            const response = await fetch(url);
            if (response.ok) {
                return [
                    await response.text(),
                    response.url
                ];
            }
        } catch  {
        // Ignore errors.
        } // tslint:disable-line:no-empty
        throw createAbortError();
    };
}; //# sourceMappingURL=fetch-source.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGainNodeConstructor": (()=>createGainNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)");
;
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    gain: 1
};
const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext)=>{
    return class GainNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;
            super(context, false, nativeGainNode, gainNodeRenderer);
            // Bug #74: Safari does not export the correct values for maxValue and minValue.
            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
        }
        get gain() {
            return this._gain;
        }
    };
}; //# sourceMappingURL=gain-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGainNodeRendererFactory": (()=>createGainNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeGainNodes = new WeakMap();
        const createGainNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeGainNode = getNativeAudioNode(proxy);
            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeGainNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeGainNode, nativeOfflineAudioContext);
            if (!nativeGainNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeGainNode.channelCount,
                    channelCountMode: nativeGainNode.channelCountMode,
                    channelInterpretation: nativeGainNode.channelInterpretation,
                    gain: nativeGainNode.gain.value
                };
                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);
            }
            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);
            if (!nativeGainNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);
            return nativeGainNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);
                if (renderedNativeGainNode !== undefined) {
                    return Promise.resolve(renderedNativeGainNode);
                }
                return createGainNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=gain-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetActiveAudioWorkletNodeInputs": (()=>createGetActiveAudioWorkletNodeInputs)
});
const createGetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore, getValueForKey)=>{
    return (nativeAudioWorkletNode)=>getValueForKey(activeAudioWorkletNodeInputsStore, nativeAudioWorkletNode);
}; //# sourceMappingURL=get-active-audio-worklet-node-inputs.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetAudioNodeRenderer": (()=>createGetAudioNodeRenderer)
});
const createGetAudioNodeRenderer = (getAudioNodeConnections)=>{
    return (audioNode)=>{
        const audioNodeConnections = getAudioNodeConnections(audioNode);
        if (audioNodeConnections.renderer === null) {
            throw new Error('Missing the renderer of the given AudioNode in the audio graph.');
        }
        return audioNodeConnections.renderer;
    };
}; //# sourceMappingURL=get-audio-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetAudioNodeTailTime": (()=>createGetAudioNodeTailTime)
});
const createGetAudioNodeTailTime = (audioNodeTailTimeStore)=>{
    return (audioNode)=>{
        var _a;
        return (_a = audioNodeTailTimeStore.get(audioNode)) !== null && _a !== void 0 ? _a : 0;
    };
}; //# sourceMappingURL=get-audio-node-tail-time.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetAudioParamRenderer": (()=>createGetAudioParamRenderer)
});
const createGetAudioParamRenderer = (getAudioParamConnections)=>{
    return (audioParam)=>{
        const audioParamConnections = getAudioParamConnections(audioParam);
        if (audioParamConnections.renderer === null) {
            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');
        }
        return audioParamConnections.renderer;
    };
}; //# sourceMappingURL=get-audio-param-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetBackupOfflineAudioContext": (()=>createGetBackupOfflineAudioContext)
});
const createGetBackupOfflineAudioContext = (backupOfflineAudioContextStore)=>{
    return (nativeContext)=>{
        return backupOfflineAudioContextStore.get(nativeContext);
    };
}; //# sourceMappingURL=get-backup-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createInvalidStateError": (()=>createInvalidStateError)
});
const createInvalidStateError = ()=>new DOMException('', 'InvalidStateError'); //# sourceMappingURL=invalid-state-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetNativeContext": (()=>createGetNativeContext)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js [app-client] (ecmascript)");
;
const createGetNativeContext = (contextStore)=>{
    return (context)=>{
        const nativeContext = contextStore.get(context);
        if (nativeContext === undefined) {
            throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"])();
        }
        return nativeContext;
    };
}; //# sourceMappingURL=get-native-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetOrCreateBackupOfflineAudioContext": (()=>createGetOrCreateBackupOfflineAudioContext)
});
const createGetOrCreateBackupOfflineAudioContext = (backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor)=>{
    return (nativeContext)=>{
        let backupOfflineAudioContext = backupOfflineAudioContextStore.get(nativeContext);
        if (backupOfflineAudioContext !== undefined) {
            return backupOfflineAudioContext;
        }
        if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
        }
        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.
        backupOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        backupOfflineAudioContextStore.set(nativeContext, backupOfflineAudioContext);
        return backupOfflineAudioContext;
    };
}; //# sourceMappingURL=get-or-create-backup-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createGetUnrenderedAudioWorkletNodes": (()=>createGetUnrenderedAudioWorkletNodes)
});
const createGetUnrenderedAudioWorkletNodes = (unrenderedAudioWorkletNodeStore)=>{
    return (nativeContext)=>{
        const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);
        if (unrenderedAudioWorkletNodes === undefined) {
            throw new Error('The context has no set of AudioWorkletNodes.');
        }
        return unrenderedAudioWorkletNodes;
    };
}; //# sourceMappingURL=get-unrendered-audio-worklet-nodes.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createInvalidAccessError": (()=>createInvalidAccessError)
});
const createInvalidAccessError = ()=>new DOMException('', 'InvalidAccessError'); //# sourceMappingURL=invalid-access-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapIIRFilterNodeGetFrequencyResponseMethod": (()=>wrapIIRFilterNodeGetFrequencyResponseMethod)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$access$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js [app-client] (ecmascript)");
;
const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode)=>{
    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse)=>{
        return (frequencyHz, magResponse, phaseResponse)=>{
            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$access$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidAccessError"])();
            }
            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);
        };
    })(nativeIIRFilterNode.getFrequencyResponse);
}; //# sourceMappingURL=wrap-iir-filter-node-get-frequency-response-method.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIIRFilterNodeConstructor": (()=>createIIRFilterNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$iir$2d$filter$2d$node$2d$get$2d$frequency$2d$response$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js [app-client] (ecmascript)");
;
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers'
};
const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime)=>{
    return class IIRFilterNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);
            const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;
            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);
            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.
            // @todo Write a test which allows other browsers to remain unpatched.
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$iir$2d$filter$2d$node$2d$get$2d$frequency$2d$response$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapIIRFilterNodeGetFrequencyResponseMethod"])(nativeIIRFilterNode);
            this._nativeIIRFilterNode = nativeIIRFilterNode;
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
        }
    };
}; //# sourceMappingURL=iir-filter-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// This implementation as shamelessly inspired by source code of
// tslint:disable-next-line:max-line-length
// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.
__turbopack_context__.s({
    "filterBuffer": (()=>filterBuffer)
});
const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output)=>{
    const inputLength = input.length;
    let i = bufferIndex;
    for(let j = 0; j < inputLength; j += 1){
        let y = feedforward[0] * input[j];
        for(let k = 1; k < minLength; k += 1){
            const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise
            y += feedforward[k] * xBuffer[x];
            y -= feedback[k] * yBuffer[x];
        }
        for(let k = minLength; k < feedforwardLength; k += 1){
            y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise
        }
        for(let k = minLength; k < feedbackLength; k += 1){
            y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise
        }
        xBuffer[i] = input[j];
        yBuffer[i] = y;
        i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise
        output[j] = y;
    }
    return i;
}; //# sourceMappingURL=filter-buffer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIIRFilterNodeRendererFactory": (()=>createIIRFilterNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$filter$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
;
const filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward)=>{
    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
    const feedbackLength = convertedFeedback.length;
    const feedforwardLength = convertedFeedforward.length;
    const minLength = Math.min(feedbackLength, feedforwardLength);
    if (convertedFeedback[0] !== 1) {
        for(let i = 0; i < feedbackLength; i += 1){
            convertedFeedforward[i] /= convertedFeedback[0];
        }
        for(let i = 1; i < feedforwardLength; i += 1){
            convertedFeedback[i] /= convertedFeedback[0];
        }
    }
    const bufferLength = 32;
    const xBuffer = new Float32Array(bufferLength);
    const yBuffer = new Float32Array(bufferLength);
    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);
    const numberOfChannels = renderedBuffer.numberOfChannels;
    for(let i = 0; i < numberOfChannels; i += 1){
        const input = renderedBuffer.getChannelData(i);
        const output = filteredBuffer.getChannelData(i);
        xBuffer.fill(0);
        yBuffer.fill(0);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$filter$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["filterBuffer"])(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);
    }
    return filteredBuffer;
};
const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext)=>{
    return (feedback, feedforward)=>{
        const renderedNativeAudioNodes = new WeakMap();
        let filteredBufferPromise = null;
        const createAudioNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeAudioBufferSourceNode = null;
            let nativeIIRFilterNode = getNativeAudioNode(proxy);
            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeIIRFilterNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeIIRFilterNode, nativeOfflineAudioContext);
            // Bug #9: Safari does not support IIRFilterNodes.
            if (nativeOfflineAudioContext.createIIRFilter === undefined) {
                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
                    buffer: null,
                    channelCount: 2,
                    channelCountMode: 'max',
                    channelInterpretation: 'speakers',
                    loop: false,
                    loopEnd: 0,
                    loopStart: 0,
                    playbackRate: 1
                });
            } else if (!nativeIIRFilterNodeIsOwnedByContext) {
                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.
                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);
            if (nativeAudioBufferSourceNode !== null) {
                if (filteredBufferPromise === null) {
                    if (nativeOfflineAudioContextConstructor === null) {
                        throw new Error('Missing the native OfflineAudioContext constructor.');
                    }
                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(// Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.
                    proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.
                    proxy.context.length, nativeOfflineAudioContext.sampleRate);
                    filteredBufferPromise = (async ()=>{
                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);
                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);
                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);
                    })();
                }
                const filteredBuffer = await filteredBufferPromise;
                nativeAudioBufferSourceNode.buffer = filteredBuffer;
                nativeAudioBufferSourceNode.start(0);
                return nativeAudioBufferSourceNode;
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);
            return nativeIIRFilterNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeAudioNode !== undefined) {
                    return Promise.resolve(renderedNativeAudioNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=iir-filter-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIncrementCycleCounterFactory": (()=>createIncrementCycleCounterFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js [app-client] (ecmascript)");
;
const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode)=>{
    return (isOffline)=>{
        return (audioNode, count)=>{
            const cycleCounter = cycleCounters.get(audioNode);
            if (cycleCounter === undefined) {
                if (!isOffline && isActiveAudioNode(audioNode)) {
                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);
                    const { outputs } = getAudioNodeConnections(audioNode);
                    for (const output of outputs){
                        if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isAudioNodeOutputConnection"])(output)) {
                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
                            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
                        } else {
                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);
                        }
                    }
                }
                cycleCounters.set(audioNode, count);
            } else {
                cycleCounters.set(audioNode, cycleCounter + count);
            }
        };
    };
}; //# sourceMappingURL=increment-cycle-counter-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsAnyAudioContext": (()=>createIsAnyAudioContext)
});
const createIsAnyAudioContext = (contextStore, isNativeAudioContext)=>{
    return (anything)=>{
        const nativeContext = contextStore.get(anything);
        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);
    };
}; //# sourceMappingURL=is-any-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsAnyAudioNode": (()=>createIsAnyAudioNode)
});
const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode)=>{
    return (anything)=>audioNodeStore.has(anything) || isNativeAudioNode(anything);
}; //# sourceMappingURL=is-any-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsAnyAudioParam": (()=>createIsAnyAudioParam)
});
const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam)=>{
    return (anything)=>audioParamStore.has(anything) || isNativeAudioParam(anything);
}; //# sourceMappingURL=is-any-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsAnyOfflineAudioContext": (()=>createIsAnyOfflineAudioContext)
});
const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext)=>{
    return (anything)=>{
        const nativeContext = contextStore.get(anything);
        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);
    };
}; //# sourceMappingURL=is-any-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNativeAudioContext": (()=>createIsNativeAudioContext)
});
const createIsNativeAudioContext = (nativeAudioContextConstructor)=>{
    return (anything)=>{
        return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;
    };
}; //# sourceMappingURL=is-native-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNativeAudioNode": (()=>createIsNativeAudioNode)
});
const createIsNativeAudioNode = (window)=>{
    return (anything)=>{
        return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;
    };
}; //# sourceMappingURL=is-native-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNativeAudioParam": (()=>createIsNativeAudioParam)
});
const createIsNativeAudioParam = (window)=>{
    return (anything)=>{
        return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;
    };
}; //# sourceMappingURL=is-native-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNativeContext": (()=>createIsNativeContext)
});
const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext)=>{
    return (anything)=>{
        return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);
    };
}; //# sourceMappingURL=is-native-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsNativeOfflineAudioContext": (()=>createIsNativeOfflineAudioContext)
});
const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor)=>{
    return (anything)=>{
        return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;
    };
}; //# sourceMappingURL=is-native-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsSecureContext": (()=>createIsSecureContext)
});
const createIsSecureContext = (window)=>window !== null && window.isSecureContext; //# sourceMappingURL=is-secure-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createIsSupportedPromise": (()=>createIsSupportedPromise)
});
const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testConvolverNodeChannelCountSupport, testDomExceptionContrucorSupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport)=>{
    if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testConvolverNodeChannelCountSupport, testConvolverNodeChannelCountSupport) && cacheTestResult(testDomExceptionContrucorSupport, testDomExceptionContrucorSupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {
        const results = await Promise.all([
            cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport),
            cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport),
            cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport),
            cacheTestResult(testTransferablesSupport, testTransferablesSupport)
        ]);
        return results.every((result)=>result);
    }
    return false;
}; //# sourceMappingURL=is-supported-promise.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMediaElementAudioSourceNodeConstructor": (()=>createMediaElementAudioSourceNodeConstructor)
});
const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext)=>{
    return class MediaElementAudioSourceNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);
            // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.
            if (isNativeOfflineAudioContext(nativeContext)) {
                throw TypeError();
            }
            super(context, true, nativeMediaElementAudioSourceNode, null);
            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;
        }
        get mediaElement() {
            return this._nativeMediaElementAudioSourceNode.mediaElement;
        }
    };
}; //# sourceMappingURL=media-element-audio-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMediaStreamAudioDestinationNodeConstructor": (()=>createMediaStreamAudioDestinationNodeConstructor)
});
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'explicit',
    channelInterpretation: 'speakers'
};
const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext)=>{
    return class MediaStreamAudioDestinationNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.
            if (isNativeOfflineAudioContext(nativeContext)) {
                throw new TypeError();
            }
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);
            super(context, false, nativeMediaStreamAudioDestinationNode, null);
            this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;
        }
        get stream() {
            return this._nativeMediaStreamAudioDestinationNode.stream;
        }
    };
}; //# sourceMappingURL=media-stream-audio-destination-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMediaStreamAudioSourceNodeConstructor": (()=>createMediaStreamAudioSourceNodeConstructor)
});
const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext)=>{
    return class MediaStreamAudioSourceNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);
            // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.
            if (isNativeOfflineAudioContext(nativeContext)) {
                throw new TypeError();
            }
            super(context, true, nativeMediaStreamAudioSourceNode, null);
            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;
        }
        get mediaStream() {
            return this._nativeMediaStreamAudioSourceNode.mediaStream;
        }
    };
}; //# sourceMappingURL=media-stream-audio-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMediaStreamTrackAudioSourceNodeConstructor": (()=>createMediaStreamTrackAudioSourceNodeConstructor)
});
const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext)=>{
    return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);
            super(context, true, nativeMediaStreamTrackAudioSourceNode, null);
        }
    };
}; //# sourceMappingURL=media-stream-track-audio-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMinimalAudioContextConstructor": (()=>createMinimalAudioContextConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$valid$2d$latency$2d$hint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js [app-client] (ecmascript)");
;
;
const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor)=>{
    return class MinimalAudioContext extends minimalBaseAudioContextConstructor {
        constructor(options = {}){
            if (nativeAudioContextConstructor === null) {
                throw new Error('Missing the native AudioContext constructor.');
            }
            let nativeAudioContext;
            try {
                nativeAudioContext = new nativeAudioContextConstructor(options);
            } catch (err) {
                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.
                if (err.code === 12 && err.message === 'sampleRate is not in range') {
                    throw createNotSupportedError();
                }
                throw err;
            }
            // Bug #131 Safari returns null when there are four other AudioContexts running already.
            if (nativeAudioContext === null) {
                throw createUnknownError();
            }
            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.
            if (!(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$valid$2d$latency$2d$hint$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isValidLatencyHint"])(options.latencyHint)) {
                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
            }
            // Bug #150 Safari does not support setting the sampleRate.
            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
                throw createNotSupportedError();
            }
            super(nativeAudioContext, 2);
            const { latencyHint } = options;
            const { sampleRate } = nativeAudioContext;
            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.
            this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate : /*
                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
                                   * ScriptProcessorNode.
                                   */ Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;
            this._nativeAudioContext = nativeAudioContext;
            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.
            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {
                this._nativeGainNode = nativeAudioContext.createGain();
                this._nativeOscillatorNode = nativeAudioContext.createOscillator();
                this._nativeGainNode.gain.value = 1e-37;
                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);
                this._nativeOscillatorNode.start();
            } else {
                this._nativeGainNode = null;
                this._nativeOscillatorNode = null;
            }
            this._state = null;
            /*
             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes
             * to 'running'.
             */ if (nativeAudioContext.state === 'running') {
                this._state = 'suspended';
                const revokeState = ()=>{
                    if (this._state === 'suspended') {
                        this._state = null;
                    }
                    nativeAudioContext.removeEventListener('statechange', revokeState);
                };
                nativeAudioContext.addEventListener('statechange', revokeState);
            }
        }
        get baseLatency() {
            return this._baseLatency;
        }
        get state() {
            return this._state !== null ? this._state : this._nativeAudioContext.state;
        }
        close() {
            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
            if (this.state === 'closed') {
                return this._nativeAudioContext.close().then(()=>{
                    throw createInvalidStateError();
                });
            }
            // Bug #34: If the state was set to suspended before it should be revoked now.
            if (this._state === 'suspended') {
                this._state = null;
            }
            return this._nativeAudioContext.close().then(()=>{
                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {
                    this._nativeOscillatorNode.stop();
                    this._nativeGainNode.disconnect();
                    this._nativeOscillatorNode.disconnect();
                }
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deactivateAudioGraph"])(this);
            });
        }
        resume() {
            if (this._state === 'suspended') {
                return new Promise((resolve, reject)=>{
                    const resolvePromise = ()=>{
                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);
                        if (this._nativeAudioContext.state === 'running') {
                            resolve();
                        } else {
                            this.resume().then(resolve, reject);
                        }
                    };
                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);
                });
            }
            return this._nativeAudioContext.resume().catch((err)=>{
                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined || err.code === 15) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
        suspend() {
            return this._nativeAudioContext.suspend().catch((err)=>{
                // Bug #56: Safari invokes the catch handler but without an error.
                if (err === undefined) {
                    throw createInvalidStateError();
                }
                throw err;
            });
        }
    };
}; //# sourceMappingURL=minimal-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMinimalBaseAudioContextConstructor": (()=>createMinimalBaseAudioContextConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
;
const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener)=>{
    return class MinimalBaseAudioContext extends eventTargetConstructor {
        constructor(_nativeContext, numberOfChannels){
            super(_nativeContext);
            this._nativeContext = _nativeContext;
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CONTEXT_STORE"].set(this, _nativeContext);
            if (isNativeOfflineAudioContext(_nativeContext)) {
                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());
            }
            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);
            this._listener = createAudioListener(this, _nativeContext);
            this._onstatechange = null;
        }
        get currentTime() {
            return this._nativeContext.currentTime;
        }
        get destination() {
            return this._destination;
        }
        get listener() {
            return this._listener;
        }
        get onstatechange() {
            return this._onstatechange;
        }
        set onstatechange(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeContext.onstatechange = wrappedListener;
            const nativeOnStateChange = this._nativeContext.onstatechange;
            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;
        }
        get sampleRate() {
            return this._nativeContext.sampleRate;
        }
        get state() {
            return this._nativeContext.state;
        }
    };
}; //# sourceMappingURL=minimal-base-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testPromiseSupport": (()=>testPromiseSupport)
});
const testPromiseSupport = (nativeContext)=>{
    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.
    const uint32Array = new Uint32Array([
        1179011410,
        40,
        1163280727,
        544501094,
        16,
        131073,
        44100,
        176400,
        1048580,
        1635017060,
        4,
        0
    ]);
    try {
        // Bug #1: Safari requires a successCallback.
        const promise = nativeContext.decodeAudioData(uint32Array.buffer, ()=>{
        // Ignore the success callback.
        });
        if (promise === undefined) {
            return false;
        }
        promise.catch(()=>{
        // Ignore rejected errors.
        });
        return true;
    } catch  {
    // Ignore errors.
    }
    return false;
}; //# sourceMappingURL=test-promise-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMinimalOfflineAudioContextConstructor": (()=>createMinimalOfflineAudioContextConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js [app-client] (ecmascript)");
;
;
const DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering)=>{
    return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {
        constructor(options){
            const { length, numberOfChannels, sampleRate } = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);
            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.
            if (!cacheTestResult(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testPromiseSupport"], ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testPromiseSupport"])(nativeOfflineAudioContext))) {
                nativeOfflineAudioContext.addEventListener('statechange', (()=>{
                    let i = 0;
                    const delayStateChangeEvent = (event)=>{
                        if (this._state === 'running') {
                            if (i > 0) {
                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                                event.stopImmediatePropagation();
                                this._waitForThePromiseToSettle(event);
                            } else {
                                i += 1;
                            }
                        }
                    };
                    return delayStateChangeEvent;
                })());
            }
            super(nativeOfflineAudioContext, numberOfChannels);
            this._length = length;
            this._nativeOfflineAudioContext = nativeOfflineAudioContext;
            this._state = null;
        }
        get length() {
            // Bug #17: Safari does not yet expose the length.
            if (this._nativeOfflineAudioContext.length === undefined) {
                return this._length;
            }
            return this._nativeOfflineAudioContext.length;
        }
        get state() {
            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
        }
        startRendering() {
            /*
             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
             * the state of the nativeOfflineAudioContext might no transition to running immediately.
             */ if (this._state === 'running') {
                return Promise.reject(createInvalidStateError());
            }
            this._state = 'running';
            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(()=>{
                this._state = null;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deactivateAudioGraph"])(this);
            });
        }
        _waitForThePromiseToSettle(event) {
            if (this._state === null) {
                this._nativeOfflineAudioContext.dispatchEvent(event);
            } else {
                setTimeout(()=>this._waitForThePromiseToSettle(event));
            }
        }
    };
}; //# sourceMappingURL=minimal-offline-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createMonitorConnections": (()=>createMonitorConnections)
});
const createMonitorConnections = (insertElementInSet, isNativeAudioNode)=>{
    return (nativeAudioNode, whenConnected, whenDisconnected)=>{
        const connections = new Set();
        nativeAudioNode.connect = ((connect)=>{
            // tslint:disable-next-line:invalid-void no-inferrable-types
            return (destination, output = 0, input = 0)=>{
                const wasDisconnected = connections.size === 0;
                if (isNativeAudioNode(destination)) {
                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
                    connect.call(nativeAudioNode, destination, output, input);
                    insertElementInSet(connections, [
                        destination,
                        output,
                        input
                    ], (connection)=>connection[0] === destination && connection[1] === output && connection[2] === input, true);
                    if (wasDisconnected) {
                        whenConnected();
                    }
                    return destination;
                }
                connect.call(nativeAudioNode, destination, output);
                insertElementInSet(connections, [
                    destination,
                    output
                ], (connection)=>connection[0] === destination && connection[1] === output, true);
                if (wasDisconnected) {
                    whenConnected();
                }
                return;
            };
        })(nativeAudioNode.connect);
        nativeAudioNode.disconnect = ((disconnect)=>{
            return (destinationOrOutput, output, input)=>{
                const wasConnected = connections.size > 0;
                if (destinationOrOutput === undefined) {
                    disconnect.apply(nativeAudioNode);
                    connections.clear();
                } else if (typeof destinationOrOutput === 'number') {
                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
                    disconnect.call(nativeAudioNode, destinationOrOutput);
                    for (const connection of connections){
                        if (connection[1] === destinationOrOutput) {
                            connections.delete(connection);
                        }
                    }
                } else {
                    if (isNativeAudioNode(destinationOrOutput)) {
                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);
                    } else {
                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.
                        disconnect.call(nativeAudioNode, destinationOrOutput, output);
                    }
                    for (const connection of connections){
                        if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {
                            connections.delete(connection);
                        }
                    }
                }
                const isDisconnected = connections.size === 0;
                if (wasConnected && isDisconnected) {
                    whenDisconnected();
                }
            };
        })(nativeAudioNode.disconnect);
        return nativeAudioNode;
    };
}; //# sourceMappingURL=monitor-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assignNativeAudioNodeOption": (()=>assignNativeAudioNodeOption)
});
const assignNativeAudioNodeOption = (nativeAudioNode, options, option)=>{
    const value = options[option];
    if (value !== undefined && value !== nativeAudioNode[option]) {
        nativeAudioNode[option] = value;
    }
}; //# sourceMappingURL=assign-native-audio-node-option.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assignNativeAudioNodeOptions": (()=>assignNativeAudioNodeOptions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
;
const assignNativeAudioNodeOptions = (nativeAudioNode, options)=>{
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAudioNode, options, 'channelCount');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAudioNode, options, 'channelCountMode');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAudioNode, options, 'channelInterpretation');
}; //# sourceMappingURL=assign-native-audio-node-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAnalyserNodeGetFloatTimeDomainDataMethodSupport": (()=>testAnalyserNodeGetFloatTimeDomainDataMethodSupport)
});
const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode)=>{
    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';
}; //# sourceMappingURL=test-analyser-node-get-float-time-domain-data-method-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAnalyserNodeGetFloatTimeDomainDataMethod": (()=>wrapAnalyserNodeGetFloatTimeDomainDataMethod)
});
const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode)=>{
    nativeAnalyserNode.getFloatTimeDomainData = (array)=>{
        const byteTimeDomainData = new Uint8Array(array.length);
        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);
        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);
        for(let i = 0; i < length; i += 1){
            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;
        }
        return array;
    };
}; //# sourceMappingURL=wrap-analyser-node-get-float-time-domain-data-method.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAnalyserNodeFactory": (()=>createNativeAnalyserNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$analyser$2d$node$2d$get$2d$float$2d$time$2d$domain$2d$data$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$analyser$2d$node$2d$get$2d$float$2d$time$2d$domain$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js [app-client] (ecmascript)");
;
;
;
;
const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError)=>{
    return (nativeContext, options)=>{
        const nativeAnalyserNode = nativeContext.createAnalyser();
        // Bug #37: Firefox does not create an AnalyserNode with the default properties.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeAnalyserNode, options);
        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
        if (!(options.maxDecibels > options.minDecibels)) {
            throw createIndexSizeError();
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAnalyserNode, options, 'fftSize');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAnalyserNode, options, 'maxDecibels');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAnalyserNode, options, 'minDecibels');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAnalyserNode, options, 'smoothingTimeConstant');
        // Bug #36: Safari does not support getFloatTimeDomainData() yet.
        if (!cacheTestResult(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$analyser$2d$node$2d$get$2d$float$2d$time$2d$domain$2d$data$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAnalyserNodeGetFloatTimeDomainDataMethodSupport"], ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$analyser$2d$node$2d$get$2d$float$2d$time$2d$domain$2d$data$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAnalyserNodeGetFloatTimeDomainDataMethodSupport"])(nativeAnalyserNode))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$analyser$2d$node$2d$get$2d$float$2d$time$2d$domain$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAnalyserNodeGetFloatTimeDomainDataMethod"])(nativeAnalyserNode);
        }
        return nativeAnalyserNode;
    };
}; //# sourceMappingURL=native-analyser-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAudioBufferConstructor": (()=>createNativeAudioBufferConstructor)
});
const createNativeAudioBufferConstructor = (window)=>{
    if (window === null) {
        return null;
    }
    if (window.hasOwnProperty('AudioBuffer')) {
        return window.AudioBuffer;
    }
    return null;
}; //# sourceMappingURL=native-audio-buffer-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "assignNativeAudioNodeAudioParamValue": (()=>assignNativeAudioNodeAudioParamValue)
});
const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam)=>{
    const value = options[audioParam];
    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {
        nativeAudioNode[audioParam].value = value;
    }
}; //# sourceMappingURL=assign-native-audio-node-audio-param-value.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAudioBufferSourceNodeStartMethodConsecutiveCalls": (()=>wrapAudioBufferSourceNodeStartMethodConsecutiveCalls)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js [app-client] (ecmascript)");
;
const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode)=>{
    nativeAudioBufferSourceNode.start = ((start)=>{
        let isScheduled = false;
        return (when = 0, offset = 0, duration)=>{
            if (isScheduled) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"])();
            }
            start.call(nativeAudioBufferSourceNode, when, offset, duration);
            isScheduled = true;
        };
    })(nativeAudioBufferSourceNode.start);
}; //# sourceMappingURL=wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAudioScheduledSourceNodeStartMethodNegativeParameters": (()=>wrapAudioScheduledSourceNodeStartMethodNegativeParameters)
});
const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode)=>{
    nativeAudioScheduledSourceNode.start = ((start)=>{
        return (when = 0, offset = 0, duration)=>{
            if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {
                throw new RangeError("The parameters can't be negative.");
            }
            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
            start.call(nativeAudioScheduledSourceNode, when, offset, duration);
        };
    })(nativeAudioScheduledSourceNode.start);
}; //# sourceMappingURL=wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAudioScheduledSourceNodeStopMethodNegativeParameters": (()=>wrapAudioScheduledSourceNodeStopMethodNegativeParameters)
});
const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode)=>{
    nativeAudioScheduledSourceNode.stop = ((stop)=>{
        return (when = 0)=>{
            if (when < 0) {
                throw new RangeError("The parameter can't be negative.");
            }
            stop.call(nativeAudioScheduledSourceNode, when);
        };
    })(nativeAudioScheduledSourceNode.stop);
}; //# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAudioBufferSourceNodeFactory": (()=>createNativeAudioBufferSourceNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$consecutive$2d$calls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js [app-client] (ecmascript)");
;
;
;
;
;
;
const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls)=>{
    return (nativeContext, options)=>{
        const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeAudioBufferSourceNode, options);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeAudioBufferSourceNode, options, 'playbackRate');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAudioBufferSourceNode, options, 'buffer');
        // Bug #149: Safari does not yet support the detune AudioParam.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAudioBufferSourceNode, options, 'loop');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAudioBufferSourceNode, options, 'loopEnd');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeAudioBufferSourceNode, options, 'loopStart');
        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.
        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, ()=>testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$consecutive$2d$calls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioBufferSourceNodeStartMethodConsecutiveCalls"])(nativeAudioBufferSourceNode);
        }
        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.
        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, ()=>testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {
            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);
        }
        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.
        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, ()=>testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {
            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);
        }
        // Bug #44: Safari does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, ()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStartMethodNegativeParameters"])(nativeAudioBufferSourceNode);
        }
        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, ()=>testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);
        }
        // Bug #44: Only Firefox does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, ()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStopMethodNegativeParameters"])(nativeAudioBufferSourceNode);
        }
        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.
        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);
        return nativeAudioBufferSourceNode;
    };
}; //# sourceMappingURL=native-audio-buffer-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAudioContextConstructor": (()=>createNativeAudioContextConstructor)
});
const createNativeAudioContextConstructor = (window)=>{
    if (window === null) {
        return null;
    }
    if (window.hasOwnProperty('AudioContext')) {
        return window.AudioContext;
    }
    return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;
}; //# sourceMappingURL=native-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAudioDestinationNodeFactory": (()=>createNativeAudioDestinationNodeFactory)
});
const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors)=>{
    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext)=>{
        const nativeAudioDestinationNode = nativeContext.destination;
        // Bug #132: Safari does not have the correct channelCount.
        if (nativeAudioDestinationNode.channelCount !== channelCount) {
            try {
                nativeAudioDestinationNode.channelCount = channelCount;
            } catch  {
            // Bug #169: Safari throws an error on each attempt to change the channelCount.
            }
        }
        // Bug #83: Safari does not have the correct channelCountMode.
        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {
            nativeAudioDestinationNode.channelCountMode = 'explicit';
        }
        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.
        if (nativeAudioDestinationNode.maxChannelCount === 0) {
            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {
                value: channelCount
            });
        }
        // Bug #168: No browser does yet have an AudioDestinationNode with an output.
        const gainNode = createNativeGainNode(nativeContext, {
            channelCount,
            channelCountMode: nativeAudioDestinationNode.channelCountMode,
            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,
            gain: 1
        });
        overwriteAccessors(gainNode, 'channelCount', (get)=>()=>get.call(gainNode), (set)=>(value)=>{
                set.call(gainNode, value);
                try {
                    nativeAudioDestinationNode.channelCount = value;
                } catch (err) {
                    // Bug #169: Safari throws an error on each attempt to change the channelCount.
                    if (value > nativeAudioDestinationNode.maxChannelCount) {
                        throw err;
                    }
                }
            });
        overwriteAccessors(gainNode, 'channelCountMode', (get)=>()=>get.call(gainNode), (set)=>(value)=>{
                set.call(gainNode, value);
                nativeAudioDestinationNode.channelCountMode = value;
            });
        overwriteAccessors(gainNode, 'channelInterpretation', (get)=>()=>get.call(gainNode), (set)=>(value)=>{
                set.call(gainNode, value);
                nativeAudioDestinationNode.channelInterpretation = value;
            });
        Object.defineProperty(gainNode, 'maxChannelCount', {
            get: ()=>nativeAudioDestinationNode.maxChannelCount
        });
        // @todo This should be disconnected when the context is closed.
        gainNode.connect(nativeAudioDestinationNode);
        return gainNode;
    };
}; //# sourceMappingURL=native-audio-destination-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAudioWorkletNodeConstructor": (()=>createNativeAudioWorkletNodeConstructor)
});
const createNativeAudioWorkletNodeConstructor = (window)=>{
    if (window === null) {
        return null;
    }
    return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;
}; //# sourceMappingURL=native-audio-worklet-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testClonabilityOfAudioWorkletNodeOptions": (()=>testClonabilityOfAudioWorkletNodeOptions)
});
const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions)=>{
    const { port1 } = new MessageChannel();
    try {
        // This will throw an error if the audioWorkletNodeOptions are not clonable.
        port1.postMessage(audioWorkletNodeOptions);
    } finally{
        port1.close();
    }
}; //# sourceMappingURL=test-clonability-of-audio-worklet-node-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAudioWorkletNodeFactory": (()=>createNativeAudioWorkletNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$clonability$2d$of$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js [app-client] (ecmascript)");
;
const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections)=>{
    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options)=>{
        if (nativeAudioWorkletNodeConstructor !== null) {
            try {
                const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);
                const patchedEventListeners = new Map();
                let onprocessorerror = null;
                Object.defineProperties(nativeAudioWorkletNode, {
                    /*
                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some
                     * browsers have no native implementation to achieve a consistent behavior.
                     */ channelCount: {
                        get: ()=>options.channelCount,
                        set: ()=>{
                            throw createInvalidStateError();
                        }
                    },
                    channelCountMode: {
                        get: ()=>'explicit',
                        set: ()=>{
                            throw createInvalidStateError();
                        }
                    },
                    // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.
                    onprocessorerror: {
                        get: ()=>onprocessorerror,
                        set: (value)=>{
                            if (typeof onprocessorerror === 'function') {
                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);
                            }
                            onprocessorerror = typeof value === 'function' ? value : null;
                            if (typeof onprocessorerror === 'function') {
                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);
                            }
                        }
                    }
                });
                nativeAudioWorkletNode.addEventListener = ((addEventListener)=>{
                    return (...args)=>{
                        if (args[0] === 'processorerror') {
                            const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;
                            if (unpatchedEventListener !== null) {
                                const patchedEventListener = patchedEventListeners.get(args[1]);
                                if (patchedEventListener !== undefined) {
                                    args[1] = patchedEventListener;
                                } else {
                                    args[1] = (event)=>{
                                        // Bug #178: Chrome and Edge do fire an event of type error.
                                        if (event.type === 'error') {
                                            Object.defineProperties(event, {
                                                type: {
                                                    value: 'processorerror'
                                                }
                                            });
                                            unpatchedEventListener(event);
                                        } else {
                                            unpatchedEventListener(new ErrorEvent(args[0], {
                                                ...event
                                            }));
                                        }
                                    };
                                    patchedEventListeners.set(unpatchedEventListener, args[1]);
                                }
                            }
                        }
                        // Bug #178: Chrome and Edge do fire an event of type error.
                        addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);
                        return addEventListener.call(nativeAudioWorkletNode, ...args);
                    };
                })(nativeAudioWorkletNode.addEventListener);
                nativeAudioWorkletNode.removeEventListener = ((removeEventListener)=>{
                    return (...args)=>{
                        if (args[0] === 'processorerror') {
                            const patchedEventListener = patchedEventListeners.get(args[1]);
                            if (patchedEventListener !== undefined) {
                                patchedEventListeners.delete(args[1]);
                                args[1] = patchedEventListener;
                            }
                        }
                        // Bug #178: Chrome and Edge do fire an event of type error.
                        removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);
                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);
                    };
                })(nativeAudioWorkletNode.removeEventListener);
                /*
                 * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but
                 * has an output.
                 */ if (options.numberOfOutputs !== 0) {
                    const nativeGainNode = createNativeGainNode(nativeContext, {
                        channelCount: 1,
                        channelCountMode: 'explicit',
                        channelInterpretation: 'discrete',
                        gain: 0
                    });
                    nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);
                    const whenConnected = ()=>nativeGainNode.disconnect();
                    const whenDisconnected = ()=>nativeGainNode.connect(nativeContext.destination);
                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.
                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);
                }
                return nativeAudioWorkletNode;
            } catch (err) {
                // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.
                if (err.code === 11) {
                    throw createNotSupportedError();
                }
                throw err;
            }
        }
        // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.
        if (processorConstructor === undefined) {
            throw createNotSupportedError();
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$clonability$2d$of$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testClonabilityOfAudioWorkletNodeOptions"])(options);
        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);
    };
}; //# sourceMappingURL=native-audio-worklet-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "computeBufferSize": (()=>computeBufferSize)
});
const computeBufferSize = (baseLatency, sampleRate)=>{
    if (baseLatency === null) {
        return 512;
    }
    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));
}; //# sourceMappingURL=compute-buffer-size.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "cloneAudioWorkletNodeOptions": (()=>cloneAudioWorkletNodeOptions)
});
const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions)=>{
    return new Promise((resolve, reject)=>{
        const { port1, port2 } = new MessageChannel();
        port1.onmessage = ({ data })=>{
            port1.close();
            port2.close();
            resolve(data);
        };
        port1.onmessageerror = ({ data })=>{
            port1.close();
            port2.close();
            reject(data);
        };
        // This will throw an error if the audioWorkletNodeOptions are not clonable.
        port2.postMessage(audioWorkletNodeOptions);
    });
}; //# sourceMappingURL=clone-audio-worklet-node-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioWorkletProcessorPromise": (()=>createAudioWorkletProcessorPromise)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$clone$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js [app-client] (ecmascript)");
;
const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions)=>{
    const clonedAudioWorkletNodeOptions = await (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$clone$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["cloneAudioWorkletNodeOptions"])(audioWorkletNodeOptions);
    return new processorConstructor(clonedAudioWorkletNodeOptions);
}; //# sourceMappingURL=create-audio-worklet-processor-promise.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createAudioWorkletProcessor": (()=>createAudioWorkletProcessor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$audio$2d$worklet$2d$processor$2d$promise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js [app-client] (ecmascript)");
;
;
const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions)=>{
    let nodeToProcessorMap = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODE_TO_PROCESSOR_MAPS"].get(nativeContext);
    if (nodeToProcessorMap === undefined) {
        nodeToProcessorMap = new WeakMap();
        __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["NODE_TO_PROCESSOR_MAPS"].set(nativeContext, nodeToProcessorMap);
    }
    const audioWorkletProcessorPromise = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$audio$2d$worklet$2d$processor$2d$promise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioWorkletProcessorPromise"])(processorConstructor, audioWorkletNodeOptions);
    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);
    return audioWorkletProcessorPromise;
}; //# sourceMappingURL=create-audio-worklet-processor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeAudioWorkletNodeFakerFactory": (()=>createNativeAudioWorkletNodeFakerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$compute$2d$buffer$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$from$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$to$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$audio$2d$worklet$2d$processor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$nested$2d$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$read$2d$only$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/read-only-map.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections)=>{
    return (nativeContext, baseLatency, processorConstructor, options)=>{
        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {
            throw createNotSupportedError();
        }
        const outputChannelCount = Array.isArray(options.outputChannelCount) ? options.outputChannelCount : Array.from(options.outputChannelCount);
        // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.
        if (outputChannelCount.some((channelCount)=>channelCount < 1)) {
            throw createNotSupportedError();
        }
        if (outputChannelCount.length !== options.numberOfOutputs) {
            throw createIndexSizeError();
        }
        // Bug #61: This is not part of the standard but required for the faker to work.
        if (options.channelCountMode !== 'explicit') {
            throw createNotSupportedError();
        }
        const numberOfInputChannels = options.channelCount * options.numberOfInputs;
        const numberOfOutputChannels = outputChannelCount.reduce((sum, value1)=>sum + value1, 0);
        const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;
        // Bug #61: This is not part of the standard but required for the faker to work.
        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {
            throw createNotSupportedError();
        }
        const messageChannel = new MessageChannel();
        const gainNodes = [];
        const inputChannelSplitterNodes = [];
        for(let i = 0; i < options.numberOfInputs; i += 1){
            gainNodes.push(createNativeGainNode(nativeContext, {
                channelCount: options.channelCount,
                channelCountMode: options.channelCountMode,
                channelInterpretation: options.channelInterpretation,
                gain: 1
            }));
            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {
                channelCount: options.channelCount,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                numberOfOutputs: options.channelCount
            }));
        }
        const constantSourceNodes = [];
        if (processorConstructor.parameterDescriptors !== undefined) {
            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors){
                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
                    channelCount: 1,
                    channelCountMode: 'explicit',
                    channelInterpretation: 'discrete',
                    offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue
                });
                Object.defineProperties(constantSourceNode.offset, {
                    defaultValue: {
                        get: ()=>defaultValue === undefined ? 0 : defaultValue
                    },
                    maxValue: {
                        get: ()=>maxValue === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"] : maxValue
                    },
                    minValue: {
                        get: ()=>minValue === undefined ? __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"] : minValue
                    }
                });
                constantSourceNodes.push(constantSourceNode);
            }
        }
        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'speakers',
            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
        });
        const bufferSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$compute$2d$buffer$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["computeBufferSize"])(baseLatency, nativeContext.sampleRate);
        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.
        Math.max(1, numberOfOutputChannels));
        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
            channelCount: Math.max(1, numberOfOutputChannels),
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            numberOfOutputs: Math.max(1, numberOfOutputChannels)
        });
        const outputChannelMergerNodes = [];
        for(let i = 0; i < options.numberOfOutputs; i += 1){
            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'speakers',
                numberOfInputs: outputChannelCount[i]
            }));
        }
        for(let i = 0; i < options.numberOfInputs; i += 1){
            gainNodes[i].connect(inputChannelSplitterNodes[i]);
            for(let j = 0; j < options.channelCount; j += 1){
                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
            }
        }
        const parameterMap = new __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$read$2d$only$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ReadOnlyMap"](processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(({ name }, index)=>{
            const constantSourceNode = constantSourceNodes[index];
            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
            constantSourceNode.start(0);
            return [
                name,
                constantSourceNode.offset
            ];
        }));
        inputChannelMergerNode.connect(scriptProcessorNode);
        let channelInterpretation = options.channelInterpretation;
        let onprocessorerror = null;
        // Bug #87: Expose at least one output to make this node connectable.
        const outputAudioNodes = options.numberOfOutputs === 0 ? [
            scriptProcessorNode
        ] : outputChannelMergerNodes;
        const nativeAudioWorkletNodeFaker = {
            get bufferSize () {
                return bufferSize;
            },
            get channelCount () {
                return options.channelCount;
            },
            set channelCount (_){
                // Bug #61: This is not part of the standard but required for the faker to work.
                throw createInvalidStateError();
            },
            get channelCountMode () {
                return options.channelCountMode;
            },
            set channelCountMode (_){
                // Bug #61: This is not part of the standard but required for the faker to work.
                throw createInvalidStateError();
            },
            get channelInterpretation () {
                return channelInterpretation;
            },
            set channelInterpretation (value){
                for (const gainNode of gainNodes){
                    gainNode.channelInterpretation = value;
                }
                channelInterpretation = value;
            },
            get context () {
                return scriptProcessorNode.context;
            },
            get inputs () {
                return gainNodes;
            },
            get numberOfInputs () {
                return options.numberOfInputs;
            },
            get numberOfOutputs () {
                return options.numberOfOutputs;
            },
            get onprocessorerror () {
                return onprocessorerror;
            },
            set onprocessorerror (value){
                if (typeof onprocessorerror === 'function') {
                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);
                }
                onprocessorerror = typeof value === 'function' ? value : null;
                if (typeof onprocessorerror === 'function') {
                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);
                }
            },
            get parameters () {
                return parameterMap;
            },
            get port () {
                return messageChannel.port2;
            },
            addEventListener (...args) {
                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
            },
            connect: connectMultipleOutputs.bind(null, outputAudioNodes),
            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),
            dispatchEvent (...args) {
                return scriptProcessorNode.dispatchEvent(args[0]);
            },
            removeEventListener (...args) {
                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        const patchedEventListeners = new Map();
        messageChannel.port1.addEventListener = ((addEventListener)=>{
            return (...args)=>{
                if (args[0] === 'message') {
                    const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;
                    if (unpatchedEventListener !== null) {
                        const patchedEventListener = patchedEventListeners.get(args[1]);
                        if (patchedEventListener !== undefined) {
                            args[1] = patchedEventListener;
                        } else {
                            args[1] = (event)=>{
                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, ()=>unpatchedEventListener(event));
                            };
                            patchedEventListeners.set(unpatchedEventListener, args[1]);
                        }
                    }
                }
                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
            };
        })(messageChannel.port1.addEventListener);
        messageChannel.port1.removeEventListener = ((removeEventListener)=>{
            return (...args)=>{
                if (args[0] === 'message') {
                    const patchedEventListener = patchedEventListeners.get(args[1]);
                    if (patchedEventListener !== undefined) {
                        patchedEventListeners.delete(args[1]);
                        args[1] = patchedEventListener;
                    }
                }
                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
            };
        })(messageChannel.port1.removeEventListener);
        let onmessage = null;
        Object.defineProperty(messageChannel.port1, 'onmessage', {
            get: ()=>onmessage,
            set: (value1)=>{
                if (typeof onmessage === 'function') {
                    messageChannel.port1.removeEventListener('message', onmessage);
                }
                onmessage = typeof value1 === 'function' ? value1 : null;
                if (typeof onmessage === 'function') {
                    messageChannel.port1.addEventListener('message', onmessage);
                    messageChannel.port1.start();
                }
            }
        });
        processorConstructor.prototype.port = messageChannel.port1;
        let audioWorkletProcessor = null;
        const audioWorkletProcessorPromise = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$audio$2d$worklet$2d$processor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioWorkletProcessor"])(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);
        audioWorkletProcessorPromise.then((dWrkltPrcssr)=>audioWorkletProcessor = dWrkltPrcssr);
        const inputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$nested$2d$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNestedArrays"])(options.numberOfInputs, options.channelCount);
        const outputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$create$2d$nested$2d$arrays$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNestedArrays"])(options.numberOfOutputs, outputChannelCount);
        const parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, { name })=>({
                ...prmtrs,
                [name]: new Float32Array(128)
            }), {});
        let isActive = true;
        const disconnectOutputsGraph = ()=>{
            if (options.numberOfOutputs > 0) {
                scriptProcessorNode.disconnect(outputChannelSplitterNode);
            }
            for(let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1){
                const outputChannelMergerNode = outputChannelMergerNodes[i];
                for(let j = 0; j < outputChannelCount[i]; j += 1){
                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
                }
                outputChannelSplitterNodeOutput += outputChannelCount[i];
            }
        };
        const activeInputIndexes = new Map();
        // tslint:disable-next-line:deprecation
        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer })=>{
            if (audioWorkletProcessor !== null) {
                const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);
                for(let i = 0; i < bufferSize; i += 128){
                    for(let j = 0; j < options.numberOfInputs; j += 1){
                        for(let k = 0; k < options.channelCount; k += 1){
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$from$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyFromChannel"])(inputBuffer, inputs[j], k, k, i);
                        }
                    }
                    if (processorConstructor.parameterDescriptors !== undefined) {
                        processorConstructor.parameterDescriptors.forEach(({ name }, index)=>{
                            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$from$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyFromChannel"])(inputBuffer, parameters, name, numberOfInputChannels + index, i);
                        });
                    }
                    for(let j = 0; j < options.numberOfInputs; j += 1){
                        for(let k = 0; k < outputChannelCount[j]; k += 1){
                            // The byteLength will be 0 when the ArrayBuffer was transferred.
                            if (outputs[j][k].byteLength === 0) {
                                outputs[j][k] = new Float32Array(128);
                            }
                        }
                    }
                    try {
                        const potentiallyEmptyInputs = inputs.map((input, index)=>{
                            const activeInput = activeInputs[index];
                            if (activeInput.size > 0) {
                                activeInputIndexes.set(index, bufferSize / 128);
                                return input;
                            }
                            const count = activeInputIndexes.get(index);
                            if (count === undefined) {
                                return [];
                            }
                            if (input.every((channelData)=>channelData.every((sample)=>sample === 0))) {
                                if (count === 1) {
                                    activeInputIndexes.delete(index);
                                } else {
                                    activeInputIndexes.set(index, count - 1);
                                }
                            }
                            return input;
                        });
                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, ()=>audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
                        isActive = activeSourceFlag;
                        for(let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1){
                            for(let k = 0; k < outputChannelCount[j]; k += 1){
                                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$copy$2d$to$2d$channel$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["copyToChannel"])(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
                            }
                            outputChannelSplitterNodeOutput += outputChannelCount[j];
                        }
                    } catch (error) {
                        isActive = false;
                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {
                            colno: error.colno,
                            filename: error.filename,
                            lineno: error.lineno,
                            message: error.message
                        }));
                    }
                    if (!isActive) {
                        for(let j = 0; j < options.numberOfInputs; j += 1){
                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);
                            for(let k = 0; k < options.channelCount; k += 1){
                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);
                            }
                        }
                        if (processorConstructor.parameterDescriptors !== undefined) {
                            const length = processorConstructor.parameterDescriptors.length;
                            for(let j = 0; j < length; j += 1){
                                const constantSourceNode = constantSourceNodes[j];
                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);
                                constantSourceNode.stop();
                            }
                        }
                        inputChannelMergerNode.disconnect(scriptProcessorNode);
                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation
                        if (isConnected) {
                            disconnectOutputsGraph();
                        } else {
                            disconnectFakeGraph();
                        }
                        break;
                    }
                }
            }
        };
        let isConnected = false;
        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.
        const nativeGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
        });
        const connectFakeGraph = ()=>scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);
        const disconnectFakeGraph = ()=>{
            scriptProcessorNode.disconnect(nativeGainNode);
            nativeGainNode.disconnect();
        };
        const whenConnected = ()=>{
            if (isActive) {
                disconnectFakeGraph();
                if (options.numberOfOutputs > 0) {
                    scriptProcessorNode.connect(outputChannelSplitterNode);
                }
                for(let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1){
                    const outputChannelMergerNode = outputChannelMergerNodes[i];
                    for(let j = 0; j < outputChannelCount[i]; j += 1){
                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
                    }
                    outputChannelSplitterNodeOutput += outputChannelCount[i];
                }
            }
            isConnected = true;
        };
        const whenDisconnected = ()=>{
            if (isActive) {
                connectFakeGraph();
                disconnectOutputsGraph();
            }
            isConnected = false;
        };
        connectFakeGraph();
        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);
    };
}; //# sourceMappingURL=native-audio-worklet-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeBiquadFilterNode": (()=>createNativeBiquadFilterNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
;
const createNativeBiquadFilterNode = (nativeContext, options)=>{
    const nativeBiquadFilterNode = nativeContext.createBiquadFilter();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeBiquadFilterNode, options);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeBiquadFilterNode, options, 'Q');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeBiquadFilterNode, options, 'detune');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeBiquadFilterNode, options, 'frequency');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeBiquadFilterNode, options, 'gain');
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeBiquadFilterNode, options, 'type');
    return nativeBiquadFilterNode;
}; //# sourceMappingURL=native-biquad-filter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeChannelMergerNodeFactory": (()=>createNativeChannelMergerNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor, wrapChannelMergerNode)=>{
    return (nativeContext, options)=>{
        const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);
        /*
         * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.
         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of
         * the webkitAudioContext is used as a workaround here.
         */ if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {
            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeChannelMergerNode, options);
        return nativeChannelMergerNode;
    };
}; //# sourceMappingURL=native-channel-merger-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapChannelSplitterNode": (()=>wrapChannelSplitterNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js [app-client] (ecmascript)");
;
const wrapChannelSplitterNode = (channelSplitterNode)=>{
    const channelCount = channelSplitterNode.numberOfOutputs;
    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.
    Object.defineProperty(channelSplitterNode, 'channelCount', {
        get: ()=>channelCount,
        set: (value)=>{
            if (value !== channelCount) {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"])();
            }
        }
    });
    // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.
    Object.defineProperty(channelSplitterNode, 'channelCountMode', {
        get: ()=>'explicit',
        set: (value)=>{
            if (value !== 'explicit') {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"])();
            }
        }
    });
    // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.
    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {
        get: ()=>'discrete',
        set: (value)=>{
            if (value !== 'discrete') {
                throw (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"])();
            }
        }
    });
}; //# sourceMappingURL=wrap-channel-splitter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeChannelSplitterNode": (()=>createNativeChannelSplitterNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js [app-client] (ecmascript)");
;
;
const createNativeChannelSplitterNode = (nativeContext, options)=>{
    const nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs);
    // Bug #96: Safari does not have the correct channelCount.
    // Bug #29: Safari does not have the correct channelCountMode.
    // Bug #31: Safari does not have the correct channelInterpretation.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeChannelSplitterNode, options);
    // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Edge & Firefox partially support the spec yet.
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapChannelSplitterNode"])(nativeChannelSplitterNode);
    return nativeChannelSplitterNode;
}; //# sourceMappingURL=native-channel-splitter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeConstantSourceNodeFactory": (()=>createNativeConstantSourceNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js [app-client] (ecmascript)");
;
;
;
;
const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport)=>{
    return (nativeContext, options)=>{
        // Bug #62: Safari does not support ConstantSourceNodes.
        if (nativeContext.createConstantSource === undefined) {
            return createNativeConstantSourceNodeFaker(nativeContext, options);
        }
        const nativeConstantSourceNode = nativeContext.createConstantSource();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeConstantSourceNode, options);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeConstantSourceNode, options, 'offset');
        // Bug #44: Safari does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, ()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStartMethodNegativeParameters"])(nativeConstantSourceNode);
        }
        // Bug #44: Only Firefox does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, ()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStopMethodNegativeParameters"])(nativeConstantSourceNode);
        }
        // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.
        addSilentConnection(nativeContext, nativeConstantSourceNode);
        return nativeConstantSourceNode;
    };
}; //# sourceMappingURL=native-constant-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "interceptConnections": (()=>interceptConnections)
});
const interceptConnections = (original, interceptor)=>{
    original.connect = interceptor.connect.bind(interceptor);
    original.disconnect = interceptor.disconnect.bind(interceptor);
    return original;
}; //# sourceMappingURL=intercept-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeConstantSourceNodeFakerFactory": (()=>createNativeConstantSourceNodeFakerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js [app-client] (ecmascript)");
;
const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections)=>{
    return (nativeContext, { offset, ...audioNodeOptions })=>{
        const audioBuffer = nativeContext.createBuffer(1, 2, 44100);
        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
            buffer: null,
            channelCount: 2,
            channelCountMode: 'max',
            channelInterpretation: 'speakers',
            loop: false,
            loopEnd: 0,
            loopStart: 0,
            playbackRate: 1
        });
        const gainNode = createNativeGainNode(nativeContext, {
            ...audioNodeOptions,
            gain: offset
        });
        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
        const channelData = audioBuffer.getChannelData(0);
        // Bug #95: Safari does not play or loop one sample buffers.
        channelData[0] = 1;
        channelData[1] = 1;
        audioBufferSourceNode.buffer = audioBuffer;
        audioBufferSourceNode.loop = true;
        const nativeConstantSourceNodeFaker = {
            get bufferSize () {
                return undefined;
            },
            get channelCount () {
                return gainNode.channelCount;
            },
            set channelCount (value){
                gainNode.channelCount = value;
            },
            get channelCountMode () {
                return gainNode.channelCountMode;
            },
            set channelCountMode (value){
                gainNode.channelCountMode = value;
            },
            get channelInterpretation () {
                return gainNode.channelInterpretation;
            },
            set channelInterpretation (value){
                gainNode.channelInterpretation = value;
            },
            get context () {
                return gainNode.context;
            },
            get inputs () {
                return [];
            },
            get numberOfInputs () {
                return audioBufferSourceNode.numberOfInputs;
            },
            get numberOfOutputs () {
                return gainNode.numberOfOutputs;
            },
            get offset () {
                return gainNode.gain;
            },
            get onended () {
                return audioBufferSourceNode.onended;
            },
            set onended (value){
                audioBufferSourceNode.onended = value;
            },
            addEventListener (...args) {
                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent (...args) {
                return audioBufferSourceNode.dispatchEvent(args[0]);
            },
            removeEventListener (...args) {
                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);
            },
            start (when = 0) {
                audioBufferSourceNode.start.call(audioBufferSourceNode, when);
            },
            stop (when = 0) {
                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);
            }
        };
        const whenConnected = ()=>audioBufferSourceNode.connect(gainNode);
        const whenDisconnected = ()=>audioBufferSourceNode.disconnect(gainNode);
        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.
        addSilentConnection(nativeContext, audioBufferSourceNode);
        return monitorConnections((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["interceptConnections"])(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);
    };
}; //# sourceMappingURL=native-constant-source-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeConvolverNodeFactory": (()=>createNativeConvolverNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
const createNativeConvolverNodeFactory = (createNotSupportedError, overwriteAccessors)=>{
    return (nativeContext, options)=>{
        const nativeConvolverNode = nativeContext.createConvolver();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeConvolverNode, options);
        // The normalize property needs to be set before setting the buffer.
        if (options.disableNormalization === nativeConvolverNode.normalize) {
            nativeConvolverNode.normalize = !options.disableNormalization;
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeConvolverNode, options, 'buffer');
        // Bug #113: Safari does allow to set the channelCount to a value larger than 2.
        if (options.channelCount > 2) {
            throw createNotSupportedError();
        }
        overwriteAccessors(nativeConvolverNode, 'channelCount', (get)=>()=>get.call(nativeConvolverNode), (set)=>(value)=>{
                if (value > 2) {
                    throw createNotSupportedError();
                }
                return set.call(nativeConvolverNode, value);
            });
        // Bug #114: Safari allows to set the channelCountMode to 'max'.
        if (options.channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        overwriteAccessors(nativeConvolverNode, 'channelCountMode', (get)=>()=>get.call(nativeConvolverNode), (set)=>(value)=>{
                if (value === 'max') {
                    throw createNotSupportedError();
                }
                return set.call(nativeConvolverNode, value);
            });
        return nativeConvolverNode;
    };
}; //# sourceMappingURL=native-convolver-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeDelayNode": (()=>createNativeDelayNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
const createNativeDelayNode = (nativeContext, options)=>{
    const nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeDelayNode, options);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeDelayNode, options, 'delayTime');
    return nativeDelayNode;
}; //# sourceMappingURL=native-delay-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeDynamicsCompressorNodeFactory": (()=>createNativeDynamicsCompressorNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
const createNativeDynamicsCompressorNodeFactory = (createNotSupportedError)=>{
    return (nativeContext, options)=>{
        const nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeDynamicsCompressorNode, options);
        // Bug #108: Safari allows a channelCount of three and above.
        if (options.channelCount > 2) {
            throw createNotSupportedError();
        }
        // Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max'.
        if (options.channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeDynamicsCompressorNode, options, 'attack');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeDynamicsCompressorNode, options, 'knee');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeDynamicsCompressorNode, options, 'ratio');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeDynamicsCompressorNode, options, 'release');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeDynamicsCompressorNode, options, 'threshold');
        return nativeDynamicsCompressorNode;
    };
}; //# sourceMappingURL=native-dynamics-compressor-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeGainNode": (()=>createNativeGainNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
const createNativeGainNode = (nativeContext, options)=>{
    const nativeGainNode = nativeContext.createGain();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeGainNode, options);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeGainNode, options, 'gain');
    return nativeGainNode;
}; //# sourceMappingURL=native-gain-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeIIRFilterNodeFactory": (()=>createNativeIIRFilterNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
const createNativeIIRFilterNodeFactory = (createNativeIIRFilterNodeFaker)=>{
    return (nativeContext, baseLatency, options)=>{
        // Bug #9: Safari does not support IIRFilterNodes.
        if (nativeContext.createIIRFilter === undefined) {
            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);
        }
        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.
        const nativeIIRFilterNode = nativeContext.createIIRFilter(options.feedforward, options.feedback);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeIIRFilterNode, options);
        return nativeIIRFilterNode;
    };
}; //# sourceMappingURL=native-iir-filter-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeIIRFilterNodeFakerFactory": (()=>createNativeIIRFilterNodeFakerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$compute$2d$buffer$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$filter$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js [app-client] (ecmascript)");
;
;
;
function divide(a, b) {
    const denominator = b[0] * b[0] + b[1] * b[1];
    return [
        (a[0] * b[0] + a[1] * b[1]) / denominator,
        (a[1] * b[0] - a[0] * b[1]) / denominator
    ];
}
function multiply(a, b) {
    return [
        a[0] * b[0] - a[1] * b[1],
        a[0] * b[1] + a[1] * b[0]
    ];
}
function evaluatePolynomial(coefficient, z) {
    let result = [
        0,
        0
    ];
    for(let i = coefficient.length - 1; i >= 0; i -= 1){
        result = multiply(result, z);
        result[0] += coefficient[i];
    }
    return result;
}
const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError)=>{
    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward })=>{
        const bufferSize = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$compute$2d$buffer$2d$size$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["computeBufferSize"])(baseLatency, nativeContext.sampleRate);
        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);
        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);
        const feedbackLength = convertedFeedback.length;
        const feedforwardLength = convertedFeedforward.length;
        const minLength = Math.min(feedbackLength, feedforwardLength);
        if (feedbackLength === 0 || feedbackLength > 20) {
            throw createNotSupportedError();
        }
        if (convertedFeedback[0] === 0) {
            throw createInvalidStateError();
        }
        if (feedforwardLength === 0 || feedforwardLength > 20) {
            throw createNotSupportedError();
        }
        if (convertedFeedforward[0] === 0) {
            throw createInvalidStateError();
        }
        if (convertedFeedback[0] !== 1) {
            for(let i = 0; i < feedforwardLength; i += 1){
                convertedFeedforward[i] /= convertedFeedback[0];
            }
            for(let i = 1; i < feedbackLength; i += 1){
                convertedFeedback[i] /= convertedFeedback[0];
            }
        }
        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);
        scriptProcessorNode.channelCount = channelCount;
        scriptProcessorNode.channelCountMode = channelCountMode;
        scriptProcessorNode.channelInterpretation = channelInterpretation;
        const bufferLength = 32;
        const bufferIndexes = [];
        const xBuffers = [];
        const yBuffers = [];
        for(let i = 0; i < channelCount; i += 1){
            bufferIndexes.push(0);
            const xBuffer = new Float32Array(bufferLength);
            const yBuffer = new Float32Array(bufferLength);
            xBuffer.fill(0);
            yBuffer.fill(0);
            xBuffers.push(xBuffer);
            yBuffers.push(yBuffer);
        }
        // tslint:disable-next-line:deprecation
        scriptProcessorNode.onaudioprocess = (event)=>{
            const inputBuffer = event.inputBuffer;
            const outputBuffer = event.outputBuffer;
            const numberOfChannels = inputBuffer.numberOfChannels;
            for(let i = 0; i < numberOfChannels; i += 1){
                const input = inputBuffer.getChannelData(i);
                const output = outputBuffer.getChannelData(i);
                bufferIndexes[i] = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$filter$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["filterBuffer"])(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);
            }
        };
        const nyquist = nativeContext.sampleRate / 2;
        const nativeIIRFilterNodeFaker = {
            get bufferSize () {
                return bufferSize;
            },
            get channelCount () {
                return scriptProcessorNode.channelCount;
            },
            set channelCount (value){
                scriptProcessorNode.channelCount = value;
            },
            get channelCountMode () {
                return scriptProcessorNode.channelCountMode;
            },
            set channelCountMode (value){
                scriptProcessorNode.channelCountMode = value;
            },
            get channelInterpretation () {
                return scriptProcessorNode.channelInterpretation;
            },
            set channelInterpretation (value){
                scriptProcessorNode.channelInterpretation = value;
            },
            get context () {
                return scriptProcessorNode.context;
            },
            get inputs () {
                return [
                    scriptProcessorNode
                ];
            },
            get numberOfInputs () {
                return scriptProcessorNode.numberOfInputs;
            },
            get numberOfOutputs () {
                return scriptProcessorNode.numberOfOutputs;
            },
            addEventListener (...args) {
                // @todo Dissallow adding an audioprocess listener.
                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent (...args) {
                return scriptProcessorNode.dispatchEvent(args[0]);
            },
            getFrequencyResponse (frequencyHz, magResponse, phaseResponse) {
                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
                    throw createInvalidAccessError();
                }
                const length = frequencyHz.length;
                for(let i = 0; i < length; i += 1){
                    const omega = -Math.PI * (frequencyHz[i] / nyquist);
                    const z = [
                        Math.cos(omega),
                        Math.sin(omega)
                    ];
                    const numerator = evaluatePolynomial(convertedFeedforward, z);
                    const denominator = evaluatePolynomial(convertedFeedback, z);
                    const response = divide(numerator, denominator);
                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);
                    phaseResponse[i] = Math.atan2(response[1], response[0]);
                }
            },
            removeEventListener (...args) {
                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        return (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["interceptConnections"])(nativeIIRFilterNodeFaker, scriptProcessorNode);
    };
}; //# sourceMappingURL=native-iir-filter-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeMediaElementAudioSourceNode": (()=>createNativeMediaElementAudioSourceNode)
});
const createNativeMediaElementAudioSourceNode = (nativeAudioContext, options)=>{
    return nativeAudioContext.createMediaElementSource(options.mediaElement);
}; //# sourceMappingURL=native-media-element-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeMediaStreamAudioDestinationNode": (()=>createNativeMediaStreamAudioDestinationNode)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
const createNativeMediaStreamAudioDestinationNode = (nativeAudioContext, options)=>{
    const nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeMediaStreamAudioDestinationNode, options);
    // Bug #174: Safari does expose a wrong numberOfOutputs.
    if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {
        Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', {
            get: ()=>0
        });
    }
    return nativeMediaStreamAudioDestinationNode;
}; //# sourceMappingURL=native-media-stream-audio-destination-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeMediaStreamAudioSourceNode": (()=>createNativeMediaStreamAudioSourceNode)
});
const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, { mediaStream })=>{
    const audioStreamTracks = mediaStream.getAudioTracks();
    /*
     * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.
     * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.
     */ audioStreamTracks.sort((a, b)=>a.id < b.id ? -1 : a.id > b.id ? 1 : 0);
    const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);
    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));
    /*
     * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs
     * to be overwritten as it would otherwise expose the reconstructed version.
     */ Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {
        value: mediaStream
    });
    return nativeMediaStreamAudioSourceNode;
}; //# sourceMappingURL=native-media-stream-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeMediaStreamTrackAudioSourceNodeFactory": (()=>createNativeMediaStreamTrackAudioSourceNodeFactory)
});
const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, isNativeOfflineAudioContext)=>{
    return (nativeAudioContext, { mediaStreamTrack })=>{
        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.
        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {
            return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);
        }
        const mediaStream = new MediaStream([
            mediaStreamTrack
        ]);
        const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream);
        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.
        if (mediaStreamTrack.kind !== 'audio') {
            throw createInvalidStateError();
        }
        // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.
        if (isNativeOfflineAudioContext(nativeAudioContext)) {
            throw new TypeError();
        }
        return nativeMediaStreamAudioSourceNode;
    };
}; //# sourceMappingURL=native-media-stream-track-audio-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeOfflineAudioContextConstructor": (()=>createNativeOfflineAudioContextConstructor)
});
const createNativeOfflineAudioContextConstructor = (window)=>{
    if (window === null) {
        return null;
    }
    if (window.hasOwnProperty('OfflineAudioContext')) {
        return window.OfflineAudioContext;
    }
    return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;
}; //# sourceMappingURL=native-offline-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeOscillatorNodeFactory": (()=>createNativeOscillatorNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js [app-client] (ecmascript)");
;
;
;
;
;
const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls)=>{
    return (nativeContext, options)=>{
        const nativeOscillatorNode = nativeContext.createOscillator();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeOscillatorNode, options);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeOscillatorNode, options, 'detune');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeOscillatorNode, options, 'frequency');
        if (options.periodicWave !== undefined) {
            nativeOscillatorNode.setPeriodicWave(options.periodicWave);
        } else {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeOscillatorNode, options, 'type');
        }
        // Bug #44: Only Chrome & Edge throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, ()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStartMethodNegativeParameters"])(nativeOscillatorNode);
        }
        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, ()=>testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);
        }
        // Bug #44: Only Firefox does not throw a RangeError yet.
        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, ()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
            (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStopMethodNegativeParameters"])(nativeOscillatorNode);
        }
        // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.
        addSilentConnection(nativeContext, nativeOscillatorNode);
        return nativeOscillatorNode;
    };
}; //# sourceMappingURL=native-oscillator-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativePannerNodeFactory": (()=>createNativePannerNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
;
const createNativePannerNodeFactory = (createNativePannerNodeFaker)=>{
    return (nativeContext, options)=>{
        const nativePannerNode = nativeContext.createPanner();
        // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.
        if (nativePannerNode.orientationX === undefined) {
            return createNativePannerNodeFaker(nativeContext, options);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativePannerNode, options);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativePannerNode, options, 'orientationX');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativePannerNode, options, 'orientationY');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativePannerNode, options, 'orientationZ');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativePannerNode, options, 'positionX');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativePannerNode, options, 'positionY');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativePannerNode, options, 'positionZ');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'coneInnerAngle');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'coneOuterAngle');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'coneOuterGain');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'distanceModel');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'maxDistance');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'panningModel');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'refDistance');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativePannerNode, options, 'rolloffFactor');
        return nativePannerNode;
    };
}; //# sourceMappingURL=native-panner-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativePannerNodeFakerFactory": (()=>createNativePannerNodeFakerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js [app-client] (ecmascript)");
;
;
const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections)=>{
    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions })=>{
        const pannerNode = nativeContext.createPanner();
        // Bug #125: Safari does not throw an error yet.
        if (audioNodeOptions.channelCount > 2) {
            throw createNotSupportedError();
        }
        // Bug #126: Safari does not throw an error yet.
        if (audioNodeOptions.channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(pannerNode, audioNodeOptions);
        const SINGLE_CHANNEL_OPTIONS = {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete'
        };
        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            channelInterpretation: 'speakers',
            numberOfInputs: 6
        });
        const inputGainNode = createNativeGainNode(nativeContext, {
            ...audioNodeOptions,
            gain: 1
        });
        const orientationXGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 1
        });
        const orientationYGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        const orientationZGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        const positionXGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        const positionYGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        const positionZGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);
        const waveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            curve: new Float32Array([
                1,
                1
            ]),
            oversample: 'none'
        });
        let lastOrientation = [
            orientationX,
            orientationY,
            orientationZ
        ];
        let lastPosition = [
            positionX,
            positionY,
            positionZ
        ];
        const buffer = new Float32Array(1);
        // tslint:disable-next-line:deprecation
        scriptProcessorNode.onaudioprocess = ({ inputBuffer })=>{
            const orientation = [
                getFirstSample(inputBuffer, buffer, 0),
                getFirstSample(inputBuffer, buffer, 1),
                getFirstSample(inputBuffer, buffer, 2)
            ];
            if (orientation.some((value1, index)=>value1 !== lastOrientation[index])) {
                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation
                lastOrientation = orientation;
            }
            const positon = [
                getFirstSample(inputBuffer, buffer, 3),
                getFirstSample(inputBuffer, buffer, 4),
                getFirstSample(inputBuffer, buffer, 5)
            ];
            if (positon.some((value1, index)=>value1 !== lastPosition[index])) {
                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation
                lastPosition = positon;
            }
        };
        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {
            get: ()=>0
        });
        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {
            get: ()=>0
        });
        Object.defineProperty(positionXGainNode.gain, 'defaultValue', {
            get: ()=>0
        });
        Object.defineProperty(positionYGainNode.gain, 'defaultValue', {
            get: ()=>0
        });
        Object.defineProperty(positionZGainNode.gain, 'defaultValue', {
            get: ()=>0
        });
        const nativePannerNodeFaker = {
            get bufferSize () {
                return undefined;
            },
            get channelCount () {
                return pannerNode.channelCount;
            },
            set channelCount (value){
                // Bug #125: Safari does not throw an error yet.
                if (value > 2) {
                    throw createNotSupportedError();
                }
                inputGainNode.channelCount = value;
                pannerNode.channelCount = value;
            },
            get channelCountMode () {
                return pannerNode.channelCountMode;
            },
            set channelCountMode (value){
                // Bug #126: Safari does not throw an error yet.
                if (value === 'max') {
                    throw createNotSupportedError();
                }
                inputGainNode.channelCountMode = value;
                pannerNode.channelCountMode = value;
            },
            get channelInterpretation () {
                return pannerNode.channelInterpretation;
            },
            set channelInterpretation (value){
                inputGainNode.channelInterpretation = value;
                pannerNode.channelInterpretation = value;
            },
            get coneInnerAngle () {
                return pannerNode.coneInnerAngle;
            },
            set coneInnerAngle (value){
                pannerNode.coneInnerAngle = value;
            },
            get coneOuterAngle () {
                return pannerNode.coneOuterAngle;
            },
            set coneOuterAngle (value){
                pannerNode.coneOuterAngle = value;
            },
            get coneOuterGain () {
                return pannerNode.coneOuterGain;
            },
            set coneOuterGain (value){
                // Bug #127: Safari does not throw an InvalidStateError yet.
                if (value < 0 || value > 1) {
                    throw createInvalidStateError();
                }
                pannerNode.coneOuterGain = value;
            },
            get context () {
                return pannerNode.context;
            },
            get distanceModel () {
                return pannerNode.distanceModel;
            },
            set distanceModel (value){
                pannerNode.distanceModel = value;
            },
            get inputs () {
                return [
                    inputGainNode
                ];
            },
            get maxDistance () {
                return pannerNode.maxDistance;
            },
            set maxDistance (value){
                // Bug #128: Safari does not throw an error yet.
                if (value < 0) {
                    throw new RangeError();
                }
                pannerNode.maxDistance = value;
            },
            get numberOfInputs () {
                return pannerNode.numberOfInputs;
            },
            get numberOfOutputs () {
                return pannerNode.numberOfOutputs;
            },
            get orientationX () {
                return orientationXGainNode.gain;
            },
            get orientationY () {
                return orientationYGainNode.gain;
            },
            get orientationZ () {
                return orientationZGainNode.gain;
            },
            get panningModel () {
                return pannerNode.panningModel;
            },
            set panningModel (value){
                pannerNode.panningModel = value;
            },
            get positionX () {
                return positionXGainNode.gain;
            },
            get positionY () {
                return positionYGainNode.gain;
            },
            get positionZ () {
                return positionZGainNode.gain;
            },
            get refDistance () {
                return pannerNode.refDistance;
            },
            set refDistance (value){
                // Bug #129: Safari does not throw an error yet.
                if (value < 0) {
                    throw new RangeError();
                }
                pannerNode.refDistance = value;
            },
            get rolloffFactor () {
                return pannerNode.rolloffFactor;
            },
            set rolloffFactor (value){
                // Bug #130: Safari does not throw an error yet.
                if (value < 0) {
                    throw new RangeError();
                }
                pannerNode.rolloffFactor = value;
            },
            addEventListener (...args) {
                return inputGainNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent (...args) {
                return inputGainNode.dispatchEvent(args[0]);
            },
            removeEventListener (...args) {
                return inputGainNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {
            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;
        }
        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {
            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;
        }
        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {
            nativePannerNodeFaker.coneOuterGain = coneOuterGain;
        }
        if (distanceModel !== nativePannerNodeFaker.distanceModel) {
            nativePannerNodeFaker.distanceModel = distanceModel;
        }
        if (maxDistance !== nativePannerNodeFaker.maxDistance) {
            nativePannerNodeFaker.maxDistance = maxDistance;
        }
        if (orientationX !== nativePannerNodeFaker.orientationX.value) {
            nativePannerNodeFaker.orientationX.value = orientationX;
        }
        if (orientationY !== nativePannerNodeFaker.orientationY.value) {
            nativePannerNodeFaker.orientationY.value = orientationY;
        }
        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {
            nativePannerNodeFaker.orientationZ.value = orientationZ;
        }
        if (panningModel !== nativePannerNodeFaker.panningModel) {
            nativePannerNodeFaker.panningModel = panningModel;
        }
        if (positionX !== nativePannerNodeFaker.positionX.value) {
            nativePannerNodeFaker.positionX.value = positionX;
        }
        if (positionY !== nativePannerNodeFaker.positionY.value) {
            nativePannerNodeFaker.positionY.value = positionY;
        }
        if (positionZ !== nativePannerNodeFaker.positionZ.value) {
            nativePannerNodeFaker.positionZ.value = positionZ;
        }
        if (refDistance !== nativePannerNodeFaker.refDistance) {
            nativePannerNodeFaker.refDistance = refDistance;
        }
        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {
            nativePannerNodeFaker.rolloffFactor = rolloffFactor;
        }
        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {
            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation
        }
        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {
            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation
        }
        const whenConnected = ()=>{
            inputGainNode.connect(pannerNode);
            // Bug #119: Safari does not fully support the WaveShaperNode.
            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
            waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);
            waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);
            waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);
            waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);
            waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);
            waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);
            channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);
        };
        const whenDisconnected = ()=>{
            inputGainNode.disconnect(pannerNode);
            // Bug #119: Safari does not fully support the WaveShaperNode.
            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
            waveShaperNode.disconnect(orientationXGainNode);
            orientationXGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(orientationYGainNode);
            orientationYGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(orientationZGainNode);
            orientationZGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(positionXGainNode);
            positionXGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(positionYGainNode);
            positionYGainNode.disconnect(channelMergerNode);
            waveShaperNode.disconnect(positionZGainNode);
            positionZGainNode.disconnect(channelMergerNode);
            channelMergerNode.disconnect(scriptProcessorNode);
            scriptProcessorNode.disconnect(nativeContext.destination);
        };
        return monitorConnections((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["interceptConnections"])(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);
    };
}; //# sourceMappingURL=native-panner-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativePeriodicWaveFactory": (()=>createNativePeriodicWaveFactory)
});
const createNativePeriodicWaveFactory = (createIndexSizeError)=>{
    return (nativeContext, { disableNormalization, imag, real })=>{
        // Bug #180: Safari does not allow to use ordinary arrays.
        const convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);
        const convertedReal = real instanceof Float32Array ? real : new Float32Array(real);
        const nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, {
            disableNormalization
        });
        // Bug #181: Safari does not throw an IndexSizeError so far if the given arrays have less than two values.
        if (Array.from(imag).length < 2) {
            throw createIndexSizeError();
        }
        return nativePeriodicWave;
    };
}; //# sourceMappingURL=native-periodic-wave-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeScriptProcessorNode": (()=>createNativeScriptProcessorNode)
});
const createNativeScriptProcessorNode = (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels)=>{
    return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels); // tslint:disable-line deprecation
}; //# sourceMappingURL=native-script-processor-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeStereoPannerNodeFactory": (()=>createNativeStereoPannerNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
const createNativeStereoPannerNodeFactory = (createNativeStereoPannerNodeFaker, createNotSupportedError)=>{
    return (nativeContext, options)=>{
        const channelCountMode = options.channelCountMode;
        /*
         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
         * which supports it and therefore it can't be supported at all.
         */ if (channelCountMode === 'clamped-max') {
            throw createNotSupportedError();
        }
        // Bug #105: Safari does not support the StereoPannerNode.
        if (nativeContext.createStereoPanner === undefined) {
            return createNativeStereoPannerNodeFaker(nativeContext, options);
        }
        const nativeStereoPannerNode = nativeContext.createStereoPanner();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeStereoPannerNode, options);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$audio$2d$param$2d$value$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeAudioParamValue"])(nativeStereoPannerNode, options, 'pan');
        /*
         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
         * which supports it and therefore it can't be supported at all.
         */ Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {
            get: ()=>channelCountMode,
            set: (value)=>{
                if (value !== channelCountMode) {
                    throw createNotSupportedError();
                }
            }
        });
        return nativeStereoPannerNode;
    };
}; //# sourceMappingURL=native-stereo-panner-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeStereoPannerNodeFakerFactory": (()=>createNativeStereoPannerNodeFakerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js [app-client] (ecmascript)");
;
const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections)=>{
    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.
    const CURVE_SIZE = 16385;
    const DC_CURVE = new Float32Array([
        1,
        1
    ]);
    const HALF_PI = Math.PI / 2;
    const SINGLE_CHANNEL_OPTIONS = {
        channelCount: 1,
        channelCountMode: 'explicit',
        channelInterpretation: 'discrete'
    };
    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = {
        ...SINGLE_CHANNEL_OPTIONS,
        oversample: 'none'
    };
    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode)=>{
        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);
        for(let i = 0; i < CURVE_SIZE; i += 1){
            const x = i / (CURVE_SIZE - 1) * HALF_PI;
            leftWaveShaperCurve[i] = Math.cos(x);
            rightWaveShaperCurve[i] = Math.sin(x);
        }
        const leftGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: leftWaveShaperCurve
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: DC_CURVE
        });
        const rightGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: rightWaveShaperCurve
        });
        return {
            connectGraph () {
                inputGainNode.connect(leftGainNode);
                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                inputGainNode.connect(rightGainNode);
                panWaveShaperNode.connect(panGainNode);
                panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
                panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
                leftWaveShaperNode.connect(leftGainNode.gain);
                rightWaveShaperNode.connect(rightGainNode.gain);
                leftGainNode.connect(channelMergerNode, 0, 0);
                rightGainNode.connect(channelMergerNode, 0, 1);
            },
            disconnectGraph () {
                inputGainNode.disconnect(leftGainNode);
                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                inputGainNode.disconnect(rightGainNode);
                panWaveShaperNode.disconnect(panGainNode);
                panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);
                panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);
                leftWaveShaperNode.disconnect(leftGainNode.gain);
                rightWaveShaperNode.disconnect(rightGainNode.gain);
                leftGainNode.disconnect(channelMergerNode, 0, 0);
                rightGainNode.disconnect(channelMergerNode, 0, 1);
            }
        };
    };
    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode)=>{
        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
        const centerIndex = Math.floor(CURVE_SIZE / 2);
        for(let i = 0; i < CURVE_SIZE; i += 1){
            if (i > centerIndex) {
                const x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
                rightInputForLeftOutputWaveShaperCurve[i] = 0;
                rightInputForRightOutputWaveShaperCurve[i] = 1;
            } else {
                const x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
                leftInputForLeftOutputWaveShaperCurve[i] = 1;
                leftInputForRightOutputWaveShaperCurve[i] = 0;
                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
            }
        }
        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
            channelCount: 2,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            numberOfOutputs: 2
        });
        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: leftInputForLeftOutputWaveShaperCurve
        });
        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: leftInputForRightOutputWaveShaperCurve
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: DC_CURVE
        });
        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: rightInputForLeftOutputWaveShaperCurve
        });
        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, {
            ...SINGLE_CHANNEL_OPTIONS,
            gain: 0
        });
        // Bug #119: Safari does not fully support the WaveShaperNode.
        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {
            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
            curve: rightInputForRightOutputWaveShaperCurve
        });
        return {
            connectGraph () {
                inputGainNode.connect(channelSplitterNode);
                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);
                channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);
                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);
                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);
                panWaveShaperNode.connect(panGainNode);
                panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);
                panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);
                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);
                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);
                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);
                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);
                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
            },
            disconnectGraph () {
                inputGainNode.disconnect(channelSplitterNode);
                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);
                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);
                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);
                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);
                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);
                panWaveShaperNode.disconnect(panGainNode);
                panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined ? leftInputForLeftOutputWaveShaperNode : leftInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined ? leftInputForRightOutputWaveShaperNode : leftInputForRightOutputWaveShaperNode.inputs[0]);
                panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined ? rightInputForLeftOutputWaveShaperNode : rightInputForLeftOutputWaveShaperNode.inputs[0]);
                panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined ? rightInputForRightOutputWaveShaperNode : rightInputForRightOutputWaveShaperNode.inputs[0]);
                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);
                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);
                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);
                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);
                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
            }
        };
    };
    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode)=>{
        if (channelCount === 1) {
            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);
        }
        if (channelCount === 2) {
            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);
        }
        throw createNotSupportedError();
    };
    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions })=>{
        if (channelCountMode === 'max') {
            throw createNotSupportedError();
        }
        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
            ...audioNodeOptions,
            channelCount: 1,
            channelCountMode,
            numberOfInputs: 2
        });
        const inputGainNode = createNativeGainNode(nativeContext, {
            ...audioNodeOptions,
            channelCount,
            channelCountMode,
            gain: 1
        });
        const panGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: pan
        });
        let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);
        Object.defineProperty(panGainNode.gain, 'defaultValue', {
            get: ()=>0
        });
        Object.defineProperty(panGainNode.gain, 'maxValue', {
            get: ()=>1
        });
        Object.defineProperty(panGainNode.gain, 'minValue', {
            get: ()=>-1
        });
        const nativeStereoPannerNodeFakerFactory = {
            get bufferSize () {
                return undefined;
            },
            get channelCount () {
                return inputGainNode.channelCount;
            },
            set channelCount (value){
                if (inputGainNode.channelCount !== value) {
                    if (isConnected) {
                        disconnectGraph();
                    }
                    ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));
                    if (isConnected) {
                        connectGraph();
                    }
                }
                inputGainNode.channelCount = value;
            },
            get channelCountMode () {
                return inputGainNode.channelCountMode;
            },
            set channelCountMode (value){
                if (value === 'clamped-max' || value === 'max') {
                    throw createNotSupportedError();
                }
                inputGainNode.channelCountMode = value;
            },
            get channelInterpretation () {
                return inputGainNode.channelInterpretation;
            },
            set channelInterpretation (value){
                inputGainNode.channelInterpretation = value;
            },
            get context () {
                return inputGainNode.context;
            },
            get inputs () {
                return [
                    inputGainNode
                ];
            },
            get numberOfInputs () {
                return inputGainNode.numberOfInputs;
            },
            get numberOfOutputs () {
                return inputGainNode.numberOfOutputs;
            },
            get pan () {
                return panGainNode.gain;
            },
            addEventListener (...args) {
                return inputGainNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent (...args) {
                return inputGainNode.dispatchEvent(args[0]);
            },
            removeEventListener (...args) {
                return inputGainNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        let isConnected = false;
        const whenConnected = ()=>{
            connectGraph();
            isConnected = true;
        };
        const whenDisconnected = ()=>{
            disconnectGraph();
            isConnected = false;
        };
        return monitorConnections((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["interceptConnections"])(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);
    };
}; //# sourceMappingURL=native-stereo-panner-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeWaveShaperNodeFactory": (()=>createNativeWaveShaperNodeFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
;
;
const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors)=>{
    return (nativeContext, options)=>{
        const nativeWaveShaperNode = nativeContext.createWaveShaper();
        /*
         * Bug #119: Safari does not correctly map the values.
         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of
         * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround
         * isn't necessary anymore since v14.0.2 of Safari.
         */ if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext' && nativeContext.createGain().gain.automationRate === undefined) {
            return createNativeWaveShaperNodeFaker(nativeContext, options);
        }
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(nativeWaveShaperNode, options);
        const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);
        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.
        if (curve !== null && curve.length < 2) {
            throw createInvalidStateError();
        }
        // Only values of type Float32Array can be assigned to the curve property.
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeWaveShaperNode, {
            curve
        }, 'curve');
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$option$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOption"])(nativeWaveShaperNode, options, 'oversample');
        let disconnectNativeAudioBufferSourceNode = null;
        let isConnected = false;
        overwriteAccessors(nativeWaveShaperNode, 'curve', (get)=>()=>get.call(nativeWaveShaperNode), (set)=>(value)=>{
                set.call(nativeWaveShaperNode, value);
                if (isConnected) {
                    if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {
                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
                    } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {
                        disconnectNativeAudioBufferSourceNode();
                        disconnectNativeAudioBufferSourceNode = null;
                    }
                }
                return value;
            });
        const whenConnected = ()=>{
            isConnected = true;
            if (isDCCurve(nativeWaveShaperNode.curve)) {
                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
            }
        };
        const whenDisconnected = ()=>{
            isConnected = false;
            if (disconnectNativeAudioBufferSourceNode !== null) {
                disconnectNativeAudioBufferSourceNode();
                disconnectNativeAudioBufferSourceNode = null;
            }
        };
        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);
    };
}; //# sourceMappingURL=native-wave-shaper-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNativeWaveShaperNodeFakerFactory": (()=>createNativeWaveShaperNodeFakerFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js [app-client] (ecmascript)");
;
;
const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections)=>{
    return (nativeContext, { curve, oversample, ...audioNodeOptions })=>{
        const negativeWaveShaperNode = nativeContext.createWaveShaper();
        const positiveWaveShaperNode = nativeContext.createWaveShaper();
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(negativeWaveShaperNode, audioNodeOptions);
        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$assign$2d$native$2d$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["assignNativeAudioNodeOptions"])(positiveWaveShaperNode, audioNodeOptions);
        const inputGainNode = createNativeGainNode(nativeContext, {
            ...audioNodeOptions,
            gain: 1
        });
        const invertGainNode = createNativeGainNode(nativeContext, {
            ...audioNodeOptions,
            gain: -1
        });
        const outputGainNode = createNativeGainNode(nativeContext, {
            ...audioNodeOptions,
            gain: 1
        });
        const revertGainNode = createNativeGainNode(nativeContext, {
            ...audioNodeOptions,
            gain: -1
        });
        let disconnectNativeAudioBufferSourceNode = null;
        let isConnected = false;
        let unmodifiedCurve = null;
        const nativeWaveShaperNodeFaker = {
            get bufferSize () {
                return undefined;
            },
            get channelCount () {
                return negativeWaveShaperNode.channelCount;
            },
            set channelCount (value){
                inputGainNode.channelCount = value;
                invertGainNode.channelCount = value;
                negativeWaveShaperNode.channelCount = value;
                outputGainNode.channelCount = value;
                positiveWaveShaperNode.channelCount = value;
                revertGainNode.channelCount = value;
            },
            get channelCountMode () {
                return negativeWaveShaperNode.channelCountMode;
            },
            set channelCountMode (value){
                inputGainNode.channelCountMode = value;
                invertGainNode.channelCountMode = value;
                negativeWaveShaperNode.channelCountMode = value;
                outputGainNode.channelCountMode = value;
                positiveWaveShaperNode.channelCountMode = value;
                revertGainNode.channelCountMode = value;
            },
            get channelInterpretation () {
                return negativeWaveShaperNode.channelInterpretation;
            },
            set channelInterpretation (value){
                inputGainNode.channelInterpretation = value;
                invertGainNode.channelInterpretation = value;
                negativeWaveShaperNode.channelInterpretation = value;
                outputGainNode.channelInterpretation = value;
                positiveWaveShaperNode.channelInterpretation = value;
                revertGainNode.channelInterpretation = value;
            },
            get context () {
                return negativeWaveShaperNode.context;
            },
            get curve () {
                return unmodifiedCurve;
            },
            set curve (value){
                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
                if (value !== null && value.length < 2) {
                    throw createInvalidStateError();
                }
                if (value === null) {
                    negativeWaveShaperNode.curve = value;
                    positiveWaveShaperNode.curve = value;
                } else {
                    const curveLength = value.length;
                    const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);
                    const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);
                    negativeCurve[0] = value[0];
                    positiveCurve[0] = -value[curveLength - 1];
                    const length = Math.ceil((curveLength + 1) / 2);
                    const centerIndex = (curveLength + 1) / 2 - 1;
                    for(let i = 1; i < length; i += 1){
                        const theoreticIndex = i / length * centerIndex;
                        const lowerIndex = Math.floor(theoreticIndex);
                        const upperIndex = Math.ceil(theoreticIndex);
                        negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];
                        positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];
                    }
                    negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;
                    negativeWaveShaperNode.curve = negativeCurve;
                    positiveWaveShaperNode.curve = positiveCurve;
                }
                unmodifiedCurve = value;
                if (isConnected) {
                    if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {
                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
                    } else if (disconnectNativeAudioBufferSourceNode !== null) {
                        disconnectNativeAudioBufferSourceNode();
                        disconnectNativeAudioBufferSourceNode = null;
                    }
                }
            },
            get inputs () {
                return [
                    inputGainNode
                ];
            },
            get numberOfInputs () {
                return negativeWaveShaperNode.numberOfInputs;
            },
            get numberOfOutputs () {
                return negativeWaveShaperNode.numberOfOutputs;
            },
            get oversample () {
                return negativeWaveShaperNode.oversample;
            },
            set oversample (value){
                negativeWaveShaperNode.oversample = value;
                positiveWaveShaperNode.oversample = value;
            },
            addEventListener (...args) {
                return inputGainNode.addEventListener(args[0], args[1], args[2]);
            },
            dispatchEvent (...args) {
                return inputGainNode.dispatchEvent(args[0]);
            },
            removeEventListener (...args) {
                return inputGainNode.removeEventListener(args[0], args[1], args[2]);
            }
        };
        if (curve !== null) {
            // Only values of type Float32Array can be assigned to the curve property.
            nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);
        }
        if (oversample !== nativeWaveShaperNodeFaker.oversample) {
            nativeWaveShaperNodeFaker.oversample = oversample;
        }
        const whenConnected = ()=>{
            inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);
            inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);
            isConnected = true;
            if (isDCCurve(unmodifiedCurve)) {
                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
            }
        };
        const whenDisconnected = ()=>{
            inputGainNode.disconnect(negativeWaveShaperNode);
            negativeWaveShaperNode.disconnect(outputGainNode);
            inputGainNode.disconnect(invertGainNode);
            invertGainNode.disconnect(positiveWaveShaperNode);
            positiveWaveShaperNode.disconnect(revertGainNode);
            revertGainNode.disconnect(outputGainNode);
            isConnected = false;
            if (disconnectNativeAudioBufferSourceNode !== null) {
                disconnectNativeAudioBufferSourceNode();
                disconnectNativeAudioBufferSourceNode = null;
            }
        };
        return monitorConnections((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["interceptConnections"])(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);
    };
}; //# sourceMappingURL=native-wave-shaper-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createNotSupportedError": (()=>createNotSupportedError)
});
const createNotSupportedError = ()=>new DOMException('', 'NotSupportedError'); //# sourceMappingURL=not-supported-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createOfflineAudioContextConstructor": (()=>createOfflineAudioContextConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js [app-client] (ecmascript)");
;
;
const DEFAULT_OPTIONS = {
    numberOfChannels: 1
};
const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering)=>{
    return class OfflineAudioContext extends baseAudioContextConstructor {
        constructor(a, b, c){
            let options;
            if (typeof a === 'number' && b !== undefined && c !== undefined) {
                options = {
                    length: b,
                    numberOfChannels: a,
                    sampleRate: c
                };
            } else if (typeof a === 'object') {
                options = a;
            } else {
                throw new Error('The given parameters are not valid.');
            }
            const { length, numberOfChannels, sampleRate } = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);
            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.
            if (!cacheTestResult(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testPromiseSupport"], ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testPromiseSupport"])(nativeOfflineAudioContext))) {
                nativeOfflineAudioContext.addEventListener('statechange', (()=>{
                    let i = 0;
                    const delayStateChangeEvent = (event)=>{
                        if (this._state === 'running') {
                            if (i > 0) {
                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                                event.stopImmediatePropagation();
                                this._waitForThePromiseToSettle(event);
                            } else {
                                i += 1;
                            }
                        }
                    };
                    return delayStateChangeEvent;
                })());
            }
            super(nativeOfflineAudioContext, numberOfChannels);
            this._length = length;
            this._nativeOfflineAudioContext = nativeOfflineAudioContext;
            this._state = null;
        }
        get length() {
            // Bug #17: Safari does not yet expose the length.
            if (this._nativeOfflineAudioContext.length === undefined) {
                return this._length;
            }
            return this._nativeOfflineAudioContext.length;
        }
        get state() {
            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
        }
        startRendering() {
            /*
             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
             * the state of the nativeOfflineAudioContext might no transition to running immediately.
             */ if (this._state === 'running') {
                return Promise.reject(createInvalidStateError());
            }
            this._state = 'running';
            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(()=>{
                this._state = null;
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$deactivate$2d$audio$2d$graph$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["deactivateAudioGraph"])(this);
            });
        }
        _waitForThePromiseToSettle(event) {
            if (this._state === null) {
                this._nativeOfflineAudioContext.dispatchEvent(event);
            } else {
                setTimeout(()=>this._waitForThePromiseToSettle(event));
            }
        }
    };
}; //# sourceMappingURL=offline-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createOscillatorNodeConstructor": (()=>createOscillatorNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js [app-client] (ecmascript)");
;
;
;
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    detune: 0,
    frequency: 440,
    periodicWave: undefined,
    type: 'sine'
};
const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener)=>{
    return class OscillatorNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;
            const nyquist = context.sampleRate / 2;
            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);
            // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.
            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);
            // Bug #76: Safari does not export the correct values for maxValue and minValue.
            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);
            this._nativeOscillatorNode = nativeOscillatorNode;
            this._onended = null;
            this._oscillatorNodeRenderer = oscillatorNodeRenderer;
            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {
                this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;
            }
        }
        get detune() {
            return this._detune;
        }
        get frequency() {
            return this._frequency;
        }
        get onended() {
            return this._onended;
        }
        set onended(value) {
            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
            this._nativeOscillatorNode.onended = wrappedListener;
            const nativeOnEnded = this._nativeOscillatorNode.onended;
            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
        }
        get type() {
            return this._nativeOscillatorNode.type;
        }
        set type(value) {
            this._nativeOscillatorNode.type = value;
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.periodicWave = null;
            }
        }
        setPeriodicWave(periodicWave) {
            this._nativeOscillatorNode.setPeriodicWave(periodicWave);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.periodicWave = periodicWave;
            }
        }
        start(when = 0) {
            this._nativeOscillatorNode.start(when);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.start = when;
            }
            if (this.context.state !== 'closed') {
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$active$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToActive"])(this);
                const resetInternalStateToPassive = ()=>{
                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);
                    if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"])(this)) {
                        (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$internal$2d$state$2d$to$2d$passive$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setInternalStateToPassive"])(this);
                    }
                };
                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);
            }
        }
        stop(when = 0) {
            this._nativeOscillatorNode.stop(when);
            if (this._oscillatorNodeRenderer !== null) {
                this._oscillatorNodeRenderer.stop = when;
            }
        }
    };
}; //# sourceMappingURL=oscillator-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createOscillatorNodeRendererFactory": (()=>createOscillatorNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeOscillatorNodes = new WeakMap();
        let periodicWave = null;
        let start = null;
        let stop = null;
        const createOscillatorNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeOscillatorNode = getNativeAudioNode(proxy);
            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeOscillatorNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeOscillatorNode, nativeOfflineAudioContext);
            if (!nativeOscillatorNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeOscillatorNode.channelCount,
                    channelCountMode: nativeOscillatorNode.channelCountMode,
                    channelInterpretation: nativeOscillatorNode.channelInterpretation,
                    detune: nativeOscillatorNode.detune.value,
                    frequency: nativeOscillatorNode.frequency.value,
                    periodicWave: periodicWave === null ? undefined : periodicWave,
                    type: nativeOscillatorNode.type
                };
                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);
                if (start !== null) {
                    nativeOscillatorNode.start(start);
                }
                if (stop !== null) {
                    nativeOscillatorNode.stop(stop);
                }
            }
            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);
            if (!nativeOscillatorNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);
                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);
                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);
            }
            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);
            return nativeOscillatorNode;
        };
        return {
            set periodicWave (value){
                periodicWave = value;
            },
            set start (value){
                start = value;
            },
            set stop (value){
                stop = value;
            },
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);
                if (renderedNativeOscillatorNode !== undefined) {
                    return Promise.resolve(renderedNativeOscillatorNode);
                }
                return createOscillatorNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=oscillator-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createPannerNodeConstructor": (()=>createPannerNodeConstructor)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/constants.js [app-client] (ecmascript)");
;
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'clamped-max',
    channelInterpretation: 'speakers',
    coneInnerAngle: 360,
    coneOuterAngle: 360,
    coneOuterGain: 0,
    distanceModel: 'inverse',
    maxDistance: 10000,
    orientationX: 1,
    orientationY: 0,
    orientationZ: 0,
    panningModel: 'equalpower',
    positionX: 0,
    positionY: 0,
    positionZ: 0,
    refDistance: 1,
    rolloffFactor: 1
};
const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime)=>{
    return class PannerNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;
            super(context, false, nativePannerNode, pannerNodeRenderer);
            this._nativePannerNode = nativePannerNode;
            // Bug #74: Safari does not export the correct values for maxValue and minValue.
            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_POSITIVE_SINGLE_FLOAT"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$constants$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["MOST_NEGATIVE_SINGLE_FLOAT"]);
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        get coneInnerAngle() {
            return this._nativePannerNode.coneInnerAngle;
        }
        set coneInnerAngle(value) {
            this._nativePannerNode.coneInnerAngle = value;
        }
        get coneOuterAngle() {
            return this._nativePannerNode.coneOuterAngle;
        }
        set coneOuterAngle(value) {
            this._nativePannerNode.coneOuterAngle = value;
        }
        get coneOuterGain() {
            return this._nativePannerNode.coneOuterGain;
        }
        set coneOuterGain(value) {
            this._nativePannerNode.coneOuterGain = value;
        }
        get distanceModel() {
            return this._nativePannerNode.distanceModel;
        }
        set distanceModel(value) {
            this._nativePannerNode.distanceModel = value;
        }
        get maxDistance() {
            return this._nativePannerNode.maxDistance;
        }
        set maxDistance(value) {
            this._nativePannerNode.maxDistance = value;
        }
        get orientationX() {
            return this._orientationX;
        }
        get orientationY() {
            return this._orientationY;
        }
        get orientationZ() {
            return this._orientationZ;
        }
        get panningModel() {
            return this._nativePannerNode.panningModel;
        }
        set panningModel(value) {
            this._nativePannerNode.panningModel = value;
        }
        get positionX() {
            return this._positionX;
        }
        get positionY() {
            return this._positionY;
        }
        get positionZ() {
            return this._positionZ;
        }
        get refDistance() {
            return this._nativePannerNode.refDistance;
        }
        set refDistance(value) {
            this._nativePannerNode.refDistance = value;
        }
        get rolloffFactor() {
            return this._nativePannerNode.rolloffFactor;
        }
        set rolloffFactor(value) {
            this._nativePannerNode.rolloffFactor = value;
        }
    };
}; //# sourceMappingURL=panner-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createPannerNodeRendererFactory": (()=>createPannerNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
;
const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext)=>{
    return ()=>{
        const renderedNativeAudioNodes = new WeakMap();
        let renderedBufferPromise = null;
        const createAudioNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeGainNode = null;
            let nativePannerNode = getNativeAudioNode(proxy);
            const commonAudioNodeOptions = {
                channelCount: nativePannerNode.channelCount,
                channelCountMode: nativePannerNode.channelCountMode,
                channelInterpretation: nativePannerNode.channelInterpretation
            };
            const commonNativePannerNodeOptions = {
                ...commonAudioNodeOptions,
                coneInnerAngle: nativePannerNode.coneInnerAngle,
                coneOuterAngle: nativePannerNode.coneOuterAngle,
                coneOuterGain: nativePannerNode.coneOuterGain,
                distanceModel: nativePannerNode.distanceModel,
                maxDistance: nativePannerNode.maxDistance,
                panningModel: nativePannerNode.panningModel,
                refDistance: nativePannerNode.refDistance,
                rolloffFactor: nativePannerNode.rolloffFactor
            };
            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativePannerNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativePannerNode, nativeOfflineAudioContext);
            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.
            if ('bufferSize' in nativePannerNode) {
                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, {
                    ...commonAudioNodeOptions,
                    gain: 1
                });
            } else if (!nativePannerNodeIsOwnedByContext) {
                const options = {
                    ...commonNativePannerNodeOptions,
                    orientationX: nativePannerNode.orientationX.value,
                    orientationY: nativePannerNode.orientationY.value,
                    orientationZ: nativePannerNode.orientationZ.value,
                    positionX: nativePannerNode.positionX.value,
                    positionY: nativePannerNode.positionY.value,
                    positionZ: nativePannerNode.positionZ.value
                };
                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);
            }
            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);
            if (nativeGainNode !== null) {
                if (renderedBufferPromise === null) {
                    if (nativeOfflineAudioContextConstructor === null) {
                        throw new Error('Missing the native OfflineAudioContext constructor.');
                    }
                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.
                    proxy.context.length, nativeOfflineAudioContext.sampleRate);
                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
                        channelCount: 1,
                        channelCountMode: 'explicit',
                        channelInterpretation: 'speakers',
                        numberOfInputs: 6
                    });
                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);
                    renderedBufferPromise = (async ()=>{
                        const nativeConstantSourceNodes = await Promise.all([
                            proxy.orientationX,
                            proxy.orientationY,
                            proxy.orientationZ,
                            proxy.positionX,
                            proxy.positionY,
                            proxy.positionZ
                        ].map(async (audioParam, index)=>{
                            const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                                channelCount: 1,
                                channelCountMode: 'explicit',
                                channelInterpretation: 'discrete',
                                offset: index === 0 ? 1 : 0
                            });
                            await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);
                            return nativeConstantSourceNode;
                        }));
                        for(let i = 0; i < 6; i += 1){
                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);
                            nativeConstantSourceNodes[i].start(0);
                        }
                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);
                    })();
                }
                const renderedBuffer = await renderedBufferPromise;
                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, {
                    ...commonAudioNodeOptions,
                    gain: 1
                });
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);
                const channelDatas = [];
                for(let i = 0; i < renderedBuffer.numberOfChannels; i += 1){
                    channelDatas.push(renderedBuffer.getChannelData(i));
                }
                let lastOrientation = [
                    channelDatas[0][0],
                    channelDatas[1][0],
                    channelDatas[2][0]
                ];
                let lastPosition = [
                    channelDatas[3][0],
                    channelDatas[4][0],
                    channelDatas[5][0]
                ];
                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, {
                    ...commonAudioNodeOptions,
                    gain: 1
                });
                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {
                    ...commonNativePannerNodeOptions,
                    orientationX: lastOrientation[0],
                    orientationY: lastOrientation[1],
                    orientationZ: lastOrientation[2],
                    positionX: lastPosition[0],
                    positionY: lastPosition[1],
                    positionZ: lastPosition[2]
                });
                inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
                partialPannerNode.connect(nativeGainNode);
                for(let i = 128; i < renderedBuffer.length; i += 128){
                    const orientation = [
                        channelDatas[0][i],
                        channelDatas[1][i],
                        channelDatas[2][i]
                    ];
                    const positon = [
                        channelDatas[3][i],
                        channelDatas[4][i],
                        channelDatas[5][i]
                    ];
                    if (orientation.some((value, index)=>value !== lastOrientation[index]) || positon.some((value, index)=>value !== lastPosition[index])) {
                        lastOrientation = orientation;
                        lastPosition = positon;
                        const currentTime = i / nativeOfflineAudioContext.sampleRate;
                        gateGainNode.gain.setValueAtTime(0, currentTime);
                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, {
                            ...commonAudioNodeOptions,
                            gain: 0
                        });
                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {
                            ...commonNativePannerNodeOptions,
                            orientationX: lastOrientation[0],
                            orientationY: lastOrientation[1],
                            orientationZ: lastOrientation[2],
                            positionX: lastPosition[0],
                            positionY: lastPosition[1],
                            positionZ: lastPosition[2]
                        });
                        gateGainNode.gain.setValueAtTime(1, currentTime);
                        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
                        partialPannerNode.connect(nativeGainNode);
                    }
                }
                return nativeGainNode;
            }
            if (!nativePannerNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);
                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);
                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);
                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);
                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);
                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);
                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);
                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);
                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);
                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);
                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNodeFaker"])(nativePannerNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);
            } else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);
            }
            return nativePannerNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);
                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {
                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);
                }
                return createAudioNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=panner-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createPeriodicWaveConstructor": (()=>createPeriodicWaveConstructor)
});
const DEFAULT_OPTIONS = {
    disableNormalization: false
};
const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore, sanitizePeriodicWaveOptions)=>{
    return class PeriodicWave {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = sanitizePeriodicWaveOptions({
                ...DEFAULT_OPTIONS,
                ...options
            });
            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);
            periodicWaveStore.add(periodicWave);
            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.
            return periodicWave;
        }
        static [Symbol.hasInstance](instance) {
            return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);
        }
    };
}; //# sourceMappingURL=periodic-wave-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/render-automation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRenderAutomation": (()=>createRenderAutomation)
});
const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam)=>{
    return (nativeOfflineAudioContext, audioParam, nativeAudioParam)=>{
        const audioParamRenderer = getAudioParamRenderer(audioParam);
        audioParamRenderer.replay(nativeAudioParam);
        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);
    };
}; //# sourceMappingURL=render-automation.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRenderInputsOfAudioNode": (()=>createRenderInputsOfAudioNode)
});
const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle)=>{
    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode)=>{
        const audioNodeConnections = getAudioNodeConnections(audioNode);
        await Promise.all(audioNodeConnections.activeInputs.map((connections, input)=>Array.from(connections).map(async ([source, output])=>{
                const audioNodeRenderer = getAudioNodeRenderer(source);
                const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);
                const destination = audioNode.context.destination;
                if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {
                    renderedNativeAudioNode.connect(nativeAudioNode, output, input);
                }
            })).reduce((allRenderingPromises, renderingPromises)=>[
                ...allRenderingPromises,
                ...renderingPromises
            ], []));
    };
}; //# sourceMappingURL=render-inputs-of-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRenderInputsOfAudioParam": (()=>createRenderInputsOfAudioParam)
});
const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle)=>{
    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam)=>{
        const audioParamConnections = getAudioParamConnections(audioParam);
        await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output])=>{
            const audioNodeRenderer = getAudioNodeRenderer(source);
            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);
            if (!isPartOfACycle(source)) {
                renderedNativeAudioNode.connect(nativeAudioParam, output);
            }
        }));
    };
}; //# sourceMappingURL=render-inputs-of-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createRenderNativeOfflineAudioContext": (()=>createRenderNativeOfflineAudioContext)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js [app-client] (ecmascript)");
;
const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport)=>{
    return (nativeOfflineAudioContext)=>{
        // Bug #21: Safari does not support promises yet.
        if (cacheTestResult(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testPromiseSupport"], ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testPromiseSupport"])(nativeOfflineAudioContext))) {
            // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.
            return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then((isOfflineAudioContextCurrentTimeSupported)=>{
                if (!isOfflineAudioContextCurrentTimeSupported) {
                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);
                    nativeOfflineAudioContext.oncomplete = ()=>{
                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation
                        scriptProcessorNode.disconnect();
                    };
                    scriptProcessorNode.onaudioprocess = ()=>nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation
                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);
                }
                return nativeOfflineAudioContext.startRendering();
            });
        }
        return new Promise((resolve)=>{
            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.
            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                gain: 0
            });
            nativeOfflineAudioContext.oncomplete = (event)=>{
                gainNode.disconnect();
                resolve(event.renderedBuffer);
            };
            gainNode.connect(nativeOfflineAudioContext.destination);
            nativeOfflineAudioContext.startRendering();
        });
    };
}; //# sourceMappingURL=render-native-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetActiveAudioWorkletNodeInputs": (()=>createSetActiveAudioWorkletNodeInputs)
});
const createSetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore)=>{
    return (nativeAudioWorkletNode, activeInputs)=>{
        activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode, activeInputs);
    };
}; //# sourceMappingURL=set-active-audio-worklet-node-inputs.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createSetAudioNodeTailTime": (()=>createSetAudioNodeTailTime)
});
const createSetAudioNodeTailTime = (audioNodeTailTimeStore)=>{
    return (audioNode, tailTime)=>audioNodeTailTimeStore.set(audioNode, tailTime);
}; //# sourceMappingURL=set-audio-node-tail-time.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createStartRendering": (()=>createStartRendering)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$get$2d$channel$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js [app-client] (ecmascript)");
;
const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds)=>{
    return (destination, nativeOfflineAudioContext)=>getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext)/*
         * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the
         * destination.
         */ .then(()=>Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode)=>getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext)))).then(()=>renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then((audioBuffer)=>{
            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
            if (typeof audioBuffer.copyFromChannel !== 'function') {
                wrapAudioBufferCopyChannelMethods(audioBuffer);
                (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$get$2d$channel$2d$data$2d$method$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioBufferGetChannelDataMethod"])(audioBuffer);
            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.
            } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, ()=>testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
            }
            audioBufferStore.add(audioBuffer);
            return audioBuffer;
        });
}; //# sourceMappingURL=start-rendering.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createStereoPannerNodeConstructor": (()=>createStereoPannerNodeConstructor)
});
const DEFAULT_OPTIONS = {
    channelCount: 2,
    /*
     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent
     * behavior.
     */ channelCountMode: 'explicit',
    channelInterpretation: 'speakers',
    pan: 0
};
const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext)=>{
    return class StereoPannerNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;
            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);
            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);
        }
        get pan() {
            return this._pan;
        }
    };
}; //# sourceMappingURL=stereo-panner-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createStereoPannerNodeRendererFactory": (()=>createStereoPannerNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
;
const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeStereoPannerNodes = new WeakMap();
        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeStereoPannerNode = getNativeAudioNode(proxy);
            /*
             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created
             * again.
             */ const nativeStereoPannerNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeStereoPannerNode, nativeOfflineAudioContext);
            if (!nativeStereoPannerNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeStereoPannerNode.channelCount,
                    channelCountMode: nativeStereoPannerNode.channelCountMode,
                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,
                    pan: nativeStereoPannerNode.pan.value
                };
                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);
            }
            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);
            if (!nativeStereoPannerNodeIsOwnedByContext) {
                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);
            } else {
                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);
            }
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNodeFaker"])(nativeStereoPannerNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);
            } else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);
            }
            return nativeStereoPannerNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);
                if (renderedNativeStereoPannerNode !== undefined) {
                    return Promise.resolve(renderedNativeStereoPannerNode);
                }
                return createStereoPannerNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=stereo-panner-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Bug #33: Safari exposes an AudioBuffer but it can't be used as a constructor.
__turbopack_context__.s({
    "createTestAudioBufferConstructorSupport": (()=>createTestAudioBufferConstructorSupport)
});
const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor)=>{
    return ()=>{
        if (nativeAudioBufferConstructor === null) {
            return false;
        }
        try {
            new nativeAudioBufferConstructor({
                length: 1,
                sampleRate: 44100
            }); // tslint:disable-line:no-unused-expression
        } catch  {
            return false;
        }
        return true;
    };
}; //# sourceMappingURL=test-audio-buffer-constructor-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods
 * is enough to know if the other one is supported as well.
 */ __turbopack_context__.s({
    "createTestAudioBufferCopyChannelMethodsSubarraySupport": (()=>createTestAudioBufferCopyChannelMethodsSubarraySupport)
});
const createTestAudioBufferCopyChannelMethodsSubarraySupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100);
        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
        if (nativeAudioBuffer.copyToChannel === undefined) {
            return true;
        }
        const source = new Float32Array(2);
        try {
            nativeAudioBuffer.copyFromChannel(source, 0, 0);
        } catch  {
            return false;
        }
        return true;
    };
}; //# sourceMappingURL=test-audio-buffer-copy-channel-methods-subarray-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTestAudioContextCloseMethodSupport": (()=>createTestAudioContextCloseMethodSupport)
});
const createTestAudioContextCloseMethodSupport = (nativeAudioContextConstructor)=>{
    return ()=>{
        if (nativeAudioContextConstructor === null) {
            return false;
        }
        // Try to check the prototype before constructing the AudioContext.
        if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {
            return true;
        }
        const audioContext = new nativeAudioContextConstructor();
        const isAudioContextClosable = audioContext.close !== undefined;
        try {
            audioContext.close();
        } catch  {
        // Ignore errors.
        }
        return isAudioContextClosable;
    };
}; //# sourceMappingURL=test-audio-context-close-method-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers
 * did not refuse to decode invalid parameters with a TypeError.
 */ __turbopack_context__.s({
    "createTestAudioContextDecodeAudioDataMethodTypeErrorSupport": (()=>createTestAudioContextDecodeAudioDataMethodTypeErrorSupport)
});
const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return Promise.resolve(false);
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        // Bug #21: Safari does not support promises yet.
        return new Promise((resolve)=>{
            let isPending = true;
            const resolvePromise = (err)=>{
                if (isPending) {
                    isPending = false;
                    offlineAudioContext.startRendering();
                    resolve(err instanceof TypeError);
                }
            };
            let promise;
            // Bug #26: Safari throws a synchronous error.
            try {
                promise = offlineAudioContext// Bug #1: Safari requires a successCallback.
                .decodeAudioData(null, ()=>{
                // Ignore the success callback.
                }, resolvePromise);
            } catch (err) {
                resolvePromise(err);
            }
            // Bug #21: Safari does not support promises yet.
            if (promise !== undefined) {
                // Bug #6: Chrome, Edge and Firefox do not call the errorCallback.
                promise.catch(resolvePromise);
            }
        });
    };
}; //# sourceMappingURL=test-audio-context-decode-audio-data-method-type-error-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTestAudioContextOptionsSupport": (()=>createTestAudioContextOptionsSupport)
});
const createTestAudioContextOptionsSupport = (nativeAudioContextConstructor)=>{
    return ()=>{
        if (nativeAudioContextConstructor === null) {
            return false;
        }
        let audioContext;
        try {
            audioContext = new nativeAudioContextConstructor({
                latencyHint: 'balanced'
            });
        } catch  {
            return false;
        }
        audioContext.close();
        return true;
    };
}; //# sourceMappingURL=test-audio-context-options-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.
__turbopack_context__.s({
    "createTestAudioNodeConnectMethodSupport": (()=>createTestAudioNodeConnectMethodSupport)
});
const createTestAudioNodeConnectMethodSupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeGainNode = nativeOfflineAudioContext.createGain();
        const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;
        nativeGainNode.disconnect(nativeGainNode);
        return isSupported;
    };
}; //# sourceMappingURL=test-audio-node-connect-method-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was
 * enabled by default in version 66.
 */ __turbopack_context__.s({
    "createTestAudioWorkletProcessorNoOutputsSupport": (()=>createTestAudioWorkletProcessorNoOutputsSupport)
});
const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor)=>{
    return async ()=>{
        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.
        if (nativeAudioWorkletNodeConstructor === null) {
            return true;
        }
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const blob = new Blob([
            'let c,p;class A extends AudioWorkletProcessor{constructor(){super();this.port.onmessage=(e)=>{p=e.data;p.onmessage=()=>{p.postMessage(c);p.close()};this.port.postMessage(0)}}process(){c=1}}registerProcessor("a",A)'
        ], {
            type: 'application/javascript; charset=utf-8'
        });
        const messageChannel = new MessageChannel();
        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);
        const url = URL.createObjectURL(blob);
        let isCallingProcess = false;
        try {
            await offlineAudioContext.audioWorklet.addModule(url);
            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {
                numberOfOutputs: 0
            });
            const oscillator = offlineAudioContext.createOscillator();
            await new Promise((resolve)=>{
                audioWorkletNode.port.onmessage = ()=>resolve();
                audioWorkletNode.port.postMessage(messageChannel.port2, [
                    messageChannel.port2
                ]);
            });
            audioWorkletNode.port.onmessage = ()=>isCallingProcess = true;
            oscillator.connect(audioWorkletNode);
            oscillator.start(0);
            await offlineAudioContext.startRendering();
            isCallingProcess = await new Promise((resolve)=>{
                messageChannel.port1.onmessage = ({ data })=>resolve(data === 1);
                messageChannel.port1.postMessage(0);
            });
        } catch  {
        // Ignore errors.
        } finally{
            messageChannel.port1.close();
            URL.revokeObjectURL(url);
        }
        return isCallingProcess;
    };
}; //# sourceMappingURL=test-audio-worklet-processor-no-outputs-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.
__turbopack_context__.s({
    "createTestAudioWorkletProcessorPostMessageSupport": (()=>createTestAudioWorkletProcessorPostMessageSupport)
});
const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor)=>{
    return async ()=>{
        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.
        if (nativeAudioWorkletNodeConstructor === null) {
            return true;
        }
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const blob = new Blob([
            'class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor("a",A)'
        ], {
            type: 'application/javascript; charset=utf-8'
        });
        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);
        const url = URL.createObjectURL(blob);
        let isEmittingMessageEvents = false;
        let isEmittingProcessorErrorEvents = false;
        try {
            await offlineAudioContext.audioWorklet.addModule(url);
            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {
                numberOfOutputs: 0
            });
            const oscillator = offlineAudioContext.createOscillator();
            audioWorkletNode.port.onmessage = ()=>isEmittingMessageEvents = true;
            audioWorkletNode.onprocessorerror = ()=>isEmittingProcessorErrorEvents = true;
            oscillator.connect(audioWorkletNode);
            oscillator.start(0);
            await offlineAudioContext.startRendering();
            // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.
            await new Promise((resolve)=>setTimeout(resolve));
        } catch  {
        // Ignore errors.
        } finally{
            URL.revokeObjectURL(url);
        }
        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;
    };
}; //# sourceMappingURL=test-audio-worklet-processor-post-message-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.
 */ __turbopack_context__.s({
    "createTestChannelMergerNodeChannelCountSupport": (()=>createTestChannelMergerNodeChannelCountSupport)
});
const createTestChannelMergerNodeChannelCountSupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeChannelMergerNode = offlineAudioContext.createChannelMerger();
        /**
         * Bug #15: Safari does not return the default properties. It still needs to be patched. This test is supposed to test the support
         * in other browsers.
         */ if (nativeChannelMergerNode.channelCountMode === 'max') {
            return true;
        }
        try {
            nativeChannelMergerNode.channelCount = 2;
        } catch  {
            return true;
        }
        return false;
    };
}; //# sourceMappingURL=test-channel-merger-node-channel-count-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTestConstantSourceNodeAccurateSchedulingSupport": (()=>createTestConstantSourceNodeAccurateSchedulingSupport)
});
const createTestConstantSourceNodeAccurateSchedulingSupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        // Bug #62: Safari does not support ConstantSourceNodes.
        if (nativeOfflineAudioContext.createConstantSource === undefined) {
            return true;
        }
        const nativeConstantSourceNode = nativeOfflineAudioContext.createConstantSource();
        /*
         * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to
         * the implementation of Firefox right now, but it could probably be done in a better way.
         */ return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;
    };
}; //# sourceMappingURL=test-constant-source-node-accurate-scheduling-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.
__turbopack_context__.s({
    "createTestConvolverNodeBufferReassignabilitySupport": (()=>createTestConvolverNodeBufferReassignabilitySupport)
});
const createTestConvolverNodeBufferReassignabilitySupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeConvolverNode = offlineAudioContext.createConvolver();
        nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);
        try {
            nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);
        } catch  {
            return false;
        }
        return true;
    };
}; //# sourceMappingURL=test-convolver-node-buffer-reassignability-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Chrome up to version v80, Edge up to version v80 and Opera up to version v67 did not allow to set the channelCount property of a ConvolverNode to 1. They also did not allow to set the channelCountMode to 'explicit'.
__turbopack_context__.s({
    "createTestConvolverNodeChannelCountSupport": (()=>createTestConvolverNodeChannelCountSupport)
});
const createTestConvolverNodeChannelCountSupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return false;
        }
        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        const nativeConvolverNode = offlineAudioContext.createConvolver();
        try {
            nativeConvolverNode.channelCount = 1;
        } catch  {
            return false;
        }
        return true;
    };
}; //# sourceMappingURL=test-convolver-node-channel-count-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTestIsSecureContextSupport": (()=>createTestIsSecureContextSupport)
});
const createTestIsSecureContextSupport = (window)=>{
    return ()=>window !== null && window.hasOwnProperty('isSecureContext');
}; //# sourceMappingURL=test-is-secure-context-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.
__turbopack_context__.s({
    "createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport": (()=>createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)
});
const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = (nativeAudioContextConstructor)=>{
    return ()=>{
        if (nativeAudioContextConstructor === null) {
            return false;
        }
        const audioContext = new nativeAudioContextConstructor();
        try {
            audioContext.createMediaStreamSource(new MediaStream());
            return false;
        } catch (err) {
            return true;
        } finally{
            audioContext.close();
        }
    };
}; //# sourceMappingURL=test-media-stream-audio-source-node-media-stream-without-audio-track-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createTestOfflineAudioContextCurrentTimeSupport": (()=>createTestOfflineAudioContextCurrentTimeSupport)
});
const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return Promise.resolve(false);
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.
        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
        });
        // Bug #21: Safari does not support promises yet.
        return new Promise((resolve)=>{
            nativeOfflineAudioContext.oncomplete = ()=>{
                gainNode.disconnect();
                resolve(nativeOfflineAudioContext.currentTime !== 0);
            };
            nativeOfflineAudioContext.startRendering();
        });
    };
}; //# sourceMappingURL=test-offline-audio-context-current-time-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/**
 * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.
 */ __turbopack_context__.s({
    "createTestStereoPannerNodeDefaultValueSupport": (()=>createTestStereoPannerNodeDefaultValueSupport)
});
const createTestStereoPannerNodeDefaultValueSupport = (nativeOfflineAudioContextConstructor)=>{
    return ()=>{
        if (nativeOfflineAudioContextConstructor === null) {
            return Promise.resolve(false);
        }
        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
        /*
         * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does
         * support the tested behaviour.
         */ if (nativeOfflineAudioContext.createStereoPanner === undefined) {
            return Promise.resolve(true);
        }
        // Bug #62: Safari does not support ConstantSourceNodes.
        if (nativeOfflineAudioContext.createConstantSource === undefined) {
            return Promise.resolve(true);
        }
        const constantSourceNode = nativeOfflineAudioContext.createConstantSource();
        const stereoPanner = nativeOfflineAudioContext.createStereoPanner();
        constantSourceNode.channelCount = 1;
        constantSourceNode.offset.value = 1;
        stereoPanner.channelCount = 1;
        constantSourceNode.start();
        constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);
        return nativeOfflineAudioContext.startRendering().then((buffer)=>buffer.getChannelData(0)[0] !== 1);
    };
}; //# sourceMappingURL=test-stereo-panner-node-default-value-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createUnknownError": (()=>createUnknownError)
});
const createUnknownError = ()=>new DOMException('', 'UnknownError'); //# sourceMappingURL=unknown-error.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWaveShaperNodeConstructor": (()=>createWaveShaperNodeConstructor)
});
const DEFAULT_OPTIONS = {
    channelCount: 2,
    channelCountMode: 'max',
    channelInterpretation: 'speakers',
    curve: null,
    oversample: 'none'
};
const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime)=>{
    return class WaveShaperNode extends audioNodeConstructor {
        constructor(context, options){
            const nativeContext = getNativeContext(context);
            const mergedOptions = {
                ...DEFAULT_OPTIONS,
                ...options
            };
            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);
            const isOffline = isNativeOfflineAudioContext(nativeContext);
            const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null;
            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.
            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);
            this._isCurveNullified = false;
            this._nativeWaveShaperNode = nativeWaveShaperNode;
            // @todo Determine a meaningful tail-time instead of just using one second.
            setAudioNodeTailTime(this, 1);
        }
        get curve() {
            if (this._isCurveNullified) {
                return null;
            }
            return this._nativeWaveShaperNode.curve;
        }
        set curve(value) {
            // Bug #103: Safari does not allow to set the curve to null.
            if (value === null) {
                this._isCurveNullified = true;
                this._nativeWaveShaperNode.curve = new Float32Array([
                    0,
                    0
                ]);
            } else {
                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
                // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.
                if (value.length < 2) {
                    throw createInvalidStateError();
                }
                this._isCurveNullified = false;
                this._nativeWaveShaperNode.curve = value;
            }
        }
        get oversample() {
            return this._nativeWaveShaperNode.oversample;
        }
        set oversample(value) {
            this._nativeWaveShaperNode.oversample = value;
        }
    };
}; //# sourceMappingURL=wave-shaper-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWaveShaperNodeRendererFactory": (()=>createWaveShaperNodeRendererFactory)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js [app-client] (ecmascript)");
;
;
const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode)=>{
    return ()=>{
        const renderedNativeWaveShaperNodes = new WeakMap();
        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext)=>{
            let nativeWaveShaperNode = getNativeAudioNode(proxy);
            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.
            const nativeWaveShaperNodeIsOwnedByContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$owned$2d$by$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isOwnedByContext"])(nativeWaveShaperNode, nativeOfflineAudioContext);
            if (!nativeWaveShaperNodeIsOwnedByContext) {
                const options = {
                    channelCount: nativeWaveShaperNode.channelCount,
                    channelCountMode: nativeWaveShaperNode.channelCountMode,
                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,
                    curve: nativeWaveShaperNode.curve,
                    oversample: nativeWaveShaperNode.oversample
                };
                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);
            }
            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);
            if ((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$guards$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isNativeAudioNodeFaker"])(nativeWaveShaperNode)) {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);
            } else {
                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);
            }
            return nativeWaveShaperNode;
        };
        return {
            render (proxy, nativeOfflineAudioContext) {
                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);
                if (renderedNativeWaveShaperNode !== undefined) {
                    return Promise.resolve(renderedNativeWaveShaperNode);
                }
                return createWaveShaperNode(proxy, nativeOfflineAudioContext);
            }
        };
    };
}; //# sourceMappingURL=wave-shaper-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/window.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWindow": (()=>createWindow)
});
const createWindow = ()=>typeof window === 'undefined' ? null : window; //# sourceMappingURL=window.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWrapAudioBufferCopyChannelMethods": (()=>createWrapAudioBufferCopyChannelMethods)
});
const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError)=>{
    return (audioBuffer)=>{
        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0)=>{
            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
            if (channelNumber >= audioBuffer.numberOfChannels) {
                throw createIndexSizeError();
            }
            const audioBufferLength = audioBuffer.length;
            const channelData = audioBuffer.getChannelData(channelNumber);
            const destinationLength = destination.length;
            for(let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1){
                destination[i] = channelData[i + bufferOffset];
            }
        };
        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0)=>{
            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
            if (channelNumber >= audioBuffer.numberOfChannels) {
                throw createIndexSizeError();
            }
            const audioBufferLength = audioBuffer.length;
            const channelData = audioBuffer.getChannelData(channelNumber);
            const sourceLength = source.length;
            for(let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1){
                channelData[i + bufferOffset] = source[i];
            }
        };
    };
}; //# sourceMappingURL=wrap-audio-buffer-copy-channel-methods.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWrapAudioBufferCopyChannelMethodsOutOfBounds": (()=>createWrapAudioBufferCopyChannelMethodsOutOfBounds)
});
const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong)=>{
    return (audioBuffer)=>{
        audioBuffer.copyFromChannel = ((copyFromChannel)=>{
            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0)=>{
                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
                if (bufferOffset < audioBuffer.length) {
                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);
                }
            };
        })(audioBuffer.copyFromChannel);
        audioBuffer.copyToChannel = ((copyToChannel)=>{
            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0)=>{
                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);
                if (bufferOffset < audioBuffer.length) {
                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);
                }
            };
        })(audioBuffer.copyToChannel);
    };
}; //# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer": (()=>createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer)
});
const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = (overwriteAccessors)=>{
    return (nativeAudioBufferSourceNode, nativeContext)=>{
        const nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);
        if (nativeAudioBufferSourceNode.buffer === null) {
            nativeAudioBufferSourceNode.buffer = nullifiedBuffer;
        }
        overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', (get)=>()=>{
                const value = get.call(nativeAudioBufferSourceNode);
                return value === nullifiedBuffer ? null : value;
            }, (set)=>(value)=>{
                return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);
            });
    };
}; //# sourceMappingURL=wrap-audio-buffer-source-node-stop-method-nullified-buffer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "createWrapChannelMergerNode": (()=>createWrapChannelMergerNode)
});
const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections)=>{
    return (nativeContext, channelMergerNode)=>{
        // Bug #15: Safari does not return the default properties.
        channelMergerNode.channelCount = 1;
        channelMergerNode.channelCountMode = 'explicit';
        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.
        Object.defineProperty(channelMergerNode, 'channelCount', {
            get: ()=>1,
            set: ()=>{
                throw createInvalidStateError();
            }
        });
        Object.defineProperty(channelMergerNode, 'channelCountMode', {
            get: ()=>'explicit',
            set: ()=>{
                throw createInvalidStateError();
            }
        });
        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.
        const audioBufferSourceNode = nativeContext.createBufferSource();
        const whenConnected = ()=>{
            const length = channelMergerNode.numberOfInputs;
            for(let i = 0; i < length; i += 1){
                audioBufferSourceNode.connect(channelMergerNode, 0, i);
            }
        };
        const whenDisconnected = ()=>audioBufferSourceNode.disconnect(channelMergerNode);
        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);
    };
}; //# sourceMappingURL=wrap-channel-merger-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "getFirstSample": (()=>getFirstSample)
});
const getFirstSample = (audioBuffer, buffer, channelNumber)=>{
    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
    if (audioBuffer.copyFromChannel === undefined) {
        return audioBuffer.getChannelData(channelNumber)[0];
    }
    audioBuffer.copyFromChannel(buffer, channelNumber);
    return buffer[0];
}; //# sourceMappingURL=get-first-sample.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "isDCCurve": (()=>isDCCurve)
});
const isDCCurve = (curve)=>{
    if (curve === null) {
        return false;
    }
    const length = curve.length;
    if (length % 2 !== 0) {
        return curve[Math.floor(length / 2)] !== 0;
    }
    return curve[length / 2 - 1] + curve[length / 2] !== 0;
}; //# sourceMappingURL=is-dc-curve.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "overwriteAccessors": (()=>overwriteAccessors)
});
const overwriteAccessors = (object, property, createGetter, createSetter)=>{
    let prototype = object;
    while(!prototype.hasOwnProperty(property)){
        prototype = Object.getPrototypeOf(prototype);
    }
    const { get, set } = Object.getOwnPropertyDescriptor(prototype, property);
    Object.defineProperty(object, property, {
        get: createGetter(get),
        set: createSetter(set)
    });
}; //# sourceMappingURL=overwrite-accessors.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sanitizeAudioWorkletNodeOptions": (()=>sanitizeAudioWorkletNodeOptions)
});
const sanitizeAudioWorkletNodeOptions = (options)=>{
    return {
        ...options,
        outputChannelCount: options.outputChannelCount !== undefined ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ? /*
                   * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why
                   * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That
                   * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.
                   */ [
            options.channelCount
        ] : Array.from({
            length: options.numberOfOutputs
        }, ()=>1)
    };
}; //# sourceMappingURL=sanitize-audio-worklet-node-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sanitizeChannelSplitterOptions": (()=>sanitizeChannelSplitterOptions)
});
const sanitizeChannelSplitterOptions = (options)=>{
    return {
        ...options,
        channelCount: options.numberOfOutputs
    };
}; //# sourceMappingURL=sanitize-channel-splitter-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "sanitizePeriodicWaveOptions": (()=>sanitizePeriodicWaveOptions)
});
const sanitizePeriodicWaveOptions = (options)=>{
    const { imag, real } = options;
    if (imag === undefined) {
        if (real === undefined) {
            return {
                ...options,
                imag: [
                    0,
                    0
                ],
                real: [
                    0,
                    0
                ]
            };
        }
        return {
            ...options,
            imag: Array.from(real, ()=>0),
            real
        };
    }
    if (real === undefined) {
        return {
            ...options,
            imag,
            real: Array.from(imag, ()=>0)
        };
    }
    return {
        ...options,
        imag,
        real
    };
}; //# sourceMappingURL=sanitize-periodic-wave-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "setValueAtTimeUntilPossible": (()=>setValueAtTimeUntilPossible)
});
const setValueAtTimeUntilPossible = (audioParam, value, startTime)=>{
    try {
        audioParam.setValueAtTime(value, startTime);
    } catch (err) {
        if (err.code !== 9) {
            throw err;
        }
        setValueAtTimeUntilPossible(audioParam, value, startTime + 1e-7);
    }
}; //# sourceMappingURL=set-value-at-time-until-possible.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport": (()=>testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport)
});
const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (nativeContext)=>{
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    nativeAudioBufferSourceNode.start();
    try {
        nativeAudioBufferSourceNode.start();
    } catch  {
        return true;
    }
    return false;
}; //# sourceMappingURL=test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioBufferSourceNodeStartMethodOffsetClampingSupport": (()=>testAudioBufferSourceNodeStartMethodOffsetClampingSupport)
});
const testAudioBufferSourceNodeStartMethodOffsetClampingSupport = (nativeContext)=>{
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    try {
        nativeAudioBufferSourceNode.start(0, 1);
    } catch  {
        return false;
    }
    return true;
}; //# sourceMappingURL=test-audio-buffer-source-node-start-method-offset-clamping-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioBufferSourceNodeStopMethodNullifiedBufferSupport": (()=>testAudioBufferSourceNodeStopMethodNullifiedBufferSupport)
});
const testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = (nativeContext)=>{
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    nativeAudioBufferSourceNode.start();
    try {
        nativeAudioBufferSourceNode.stop();
    } catch  {
        return false;
    }
    return true;
}; //# sourceMappingURL=test-audio-buffer-source-node-stop-method-nullified-buffer-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioScheduledSourceNodeStartMethodNegativeParametersSupport": (()=>testAudioScheduledSourceNodeStartMethodNegativeParametersSupport)
});
const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (nativeContext)=>{
    const nativeAudioBufferSourceNode = nativeContext.createOscillator();
    try {
        nativeAudioBufferSourceNode.start(-1);
    } catch (err) {
        return err instanceof RangeError;
    }
    return false;
}; //# sourceMappingURL=test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport": (()=>testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport)
});
const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (nativeContext)=>{
    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    nativeAudioBufferSourceNode.start();
    nativeAudioBufferSourceNode.stop();
    try {
        nativeAudioBufferSourceNode.stop();
        return true;
    } catch  {
        return false;
    }
}; //# sourceMappingURL=test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioScheduledSourceNodeStopMethodNegativeParametersSupport": (()=>testAudioScheduledSourceNodeStopMethodNegativeParametersSupport)
});
const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (nativeContext)=>{
    const nativeAudioBufferSourceNode = nativeContext.createOscillator();
    try {
        nativeAudioBufferSourceNode.stop(-1);
    } catch (err) {
        return err instanceof RangeError;
    }
    return false;
}; //# sourceMappingURL=test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "testAudioWorkletNodeOptionsClonability": (()=>testAudioWorkletNodeOptionsClonability)
});
const testAudioWorkletNodeOptionsClonability = (audioWorkletNodeOptions)=>{
    const { port1, port2 } = new MessageChannel();
    try {
        // This will throw an error if the audioWorkletNodeOptions are not clonable.
        port1.postMessage(audioWorkletNodeOptions);
    } finally{
        port1.close();
        port2.close();
    }
}; //# sourceMappingURL=test-audio-worklet-node-options-clonability.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
/*
 * Bug #122: Edge up to version v18 did not allow to construct a DOMException'. It also had a couple more bugs but since this is easy to
 * test it's used here as a placeholder.
 *
 * Bug #27: Edge up to version v18 did reject an invalid arrayBuffer passed to decodeAudioData() with a DOMException.
 *
 * Bug #50: Edge up to version v18 did not allow to create AudioNodes on a closed context.
 *
 * Bug #57: Edge up to version v18 did not throw an error when assigning the type of an OscillatorNode to 'custom'.
 *
 * Bug #63: Edge up to version v18 did not expose the mediaElement property of a MediaElementAudioSourceNode.
 *
 * Bug #64: Edge up to version v18 did not support the MediaStreamAudioDestinationNode.
 *
 * Bug #71: Edge up to version v18 did not allow to set the buffer of an AudioBufferSourceNode to null.
 *
 * Bug #93: Edge up to version v18 did set the sampleRate of an AudioContext to zero when it was closed.
 *
 * Bug #101: Edge up to version v18 refused to execute decodeAudioData() on a closed context.
 *
 * Bug #106: Edge up to version v18 did not expose the maxValue and minValue properties of the pan AudioParam of a StereoPannerNode.
 *
 * Bug #110: Edge up to version v18 did not expose the maxValue and minValue properties of the attack, knee, ratio, release and threshold AudioParams of a DynamicsCompressorNode.
 *
 * Bug #123: Edge up to version v18 did not support HRTF as the panningModel for a PannerNode.
 *
 * Bug #145: Edge up to version v18 did throw an IndexSizeError when an OfflineAudioContext was created with a sampleRate of zero.
 *
 * Bug #161: Edge up to version v18 did not expose the maxValue and minValue properties of the delayTime AudioParam of a DelayNode.
 */ __turbopack_context__.s({
    "testDomExceptionConstructorSupport": (()=>testDomExceptionConstructorSupport)
});
const testDomExceptionConstructorSupport = ()=>{
    try {
        new DOMException(); // tslint:disable-line:no-unused-expression
    } catch  {
        return false;
    }
    return true;
}; //# sourceMappingURL=test-dom-exception-constructor-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// Safari at version 11 did not support transferables.
__turbopack_context__.s({
    "testTransferablesSupport": (()=>testTransferablesSupport)
});
const testTransferablesSupport = ()=>new Promise((resolve)=>{
        const arrayBuffer = new ArrayBuffer(0);
        const { port1, port2 } = new MessageChannel();
        port1.onmessage = ({ data })=>resolve(data !== null);
        port2.postMessage(arrayBuffer, [
            arrayBuffer
        ]);
    }); //# sourceMappingURL=test-transferables-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAudioBufferSourceNodeStartMethodOffsetClamping": (()=>wrapAudioBufferSourceNodeStartMethodOffsetClamping)
});
const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode)=>{
    nativeAudioBufferSourceNode.start = ((start)=>{
        return (when = 0, offset = 0, duration)=>{
            const buffer = nativeAudioBufferSourceNode.buffer;
            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.
            const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);
            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.
            if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {
                start.call(nativeAudioBufferSourceNode, when, 0, 0);
            } else {
                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);
            }
        };
    })(nativeAudioBufferSourceNode.start);
}; //# sourceMappingURL=wrap-audio-buffer-source-node-start-method-offset-clamping.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls": (()=>wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js [app-client] (ecmascript)");
;
const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext)=>{
    const nativeGainNode = nativeContext.createGain();
    nativeAudioScheduledSourceNode.connect(nativeGainNode);
    const disconnectGainNode = ((disconnect)=>{
        return ()=>{
            // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
            disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);
            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);
        };
    })(nativeAudioScheduledSourceNode.disconnect);
    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);
    (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$intercept$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["interceptConnections"])(nativeAudioScheduledSourceNode, nativeGainNode);
    nativeAudioScheduledSourceNode.stop = ((stop)=>{
        let isStopped = false;
        return (when = 0)=>{
            if (isStopped) {
                try {
                    stop.call(nativeAudioScheduledSourceNode, when);
                } catch  {
                    nativeGainNode.gain.setValueAtTime(0, when);
                }
            } else {
                stop.call(nativeAudioScheduledSourceNode, when);
                isStopped = true;
            }
        };
    })(nativeAudioScheduledSourceNode.stop);
}; //# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "wrapEventListener": (()=>wrapEventListener)
});
const wrapEventListener = (target, eventListener)=>{
    return (event)=>{
        const descriptor = {
            value: target
        };
        Object.defineProperties(event, {
            currentTarget: descriptor,
            target: descriptor
        });
        if (typeof eventListener === 'function') {
            return eventListener.call(target, event);
        }
        return eventListener.handleEvent.call(target, event);
    };
}; //# sourceMappingURL=wrap-event-listener.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=analyser-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=analyser-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-context-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-destination-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-listener.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-descriptor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-scheduled-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-scheduled-source-node-event-map.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-node-event-map.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-node-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-processor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-processor-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/automation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=automation.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=base-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=biquad-filter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=biquad-filter-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-merger-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-splitter-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=common-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=common-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convolver-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convolver-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delay-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delay-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=dynamics-compressor-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=dynamics-compressor-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/event-target.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=event-target.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=gain-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=gain-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=iir-filter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=iir-filter-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-element-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-element-audio-source-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-audio-destination-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-audio-source-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-track-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-track-audio-source-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-base-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-base-audio-context-event-map.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-constant-source-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-convolver-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-iir-filter-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-panner-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-stereo-panner-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-wave-shaper-node-faker.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=offline-audio-completion-event.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=offline-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=offline-audio-context-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=panner-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=panner-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=periodic-wave.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=periodic-wave-constraints.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=periodic-wave-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=read-only-map.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=stereo-panner-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=stereo-panner-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wave-shaper-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wave-shaper-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
// @todo This is currently named IWorkletOptions and not IAudioWorkletOptions because it defines the options of a generic Worklet.
__turbopack_context__.s({});
;
 //# sourceMappingURL=worklet-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/interfaces/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$analyser$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$analyser$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$buffer$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$buffer$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$buffer$2d$source$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$buffer$2d$source$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$context$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$param$2d$descriptor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$param$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$scheduled$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$scheduled$2d$source$2d$node$2d$event$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$worklet$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$worklet$2d$node$2d$event$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$worklet$2d$processor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$audio$2d$worklet$2d$processor$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$automation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/automation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$base$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$biquad$2d$filter$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$channel$2d$merger$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$channel$2d$splitter$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$common$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$common$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$constant$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$constant$2d$source$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$constant$2d$source$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$convolver$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$convolver$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$delay$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$dynamics$2d$compressor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$dynamics$2d$compressor$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$event$2d$target$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/event-target.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$gain$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$iir$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$iir$2d$filter$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$media$2d$element$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$media$2d$element$2d$audio$2d$source$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$media$2d$stream$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$media$2d$stream$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$media$2d$stream$2d$audio$2d$source$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$media$2d$stream$2d$track$2d$audio$2d$source$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$minimal$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$minimal$2d$base$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$minimal$2d$base$2d$audio$2d$context$2d$event$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$minimal$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$audio$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$audio$2d$worklet$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$constant$2d$source$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$convolver$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$iir$2d$filter$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$panner$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$stereo$2d$panner$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$native$2d$wave$2d$shaper$2d$node$2d$faker$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$offline$2d$audio$2d$completion$2d$event$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$offline$2d$audio$2d$context$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$oscillator$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$oscillator$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$oscillator$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$panner$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$panner$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$periodic$2d$wave$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$periodic$2d$wave$2d$constraints$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$periodic$2d$wave$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$read$2d$only$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$stereo$2d$panner$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$stereo$2d$panner$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$wave$2d$shaper$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$wave$2d$shaper$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$worklet$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=abort-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/active-audio-worklet-node-inputs-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=active-audio-worklet-node-inputs-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=active-input-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-active-input-connection-to-audio-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-active-input-connection-to-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-audio-node-connections-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-audio-node-connections-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-audio-param-connections-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-audio-param-connections-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-audio-worklet-module-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-audio-worklet-module-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-connection-to-audio-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-connection-to-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-passive-input-connection-to-audio-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-passive-input-connection-to-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-silent-connection-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-silent-connection-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-unrendered-audio-worklet-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=add-unrendered-audio-worklet-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=analyser-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=analyser-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=analyser-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=analyser-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=any-audio-buffer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/any-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=any-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-source-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-buffer-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-context-latency-category.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-context-state.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-destination-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-destination-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-destination-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-listener-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-listener-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-connections-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-output-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-tail-time-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-node-tail-time-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-audio-node-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-connections.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-connections-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-map.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-output-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-param-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=audio-worklet-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/backup-offline-audio-context-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=backup-offline-audio-context-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=base-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=base-audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=biquad-filter-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=biquad-filter-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=biquad-filter-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=biquad-filter-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=biquad-filter-type.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-count-mode.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-interpretation.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-merger-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-merger-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-merger-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-merger-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-splitter-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-splitter-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-splitter-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=channel-splitter-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=cache-test-result-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=cache-test-result-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=connect-audio-param-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=connect-audio-param-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=connect-multiple-outputs-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=connect-multiple-outputs-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=connect-native-audio-node-to-native-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=connected-native-audio-buffer-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=connected-native-audio-buffer-source-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constant-source-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/context-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=context-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convert-number-to-unsigned-long-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convert-number-to-unsigned-long-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convolver-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convolver-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convolver-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=convolver-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=create-native-offline-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=create-native-offline-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=cycle-counters.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=data-clone-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=decode-audio-data-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=decode-audio-data-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=decode-error-callback.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=decode-success-callback.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=decrement-cycle-counter-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=decrement-cycle-counter-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delay-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delay-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delay-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delay-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delete-active-input-connection-to-audio-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delete-active-input-connection-to-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delete-unrendered-audio-worklet-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=delete-unrendered-audio-worklet-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=detect-cycles-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=detect-cycles-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=disconnect-multiple-outputs-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=disconnect-multiple-outputs-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=disconnect-native-audio-node-from-native-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=distance-model-type.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=dynamics-compressor-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=dynamics-compressor-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=dynamics-compressor-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=encoding-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=error-event-handler.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=evaluate-audio-worklet-global-scope-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=evaluate-source-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=evaluate-source-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/event-handler.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=event-handler.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=event-target-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=event-target-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=expose-current-frame-and-current-time-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=expose-current-frame-and-current-time-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=fetch-source-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=fetch-source-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=gain-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=gain-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=gain-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=gain-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-active-audio-worklet-node-inputs-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-active-audio-worklet-node-inputs-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-node-connections-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-node-renderer-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-node-tail-time-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-node-tail-time-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-param-connections-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-param-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-audio-param-renderer-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-backup-offline-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-backup-offline-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-event-listeners-of-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-event-listeners-of-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-first-sample-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-first-sample-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-native-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-native-audio-param-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-native-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-native-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-or-create-backup-offline-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-or-create-backup-offline-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-unrendered-audio-worklet-nodes-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-unrendered-audio-worklet-nodes-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=get-value-for-key-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=iir-filter-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=iir-filter-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=iir-filter-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=iir-filter-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=increment-cycle-counter-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=increment-cycle-counter-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=increment-cycle-counter-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=index-size-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=insert-element-in-set-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=internal-state-event-listener.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=invalid-access-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=invalid-state-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-active-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-audio-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-audio-param-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-audio-param-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-offline-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-any-offline-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-dc-curve-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-audio-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-audio-param-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-audio-param-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-offline-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-native-offline-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-part-of-a-cycle-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-passive-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-passive-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-secure-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=is-supported-promise-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-element-audio-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-element-audio-source-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-audio-destination-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-audio-destination-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-audio-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-audio-source-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-track-audio-source-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=media-stream-track-audio-source-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-base-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-base-audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-offline-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=minimal-offline-audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=monitor-connections-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=monitor-connections-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-analyser-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-analyser-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-analyser-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-buffer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-buffer-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-buffer-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-buffer-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-buffer-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-buffer-source-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-destination-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-destination-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-destination-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-listener.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-param.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-param-map.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-faker-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-audio-worklet-node-options.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-biquad-filter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-biquad-filter-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-channel-merger-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-channel-merger-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-channel-merger-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-channel-splitter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-channel-splitter-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-constant-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-constant-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-constant-source-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-constant-source-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-constant-source-node-faker-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-convolver-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-convolver-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-convolver-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-delay-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-delay-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-dynamics-compressor-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-dynamics-compressor-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-dynamics-compressor-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-event-target.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-event-target.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-gain-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-gain-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-iir-filter-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-iir-filter-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-iir-filter-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-iir-filter-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-iir-filter-node-faker-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-element-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-element-audio-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-stream-audio-destination-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-stream-audio-destination-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-stream-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-stream-audio-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-stream-track-audio-source-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-stream-track-audio-source-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-media-stream-track-audio-source-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-offline-audio-context.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-offline-audio-context-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-offline-audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-oscillator-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-oscillator-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-oscillator-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-panner-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-panner-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-panner-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-panner-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-panner-node-faker-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-periodic-wave.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-periodic-wave-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-periodic-wave-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-script-processor-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-script-processor-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-stereo-panner-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-stereo-panner-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-stereo-panner-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-stereo-panner-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-stereo-panner-node-faker-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-wave-shaper-node.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-wave-shaper-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-wave-shaper-node-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-wave-shaper-node-faker-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=native-wave-shaper-node-faker-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=not-supported-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=offline-audio-context-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-node-renderer.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=oscillator-type.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/output-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=output-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=over-sample-type.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=overwrite-accessors-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=panner-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=panner-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=panner-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=panner-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=panning-model-type.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=passive-audio-node-input-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=passive-audio-param-input-connection.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=periodic-wave-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=periodic-wave-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/pick-element-from-set-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=pick-element-from-set-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-automation-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-automation-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-inputs-of-audio-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-inputs-of-audio-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-inputs-of-audio-param-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-inputs-of-audio-param-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-native-offline-audio-context-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=render-native-offline-audio-context-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/sanitize-audio-worklet-node-options-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=sanitize-audio-worklet-node-options-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/sanitize-channel-splitter-options-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=sanitize-channel-splitter-options-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/sanitize-periodic-wave-options-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=sanitize-periodic-wave-options-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=set-active-audio-worklet-node-inputs-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=set-active-audio-worklet-node-inputs-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=set-audio-node-tail-time-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=set-audio-node-tail-time-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/set-value-at-time-until-possible-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=set-value-at-time-until-possible-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=start-rendering-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=start-rendering-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=stereo-panner-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=stereo-panner-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=stereo-panner-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=stereo-panner-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-buffer-copy-channel-methods-subarray-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-buffer-constructor-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-context-close-method-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-context-decode-audio-data-method-type-error-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-context-options-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-node-connect-method-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-node-options-clonability-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-worklet-node-options-clonability-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-worklet-processor-no-outputs-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-post-message-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-audio-worklet-processor-post-message-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-channel-merger-node-channel-count-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-constant-source-node-accurate-scheduling-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-convolver-node-buffer-reassignability-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-channel-count-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-convolver-node-channel-count-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-is-secure-context-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-media-stream-audio-source-node-media-stream-without-audio-track-support.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-offline-audio-context-current-time-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=test-stereo-panner-node-default-value-support-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=unknown-error-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=unrendered-audio-worklet-node-store.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=unrendered-audio-worklet-nodes.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wave-shaper-node-constructor.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wave-shaper-node-constructor-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wave-shaper-node-renderer-factory-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wave-shaper-node-renderer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/window.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=window.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/window-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=window-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-buffer-source-node-start-method-offset-clamping-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-channel-merger-node-factory.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-channel-merger-node-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
 //# sourceMappingURL=wrap-event-listener-function.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/index.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
 //# sourceMappingURL=index.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/types/index.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$abort$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$active$2d$audio$2d$worklet$2d$node$2d$inputs$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/active-audio-worklet-node-inputs-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$active$2d$input$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-active-input-connection-to-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$audio$2d$node$2d$connections$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$audio$2d$node$2d$connections$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$audio$2d$param$2d$connections$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$audio$2d$param$2d$connections$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$audio$2d$worklet$2d$module$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$audio$2d$worklet$2d$module$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$connection$2d$to$2d$audio$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$connection$2d$to$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-connection-to-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-passive-input-connection-to-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$silent$2d$connection$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$silent$2d$connection$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$unrendered$2d$audio$2d$worklet$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$add$2d$unrendered$2d$audio$2d$worklet$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$analyser$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$analyser$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$analyser$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$analyser$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$any$2d$audio$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$any$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/any-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$source$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$source$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$source$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$buffer$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$context$2d$latency$2d$category$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$context$2d$state$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$destination$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$destination$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$listener$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$listener$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$connections$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$node$2d$tail$2d$time$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-node-tail-time-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$audio$2d$node$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$connections$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$param$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$worklet$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$worklet$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$audio$2d$worklet$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$backup$2d$offline$2d$audio$2d$context$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/backup-offline-audio-context-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$base$2d$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$biquad$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$biquad$2d$filter$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$biquad$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$biquad$2d$filter$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$biquad$2d$filter$2d$type$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$count$2d$mode$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$interpretation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$merger$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$merger$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$merger$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$merger$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$splitter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$splitter$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$splitter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$channel$2d$splitter$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$cache$2d$test$2d$result$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$cache$2d$test$2d$result$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$connect$2d$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$connect$2d$audio$2d$param$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$connect$2d$multiple$2d$outputs$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$connect$2d$multiple$2d$outputs$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$connected$2d$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$connected$2d$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$constant$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$constant$2d$source$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$constant$2d$source$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$constant$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$constant$2d$source$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$context$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/context-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$convert$2d$number$2d$to$2d$unsigned$2d$long$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$convert$2d$number$2d$to$2d$unsigned$2d$long$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$convolver$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$convolver$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$convolver$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$convolver$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$create$2d$native$2d$offline$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$create$2d$native$2d$offline$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$cycle$2d$counters$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$data$2d$clone$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$decode$2d$audio$2d$data$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$decode$2d$audio$2d$data$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$decode$2d$error$2d$callback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$decode$2d$success$2d$callback$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$decrement$2d$cycle$2d$counter$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$decrement$2d$cycle$2d$counter$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delay$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delay$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delay$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delay$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delete$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delete$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delete-active-input-connection-to-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delete$2d$unrendered$2d$audio$2d$worklet$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$delete$2d$unrendered$2d$audio$2d$worklet$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$detect$2d$cycles$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$detect$2d$cycles$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$disconnect$2d$multiple$2d$outputs$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$disconnect$2d$multiple$2d$outputs$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$distance$2d$model$2d$type$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$dynamics$2d$compressor$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$dynamics$2d$compressor$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$dynamics$2d$compressor$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$dynamics$2d$compressor$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$encoding$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$error$2d$event$2d$handler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$evaluate$2d$audio$2d$worklet$2d$global$2d$scope$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$evaluate$2d$source$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$evaluate$2d$source$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$event$2d$handler$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/event-handler.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$event$2d$target$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$event$2d$target$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$expose$2d$current$2d$frame$2d$and$2d$current$2d$time$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$expose$2d$current$2d$frame$2d$and$2d$current$2d$time$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$fetch$2d$source$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$fetch$2d$source$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$gain$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$gain$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$gain$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$gain$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-active-audio-worklet-node-inputs-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$node$2d$connections$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$node$2d$renderer$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$node$2d$tail$2d$time$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$node$2d$tail$2d$time$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-node-tail-time-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$param$2d$connections$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$param$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$audio$2d$param$2d$renderer$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$backup$2d$offline$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$backup$2d$offline$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-backup-offline-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-event-listeners-of-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$first$2d$sample$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-first-sample-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$native$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$native$2d$audio$2d$param$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$native$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$native$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$or$2d$create$2d$backup$2d$offline$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$or$2d$create$2d$backup$2d$offline$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-or-create-backup-offline-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$unrendered$2d$audio$2d$worklet$2d$nodes$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$unrendered$2d$audio$2d$worklet$2d$nodes$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$get$2d$value$2d$for$2d$key$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$iir$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$iir$2d$filter$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$iir$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$iir$2d$filter$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$increment$2d$cycle$2d$counter$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$increment$2d$cycle$2d$counter$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$increment$2d$cycle$2d$counter$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$index$2d$size$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$insert$2d$element$2d$in$2d$set$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$internal$2d$state$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$invalid$2d$access$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$invalid$2d$state$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$active$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$audio$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$audio$2d$param$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$offline$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$any$2d$offline$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$dc$2d$curve$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$audio$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$audio$2d$param$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$offline$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$native$2d$offline$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$part$2d$of$2d$a$2d$cycle$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$passive$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-passive-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$secure$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$is$2d$supported$2d$promise$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$element$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$element$2d$audio$2d$source$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$stream$2d$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$stream$2d$audio$2d$destination$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$stream$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$stream$2d$audio$2d$source$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$minimal$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$minimal$2d$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$minimal$2d$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$minimal$2d$base$2d$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$minimal$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$minimal$2d$offline$2d$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$monitor$2d$connections$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$monitor$2d$connections$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$analyser$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$analyser$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$analyser$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$buffer$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$buffer$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$destination$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$destination$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$param$2d$map$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2d$faker$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$biquad$2d$filter$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$channel$2d$merger$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$channel$2d$merger$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$channel$2d$merger$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$channel$2d$splitter$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$constant$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$constant$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$constant$2d$source$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$constant$2d$source$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$constant$2d$source$2d$node$2d$faker$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$convolver$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$convolver$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$convolver$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$delay$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$dynamics$2d$compressor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$dynamics$2d$compressor$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$dynamics$2d$compressor$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$event$2d$target$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-event-target.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$gain$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$iir$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$iir$2d$filter$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$iir$2d$filter$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$iir$2d$filter$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$iir$2d$filter$2d$node$2d$faker$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$element$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$element$2d$audio$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$stream$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$stream$2d$audio$2d$destination$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$stream$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$stream$2d$audio$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$offline$2d$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$oscillator$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$oscillator$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$oscillator$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$panner$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$panner$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$panner$2d$node$2d$faker$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$periodic$2d$wave$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$periodic$2d$wave$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$periodic$2d$wave$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$script$2d$processor$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$stereo$2d$panner$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$stereo$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$stereo$2d$panner$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$stereo$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$stereo$2d$panner$2d$node$2d$faker$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$wave$2d$shaper$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$wave$2d$shaper$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$wave$2d$shaper$2d$node$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$wave$2d$shaper$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$native$2d$wave$2d$shaper$2d$node$2d$faker$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$not$2d$supported$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$offline$2d$audio$2d$context$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$oscillator$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$oscillator$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$oscillator$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$oscillator$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$oscillator$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$oscillator$2d$type$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$output$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/output-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$over$2d$sample$2d$type$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$overwrite$2d$accessors$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$panner$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$panner$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$panning$2d$model$2d$type$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$passive$2d$audio$2d$node$2d$input$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$passive$2d$audio$2d$param$2d$input$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$periodic$2d$wave$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$periodic$2d$wave$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$pick$2d$element$2d$from$2d$set$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/pick-element-from-set-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$automation$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$automation$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$inputs$2d$of$2d$audio$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$inputs$2d$of$2d$audio$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$inputs$2d$of$2d$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$inputs$2d$of$2d$audio$2d$param$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$native$2d$offline$2d$audio$2d$context$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$render$2d$native$2d$offline$2d$audio$2d$context$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$sanitize$2d$audio$2d$worklet$2d$node$2d$options$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/sanitize-audio-worklet-node-options-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$sanitize$2d$channel$2d$splitter$2d$options$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/sanitize-channel-splitter-options-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$sanitize$2d$periodic$2d$wave$2d$options$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/sanitize-periodic-wave-options-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$set$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$set$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/set-active-audio-worklet-node-inputs-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$set$2d$audio$2d$node$2d$tail$2d$time$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$set$2d$audio$2d$node$2d$tail$2d$time$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/set-audio-node-tail-time-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$set$2d$value$2d$at$2d$time$2d$until$2d$possible$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/set-value-at-time-until-possible-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$start$2d$rendering$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$start$2d$rendering$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$stereo$2d$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$stereo$2d$panner$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$stereo$2d$panner$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$stereo$2d$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$subarray$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$buffer$2d$constructor$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$context$2d$close$2d$method$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$context$2d$decode$2d$audio$2d$data$2d$method$2d$type$2d$error$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$context$2d$options$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$node$2d$connect$2d$method$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$worklet$2d$node$2d$options$2d$clonability$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-node-options-clonability-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$worklet$2d$processor$2d$no$2d$outputs$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$audio$2d$worklet$2d$processor$2d$post$2d$message$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-post-message-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$channel$2d$merger$2d$node$2d$channel$2d$count$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$constant$2d$source$2d$node$2d$accurate$2d$scheduling$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$convolver$2d$node$2d$buffer$2d$reassignability$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$convolver$2d$node$2d$channel$2d$count$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-channel-count-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$is$2d$secure$2d$context$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$media$2d$stream$2d$audio$2d$source$2d$node$2d$media$2d$stream$2d$without$2d$audio$2d$track$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$offline$2d$audio$2d$context$2d$current$2d$time$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$test$2d$stereo$2d$panner$2d$node$2d$default$2d$value$2d$support$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$unknown$2d$error$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$unrendered$2d$audio$2d$worklet$2d$node$2d$store$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$unrendered$2d$audio$2d$worklet$2d$nodes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wave$2d$shaper$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wave$2d$shaper$2d$node$2d$constructor$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wave$2d$shaper$2d$node$2d$renderer$2d$factory$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wave$2d$shaper$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$window$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/window.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$window$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/window-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$offset$2d$clamping$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$channel$2d$merger$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$channel$2d$merger$2d$node$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$wrap$2d$event$2d$listener$2d$function$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/index.js [app-client] (ecmascript) <locals>");
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/module.js [app-client] (ecmascript) <locals>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({
    "AnalyserNode": (()=>analyserNodeConstructor),
    "AudioBuffer": (()=>audioBufferConstructor),
    "AudioBufferSourceNode": (()=>audioBufferSourceNodeConstructor),
    "AudioContext": (()=>audioContextConstructor),
    "AudioWorkletNode": (()=>audioWorkletNodeConstructor),
    "BiquadFilterNode": (()=>biquadFilterNodeConstructor),
    "ChannelMergerNode": (()=>channelMergerNodeConstructor),
    "ChannelSplitterNode": (()=>channelSplitterNodeConstructor),
    "ConstantSourceNode": (()=>constantSourceNodeConstructor),
    "ConvolverNode": (()=>convolverNodeConstructor),
    "DelayNode": (()=>delayNodeConstructor),
    "DynamicsCompressorNode": (()=>dynamicsCompressorNodeConstructor),
    "GainNode": (()=>gainNodeConstructor),
    "IIRFilterNode": (()=>iIRFilterNodeConstructor),
    "MediaElementAudioSourceNode": (()=>mediaElementAudioSourceNodeConstructor),
    "MediaStreamAudioDestinationNode": (()=>mediaStreamAudioDestinationNodeConstructor),
    "MediaStreamAudioSourceNode": (()=>mediaStreamAudioSourceNodeConstructor),
    "MediaStreamTrackAudioSourceNode": (()=>mediaStreamTrackAudioSourceNodeConstructor),
    "MinimalAudioContext": (()=>minimalAudioContextConstructor),
    "MinimalOfflineAudioContext": (()=>minimalOfflineAudioContextConstructor),
    "OfflineAudioContext": (()=>offlineAudioContextConstructor),
    "OscillatorNode": (()=>oscillatorNodeConstructor),
    "PannerNode": (()=>pannerNodeConstructor),
    "PeriodicWave": (()=>periodicWaveConstructor),
    "StereoPannerNode": (()=>stereoPannerNodeConstructor),
    "WaveShaperNode": (()=>waveShaperNodeConstructor),
    "addAudioWorkletModule": (()=>addAudioWorkletModule),
    "decodeAudioData": (()=>decodeAudioData),
    "isAnyAudioContext": (()=>isAnyAudioContext),
    "isAnyAudioNode": (()=>isAnyAudioNode),
    "isAnyAudioParam": (()=>isAnyAudioParam),
    "isAnyOfflineAudioContext": (()=>isAnyOfflineAudioContext),
    "isSupported": (()=>isSupported)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/automation-events/build/es5/bundle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$abort$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/abort-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$worklet$2d$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$silent$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$unrendered$2d$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$analyser$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$analyser$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$destination$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$listener$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$param$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$worklet$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$biquad$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$biquad$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$cache$2d$test$2d$result$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$merger$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$merger$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$splitter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$splitter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connect$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connect$2d$multiple$2d$outputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connected$2d$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$constant$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$constant$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convert$2d$number$2d$to$2d$unsigned$2d$long$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convolver$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convolver$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$create$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$data$2d$clone$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$decode$2d$audio$2d$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$decrement$2d$cycle$2d$counter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delay$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delay$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delete$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delete$2d$unrendered$2d$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$detect$2d$cycles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$disconnect$2d$multiple$2d$outputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$dynamics$2d$compressor$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$dynamics$2d$compressor$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$encoding$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$evaluate$2d$source$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$event$2d$target$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$expose$2d$current$2d$frame$2d$and$2d$current$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$fetch$2d$source$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$gain$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$gain$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$node$2d$tail$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$param$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$backup$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$native$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$or$2d$create$2d$backup$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$unrendered$2d$audio$2d$worklet$2d$nodes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$iir$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$iir$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$increment$2d$cycle$2d$counter$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$access$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$secure$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$supported$2d$promise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$element$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$monitor$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$analyser$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$merger$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$constant$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$constant$2d$source$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$convolver$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$dynamics$2d$compressor$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$iir$2d$filter$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$iir$2d$filter$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$element$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$oscillator$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$periodic$2d$wave$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$stereo$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$stereo$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$wave$2d$shaper$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$wave$2d$shaper$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$oscillator$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$oscillator$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$periodic$2d$wave$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$automation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-automation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$inputs$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$inputs$2d$of$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$set$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$set$2d$audio$2d$node$2d$tail$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$start$2d$rendering$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$stereo$2d$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$stereo$2d$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$buffer$2d$constructor$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$subarray$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$close$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$decode$2d$audio$2d$data$2d$method$2d$type$2d$error$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$options$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$node$2d$connect$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$worklet$2d$processor$2d$no$2d$outputs$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$worklet$2d$processor$2d$post$2d$message$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$channel$2d$merger$2d$node$2d$channel$2d$count$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$constant$2d$source$2d$node$2d$accurate$2d$scheduling$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$convolver$2d$node$2d$buffer$2d$reassignability$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$convolver$2d$node$2d$channel$2d$count$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$is$2d$secure$2d$context$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$media$2d$stream$2d$audio$2d$source$2d$node$2d$media$2d$stream$2d$without$2d$audio$2d$track$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$offline$2d$audio$2d$context$2d$current$2d$time$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$stereo$2d$panner$2d$node$2d$default$2d$value$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$unknown$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wave$2d$shaper$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wave$2d$shaper$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$window$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/window.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$channel$2d$merger$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$first$2d$sample$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$dc$2d$curve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$passive$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$overwrite$2d$accessors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$channel$2d$splitter$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$periodic$2d$wave$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$value$2d$at$2d$time$2d$until$2d$possible$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$consecutive$2d$calls$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$offset$2d$clamping$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$worklet$2d$node$2d$options$2d$clonability$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$dom$2d$exception$2d$constructor$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$transferables$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$offset$2d$clamping$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js [app-client] (ecmascript)");
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const addActiveInputConnectionToAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddActiveInputConnectionToAudioNode"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertElementInSet"]);
const addPassiveInputConnectionToAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddPassiveInputConnectionToAudioNode"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertElementInSet"]);
const deleteActiveInputConnectionToAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delete$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDeleteActiveInputConnectionToAudioNode"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["pickElementFromSet"]);
const audioNodeTailTimeStore = new WeakMap();
const getAudioNodeTailTime = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$node$2d$tail$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetAudioNodeTailTime"])(audioNodeTailTimeStore);
const cacheTestResult = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$cache$2d$test$2d$result$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createCacheTestResult"])(new Map(), new WeakMap());
const window = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$window$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWindow"])();
const createNativeAnalyserNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$analyser$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAnalyserNodeFactory"])(cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"]);
const getAudioNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetAudioNodeRenderer"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"]);
const renderInputsOfAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$inputs$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRenderInputsOfAudioNode"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"], getAudioNodeRenderer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPartOfACycle"]);
const createAnalyserNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$analyser$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnalyserNodeRendererFactory"])(createNativeAnalyserNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderInputsOfAudioNode);
const getNativeContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$native$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetNativeContext"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CONTEXT_STORE"]);
const nativeOfflineAudioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeOfflineAudioContextConstructor"])(window);
const isNativeOfflineAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsNativeOfflineAudioContext"])(nativeOfflineAudioContextConstructor);
const audioParamAudioNodeStore = new WeakMap();
const eventTargetConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$event$2d$target$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createEventTargetConstructor"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapEventListener"]);
const nativeAudioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAudioContextConstructor"])(window);
const isNativeAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsNativeAudioContext"])(nativeAudioContextConstructor);
const isNativeAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsNativeAudioNode"])(window);
const isNativeAudioParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsNativeAudioParam"])(window);
const nativeAudioWorkletNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAudioWorkletNodeConstructor"])(window);
const audioNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioNodeConstructor"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddAudioNodeConnections"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_NODE_CONNECTIONS_STORE"]), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddConnectionToAudioNode"])(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["connectNativeAudioNodeToNativeAudioNode"], deleteActiveInputConnectionToAudioNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["disconnectNativeAudioNodeFromNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"], getAudioNodeTailTime, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getEventListenersOfAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertElementInSet"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPartOfACycle"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$passive$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPassiveAudioNode"]), cacheTestResult, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$increment$2d$cycle$2d$counter$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIncrementCycleCounterFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CYCLE_COUNTERS"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["disconnectNativeAudioNodeFromNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioParam"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$access$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidAccessError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$decrement$2d$cycle$2d$counter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDecrementCycleCounter"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["connectNativeAudioNodeToNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CYCLE_COUNTERS"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioParam"], getNativeContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isActiveAudioNode"], isNativeOfflineAudioContext), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$detect$2d$cycles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDetectCycles"])(audioParamAudioNodeStore, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"]), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);
const analyserNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$analyser$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAnalyserNodeConstructor"])(audioNodeConstructor, createAnalyserNodeRenderer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"], createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);
;
const audioBufferStore = new WeakSet();
const nativeAudioBufferConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAudioBufferConstructor"])(window);
const convertNumberToUnsignedLong = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convert$2d$number$2d$to$2d$unsigned$2d$long$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConvertNumberToUnsignedLong"])(new Uint32Array(1));
const wrapAudioBufferCopyChannelMethods = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWrapAudioBufferCopyChannelMethods"])(convertNumberToUnsignedLong, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"]);
const wrapAudioBufferCopyChannelMethodsOutOfBounds = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWrapAudioBufferCopyChannelMethodsOutOfBounds"])(convertNumberToUnsignedLong);
const audioBufferConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioBufferConstructor"])(audioBufferStore, cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$buffer$2d$constructor$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioBufferConstructorSupport"])(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
;
const addSilentConnection = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$silent$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddSilentConnection"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"]);
const renderInputsOfAudioParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$inputs$2d$of$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRenderInputsOfAudioParam"])(getAudioNodeRenderer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioParamConnections"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isPartOfACycle"]);
const connectAudioParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connect$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConnectAudioParam"])(renderInputsOfAudioParam);
const createNativeAudioBufferSourceNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAudioBufferSourceNodeFactory"])(addSilentConnection, cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$consecutive$2d$calls$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$offset$2d$clamping$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioBufferSourceNodeStartMethodOffsetClampingSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioBufferSourceNodeStopMethodNullifiedBufferSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStartMethodNegativeParametersSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStopMethodNegativeParametersSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$offset$2d$clamping$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioBufferSourceNodeStartMethodOffsetClamping"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$overwrite$2d$accessors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["overwriteAccessors"]), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls"]);
const renderAutomation = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$automation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRenderAutomation"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$param$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetAudioParamRenderer"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioParamConnections"]), renderInputsOfAudioParam);
const createAudioBufferSourceNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioBufferSourceNodeRendererFactory"])(connectAudioParam, createNativeAudioBufferSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const createAudioParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioParamFactory"])((0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddAudioParamConnections"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_PARAM_CONNECTIONS_STORE"]), audioParamAudioNodeStore, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_PARAM_STORE"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$param$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioParamRenderer"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createCancelAndHoldAutomationEvent"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createCancelScheduledValuesAutomationEvent"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createExponentialRampToValueAutomationEvent"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createLinearRampToValueAutomationEvent"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSetTargetAutomationEvent"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSetValueAutomationEvent"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSetValueCurveAutomationEvent"], nativeAudioContextConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$value$2d$at$2d$time$2d$until$2d$possible$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["setValueAtTimeUntilPossible"]);
const audioBufferSourceNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioBufferSourceNodeConstructor"])(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapEventListener"]);
;
const audioDestinationNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioDestinationNodeConstructor"])(audioNodeConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$destination$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioDestinationNodeRenderer"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAudioDestinationNodeFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$overwrite$2d$accessors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["overwriteAccessors"]), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);
const createBiquadFilterNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$biquad$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBiquadFilterNodeRendererFactory"])(connectAudioParam, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeBiquadFilterNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const setAudioNodeTailTime = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$set$2d$audio$2d$node$2d$tail$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSetAudioNodeTailTime"])(audioNodeTailTimeStore);
const biquadFilterNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$biquad$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBiquadFilterNodeConstructor"])(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$access$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidAccessError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeBiquadFilterNode"], getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const monitorConnections = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$monitor$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMonitorConnections"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["insertElementInSet"], isNativeAudioNode);
const wrapChannelMergerNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$channel$2d$merger$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWrapChannelMergerNode"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], monitorConnections);
const createNativeChannelMergerNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$merger$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeChannelMergerNodeFactory"])(nativeAudioContextConstructor, wrapChannelMergerNode);
const createChannelMergerNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$merger$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createChannelMergerNodeRendererFactory"])(createNativeChannelMergerNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderInputsOfAudioNode);
const channelMergerNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$merger$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createChannelMergerNodeConstructor"])(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);
const createChannelSplitterNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$splitter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createChannelSplitterNodeRendererFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeChannelSplitterNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderInputsOfAudioNode);
const channelSplitterNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$splitter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createChannelSplitterNodeConstructor"])(audioNodeConstructor, createChannelSplitterNodeRenderer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeChannelSplitterNode"], getNativeContext, isNativeOfflineAudioContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$channel$2d$splitter$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sanitizeChannelSplitterOptions"]);
const createNativeConstantSourceNodeFaker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$constant$2d$source$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeConstantSourceNodeFakerFactory"])(addSilentConnection, createNativeAudioBufferSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], monitorConnections);
const createNativeConstantSourceNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$constant$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeConstantSourceNodeFactory"])(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStartMethodNegativeParametersSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStopMethodNegativeParametersSupport"]);
const createConstantSourceNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$constant$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConstantSourceNodeRendererFactory"])(connectAudioParam, createNativeConstantSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const constantSourceNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$constant$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConstantSourceNodeConstructor"])(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapEventListener"]);
const createNativeConvolverNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$convolver$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeConvolverNodeFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$overwrite$2d$accessors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["overwriteAccessors"]);
const createConvolverNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convolver$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConvolverNodeRendererFactory"])(createNativeConvolverNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderInputsOfAudioNode);
const convolverNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convolver$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConvolverNodeConstructor"])(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createDelayNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delay$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDelayNodeRendererFactory"])(connectAudioParam, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeDelayNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const delayNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delay$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDelayNodeConstructor"])(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeDelayNode"], getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativeDynamicsCompressorNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$dynamics$2d$compressor$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeDynamicsCompressorNodeFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"]);
const createDynamicsCompressorNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$dynamics$2d$compressor$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDynamicsCompressorNodeRendererFactory"])(connectAudioParam, createNativeDynamicsCompressorNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const dynamicsCompressorNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$dynamics$2d$compressor$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDynamicsCompressorNodeConstructor"])(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createGainNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$gain$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGainNodeRendererFactory"])(connectAudioParam, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const gainNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$gain$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGainNodeConstructor"])(audioNodeConstructor, createAudioParam, createGainNodeRenderer, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], getNativeContext, isNativeOfflineAudioContext);
const createNativeIIRFilterNodeFaker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$iir$2d$filter$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeIIRFilterNodeFakerFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$access$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidAccessError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeScriptProcessorNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"]);
const renderNativeOfflineAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createRenderNativeOfflineAudioContext"])(cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeScriptProcessorNode"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$offline$2d$audio$2d$context$2d$current$2d$time$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestOfflineAudioContextCurrentTimeSupport"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], nativeOfflineAudioContextConstructor));
const createIIRFilterNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$iir$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIIRFilterNodeRendererFactory"])(createNativeAudioBufferSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const createNativeIIRFilterNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$iir$2d$filter$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeIIRFilterNodeFactory"])(createNativeIIRFilterNodeFaker);
const iIRFilterNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$iir$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIIRFilterNodeConstructor"])(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createAudioListener = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$listener$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioListenerFactory"])(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeScriptProcessorNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$first$2d$sample$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFirstSample"], isNativeOfflineAudioContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$overwrite$2d$accessors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["overwriteAccessors"]);
const unrenderedAudioWorkletNodeStore = new WeakMap();
const minimalBaseAudioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMinimalBaseAudioContextConstructor"])(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapEventListener"]);
const createNativeOscillatorNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$oscillator$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeOscillatorNodeFactory"])(addSilentConnection, cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStartMethodNegativeParametersSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioScheduledSourceNodeStopMethodNegativeParametersSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls"]);
const createOscillatorNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$oscillator$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createOscillatorNodeRendererFactory"])(connectAudioParam, createNativeOscillatorNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const oscillatorNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$oscillator$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createOscillatorNodeConstructor"])(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapEventListener"]);
const createConnectedNativeAudioBufferSourceNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connected$2d$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConnectedNativeAudioBufferSourceNodeFactory"])(createNativeAudioBufferSourceNode);
const createNativeWaveShaperNodeFaker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$wave$2d$shaper$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeWaveShaperNodeFakerFactory"])(createConnectedNativeAudioBufferSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$dc$2d$curve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDCCurve"], monitorConnections);
const createNativeWaveShaperNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$wave$2d$shaper$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeWaveShaperNodeFactory"])(createConnectedNativeAudioBufferSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeWaveShaperNodeFaker, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$dc$2d$curve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["isDCCurve"], monitorConnections, nativeAudioContextConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$overwrite$2d$accessors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["overwriteAccessors"]);
const createNativePannerNodeFaker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativePannerNodeFakerFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["connectNativeAudioNodeToNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeChannelMergerNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeScriptProcessorNode"], createNativeWaveShaperNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["disconnectNativeAudioNodeFromNativeAudioNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$first$2d$sample$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getFirstSample"], monitorConnections);
const createNativePannerNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativePannerNodeFactory"])(createNativePannerNodeFaker);
const createPannerNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createPannerNodeRendererFactory"])(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], createNativePannerNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const pannerNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createPannerNodeConstructor"])(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const createNativePeriodicWave = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$periodic$2d$wave$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativePeriodicWaveFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"]);
const periodicWaveConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$periodic$2d$wave$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createPeriodicWaveConstructor"])(createNativePeriodicWave, getNativeContext, new WeakSet(), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$periodic$2d$wave$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sanitizePeriodicWaveOptions"]);
const nativeStereoPannerNodeFakerFactory = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$stereo$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeStereoPannerNodeFakerFactory"])(createNativeChannelMergerNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeChannelSplitterNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], createNativeWaveShaperNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], monitorConnections);
const createNativeStereoPannerNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$stereo$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeStereoPannerNodeFactory"])(nativeStereoPannerNodeFakerFactory, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"]);
const createStereoPannerNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$stereo$2d$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStereoPannerNodeRendererFactory"])(connectAudioParam, createNativeStereoPannerNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderAutomation, renderInputsOfAudioNode);
const stereoPannerNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$stereo$2d$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStereoPannerNodeConstructor"])(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
const createWaveShaperNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wave$2d$shaper$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWaveShaperNodeRendererFactory"])(createNativeWaveShaperNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], renderInputsOfAudioNode);
const waveShaperNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wave$2d$shaper$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createWaveShaperNodeConstructor"])(audioNodeConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);
const isSecureContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$secure$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsSecureContext"])(window);
const exposeCurrentFrameAndCurrentTime = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$expose$2d$current$2d$frame$2d$and$2d$current$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createExposeCurrentFrameAndCurrentTime"])(window);
const backupOfflineAudioContextStore = new WeakMap();
const getOrCreateBackupOfflineAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$or$2d$create$2d$backup$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetOrCreateBackupOfflineAudioContext"])(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);
const addAudioWorkletModule = isSecureContext ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$worklet$2d$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddAudioWorkletModule"])(cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$evaluate$2d$source$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createEvaluateSource"])(window), exposeCurrentFrameAndCurrentTime, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$fetch$2d$source$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createFetchSource"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$abort$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAbortError"]), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$worklet$2d$processor$2d$post$2d$message$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioWorkletProcessorPostMessageSupport"])(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), // @todo window is guaranteed to be defined because isSecureContext checks that as well.
window) : undefined;
const isNativeContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsNativeContext"])(isNativeAudioContext, isNativeOfflineAudioContext);
const decodeAudioData = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$decode$2d$audio$2d$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDecodeAudioData"])(audioBufferStore, cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$data$2d$clone$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDataCloneError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$encoding$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createEncodingError"], new WeakSet(), getNativeContext, isNativeContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioBufferCopyChannelMethodsOutOfBoundsSupport"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testPromiseSupport"], wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const baseAudioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createBaseAudioContextConstructor"])(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);
const mediaElementAudioSourceNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$element$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMediaElementAudioSourceNodeConstructor"])(audioNodeConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$element$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeMediaElementAudioSourceNode"], getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioDestinationNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMediaStreamAudioDestinationNodeConstructor"])(audioNodeConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeMediaStreamAudioDestinationNode"], getNativeContext, isNativeOfflineAudioContext);
const mediaStreamAudioSourceNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMediaStreamAudioSourceNodeConstructor"])(audioNodeConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeMediaStreamAudioSourceNode"], getNativeContext, isNativeOfflineAudioContext);
const createNativeMediaStreamTrackAudioSourceNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeMediaStreamTrackAudioSourceNodeFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], isNativeOfflineAudioContext);
const mediaStreamTrackAudioSourceNodeConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMediaStreamTrackAudioSourceNodeConstructor"])(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);
const audioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioContextConstructor"])(baseAudioContextConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$unknown$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createUnknownError"], mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);
;
const getUnrenderedAudioWorkletNodes = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$unrendered$2d$audio$2d$worklet$2d$nodes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetUnrenderedAudioWorkletNodes"])(unrenderedAudioWorkletNodeStore);
const addUnrenderedAudioWorkletNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$unrendered$2d$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAddUnrenderedAudioWorkletNode"])(getUnrenderedAudioWorkletNodes);
const connectMultipleOutputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connect$2d$multiple$2d$outputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createConnectMultipleOutputs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"]);
const deleteUnrenderedAudioWorkletNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delete$2d$unrendered$2d$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDeleteUnrenderedAudioWorkletNode"])(getUnrenderedAudioWorkletNodes);
const disconnectMultipleOutputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$disconnect$2d$multiple$2d$outputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createDisconnectMultipleOutputs"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"]);
const activeAudioWorkletNodeInputsStore = new WeakMap();
const getActiveAudioWorkletNodeInputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetActiveAudioWorkletNodeInputs"])(activeAudioWorkletNodeInputsStore, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getValueForKey"]);
const createNativeAudioWorkletNodeFaker = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAudioWorkletNodeFakerFactory"])(connectMultipleOutputs, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIndexSizeError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeChannelMergerNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeChannelSplitterNode"], createNativeConstantSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeScriptProcessorNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);
const createNativeAudioWorkletNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeAudioWorkletNodeFactory"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeAudioWorkletNodeFaker, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], monitorConnections);
const createAudioWorkletNodeRenderer = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$worklet$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioWorkletNodeRendererFactory"])(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeChannelSplitterNode"], createNativeConstantSourceNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNativeGainNode"], deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getNativeAudioNode"], nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const getBackupOfflineAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$backup$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createGetBackupOfflineAudioContext"])(backupOfflineAudioContextStore);
const setActiveAudioWorkletNodeInputs = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$set$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createSetActiveAudioWorkletNodeInputs"])(activeAudioWorkletNodeInputsStore);
// The AudioWorkletNode constructor is only available in a SecureContext.
const audioWorkletNodeConstructor = isSecureContext ? (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createAudioWorkletNodeConstructor"])(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["getAudioNodeConnections"], getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["sanitizeAudioWorkletNodeOptions"], setActiveAudioWorkletNodeInputs, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$worklet$2d$node$2d$options$2d$clonability$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioWorkletNodeOptionsClonability"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["wrapEventListener"]) : undefined;
;
;
;
;
;
;
;
;
;
;
;
;
;
;
const minimalAudioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMinimalAudioContextConstructor"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$unknown$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createUnknownError"], minimalBaseAudioContextConstructor, nativeAudioContextConstructor);
;
const createNativeOfflineAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$create$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createCreateNativeOfflineAudioContext"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createNotSupportedError"], nativeOfflineAudioContextConstructor);
const startRendering = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$start$2d$rendering$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createStartRendering"])(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testAudioBufferCopyChannelMethodsOutOfBoundsSupport"], wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const minimalOfflineAudioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createMinimalOfflineAudioContextConstructor"])(cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);
;
const offlineAudioContextConstructor = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createOfflineAudioContextConstructor"])(baseAudioContextConstructor, cacheTestResult, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createInvalidStateError"], createNativeOfflineAudioContext, startRendering);
;
;
;
;
;
;
const isAnyAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsAnyAudioContext"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CONTEXT_STORE"], isNativeAudioContext);
const isAnyAudioNode = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsAnyAudioNode"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_NODE_STORE"], isNativeAudioNode);
const isAnyAudioParam = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsAnyAudioParam"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["AUDIO_PARAM_STORE"], isNativeAudioParam);
const isAnyOfflineAudioContext = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsAnyOfflineAudioContext"])(__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["CONTEXT_STORE"], isNativeOfflineAudioContext);
const isSupported = ()=>(0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$supported$2d$promise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createIsSupportedPromise"])(cacheTestResult, (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$subarray$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioBufferCopyChannelMethodsSubarraySupport"])(nativeOfflineAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$close$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioContextCloseMethodSupport"])(nativeAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$decode$2d$audio$2d$data$2d$method$2d$type$2d$error$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioContextDecodeAudioDataMethodTypeErrorSupport"])(nativeOfflineAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$options$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioContextOptionsSupport"])(nativeAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$node$2d$connect$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioNodeConnectMethodSupport"])(nativeOfflineAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$worklet$2d$processor$2d$no$2d$outputs$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestAudioWorkletProcessorNoOutputsSupport"])(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$channel$2d$merger$2d$node$2d$channel$2d$count$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestChannelMergerNodeChannelCountSupport"])(nativeOfflineAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$constant$2d$source$2d$node$2d$accurate$2d$scheduling$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestConstantSourceNodeAccurateSchedulingSupport"])(nativeOfflineAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$convolver$2d$node$2d$buffer$2d$reassignability$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestConvolverNodeBufferReassignabilitySupport"])(nativeOfflineAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$convolver$2d$node$2d$channel$2d$count$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestConvolverNodeChannelCountSupport"])(nativeOfflineAudioContextConstructor), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$dom$2d$exception$2d$constructor$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testDomExceptionConstructorSupport"], (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$is$2d$secure$2d$context$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestIsSecureContextSupport"])(window), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$media$2d$stream$2d$audio$2d$source$2d$node$2d$media$2d$stream$2d$without$2d$audio$2d$track$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport"])(nativeAudioContextConstructor), (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$stereo$2d$panner$2d$node$2d$default$2d$value$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["createTestStereoPannerNodeDefaultValueSupport"])(nativeOfflineAudioContextConstructor), __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$transferables$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["testTransferablesSupport"]); //# sourceMappingURL=module.js.map
}}),
"[project]/node_modules/standardized-audio-context/build/es2019/module.js [app-client] (ecmascript) <module evaluation>": ((__turbopack_context__) => {
"use strict";

var { g: global, __dirname } = __turbopack_context__;
{
__turbopack_context__.s({});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$automation$2d$events$2f$build$2f$es5$2f$bundle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/automation-events/build/es5/bundle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$abort$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/abort-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$audio$2d$worklet$2d$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$passive$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$silent$2d$connection$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$add$2d$unrendered$2d$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$analyser$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$analyser$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$buffer$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$destination$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$listener$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$param$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$param$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$audio$2d$worklet$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$biquad$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$biquad$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$cache$2d$test$2d$result$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$merger$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$merger$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$splitter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$channel$2d$splitter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connect$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connect$2d$multiple$2d$outputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$connected$2d$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$constant$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$constant$2d$source$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convert$2d$number$2d$to$2d$unsigned$2d$long$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convolver$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$convolver$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$create$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$data$2d$clone$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$decode$2d$audio$2d$data$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$decrement$2d$cycle$2d$counter$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delay$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delay$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delete$2d$active$2d$input$2d$connection$2d$to$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$delete$2d$unrendered$2d$audio$2d$worklet$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$detect$2d$cycles$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$disconnect$2d$multiple$2d$outputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$dynamics$2d$compressor$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$dynamics$2d$compressor$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$encoding$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$evaluate$2d$source$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$event$2d$target$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$expose$2d$current$2d$frame$2d$and$2d$current$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$fetch$2d$source$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$gain$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$gain$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$node$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$node$2d$tail$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$audio$2d$param$2d$renderer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$backup$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$native$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$or$2d$create$2d$backup$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$get$2d$unrendered$2d$audio$2d$worklet$2d$nodes$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$iir$2d$filter$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$iir$2d$filter$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$increment$2d$cycle$2d$counter$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$index$2d$size$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$access$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$invalid$2d$state$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$any$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$secure$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$is$2d$supported$2d$promise$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$element$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$audio$2d$destination$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$base$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$minimal$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$monitor$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$analyser$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$buffer$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$buffer$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$audio$2d$worklet$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$biquad$2d$filter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$merger$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$channel$2d$splitter$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$constant$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$constant$2d$source$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$convolver$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$delay$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$dynamics$2d$compressor$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$gain$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$iir$2d$filter$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$iir$2d$filter$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$element$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$audio$2d$destination$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$audio$2d$source$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$media$2d$stream$2d$track$2d$audio$2d$source$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$oscillator$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$periodic$2d$wave$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$script$2d$processor$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$stereo$2d$panner$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$stereo$2d$panner$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$wave$2d$shaper$2d$node$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$native$2d$wave$2d$shaper$2d$node$2d$faker$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$not$2d$supported$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$offline$2d$audio$2d$context$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$oscillator$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$oscillator$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$periodic$2d$wave$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$automation$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-automation.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$inputs$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$inputs$2d$of$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$render$2d$native$2d$offline$2d$audio$2d$context$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$set$2d$active$2d$audio$2d$worklet$2d$node$2d$inputs$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$set$2d$audio$2d$node$2d$tail$2d$time$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$start$2d$rendering$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$stereo$2d$panner$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$stereo$2d$panner$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$buffer$2d$constructor$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$subarray$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$close$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$decode$2d$audio$2d$data$2d$method$2d$type$2d$error$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$context$2d$options$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$node$2d$connect$2d$method$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$worklet$2d$processor$2d$no$2d$outputs$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$audio$2d$worklet$2d$processor$2d$post$2d$message$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$channel$2d$merger$2d$node$2d$channel$2d$count$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$constant$2d$source$2d$node$2d$accurate$2d$scheduling$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$convolver$2d$node$2d$buffer$2d$reassignability$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$convolver$2d$node$2d$channel$2d$count$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-channel-count-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$is$2d$secure$2d$context$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$media$2d$stream$2d$audio$2d$source$2d$node$2d$media$2d$stream$2d$without$2d$audio$2d$track$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$offline$2d$audio$2d$context$2d$current$2d$time$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$test$2d$stereo$2d$panner$2d$node$2d$default$2d$value$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$unknown$2d$error$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wave$2d$shaper$2d$node$2d$constructor$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wave$2d$shaper$2d$node$2d$renderer$2d$factory$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$window$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/window.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$factories$2f$wrap$2d$channel$2d$merger$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$globals$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/globals.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$connect$2d$native$2d$audio$2d$node$2d$to$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$disconnect$2d$native$2d$audio$2d$node$2d$from$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$node$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$audio$2d$param$2d$connections$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$event$2d$listeners$2d$of$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$first$2d$sample$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$native$2d$audio$2d$param$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$get$2d$value$2d$for$2d$key$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$insert$2d$element$2d$in$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$active$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$dc$2d$curve$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$part$2d$of$2d$a$2d$cycle$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$is$2d$passive$2d$audio$2d$node$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$overwrite$2d$accessors$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$pick$2d$element$2d$from$2d$set$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$audio$2d$worklet$2d$node$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$channel$2d$splitter$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$sanitize$2d$periodic$2d$wave$2d$options$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$set$2d$value$2d$at$2d$time$2d$until$2d$possible$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$copy$2d$channel$2d$methods$2d$out$2d$of$2d$bounds$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$consecutive$2d$calls$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$offset$2d$clamping$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$buffer$2d$source$2d$node$2d$stop$2d$method$2d$nullified$2d$buffer$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$start$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$negative$2d$parameters$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$audio$2d$worklet$2d$node$2d$options$2d$clonability$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$dom$2d$exception$2d$constructor$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-dom-exception-constructor-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$promise$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$test$2d$transferables$2d$support$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$buffer$2d$source$2d$node$2d$start$2d$method$2d$offset$2d$clamping$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$audio$2d$scheduled$2d$source$2d$node$2d$stop$2d$method$2d$consecutive$2d$calls$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$helpers$2f$wrap$2d$event$2d$listener$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$interfaces$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/interfaces/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$types$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$module__evaluation$3e$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/types/index.js [app-client] (ecmascript) <module evaluation>");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$standardized$2d$audio$2d$context$2f$build$2f$es2019$2f$module$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__$3c$locals$3e$__ = __turbopack_context__.i("[project]/node_modules/standardized-audio-context/build/es2019/module.js [app-client] (ecmascript) <locals>");
}}),
}]);

//# sourceMappingURL=node_modules_standardized-audio-context_build_es2019_43198ff4._.js.map